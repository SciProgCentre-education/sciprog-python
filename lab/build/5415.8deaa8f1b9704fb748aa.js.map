{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/layoutrestorer.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/mimerenderers.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","_format","format","document","body","dataset","emit","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","ILayoutRestorer","KEY","LayoutRestorer","_firstDone","_promisesDone","_promises","_restored","PromiseDelegate","_trackers","Set","_widgets","Map","_connector","connector","_first","first","_registry","registry","all","clear","promise","widget","name","nameProperty","set","disposed","connect","_onWidgetDisposed","blank","fresh","mainArea","leftArea","rightArea","relativeSizes","layout","fetch","data","main","left","right","_rehydrateMainArea","_rehydrateSideArea","error","tracker","warning","console","warn","reject","namespace","has","args","when","add","widgetAdded","_","widgetName","widgetUpdated","restore","JSONExt","concat","push","dehydrated","_dehydrateMainArea","_dehydrateSideArea","save","area","serializeMain","deserializeMain","collapsed","currentWidget","current","get","widgets","map","filter","_a","internal","Array","isArray","delete","serializeArea","type","currentIndex","orientation","sizes","children","deserializeArea","names","hydrated","child","AttachedProperty","create","owner","dock","IMimeDocumentTracker","createRendermimePlugins","extensions","plugins","WidgetTracker","forEach","mod","default","hasOwnProperty","item","createRendermimePlugin","id","optional","provides","autoStart","activate","app","restorer","context","factory","factoryNameProperty","requires","IRenderMimeRegistry","ITranslator","rendermime","undefined","rank","addFactory","rendererFactory","documentWidgetFactoryOptions","fileTypes","ft","icon","Object","assign","LabIcon","addFileType","option","toolbarFactory","w","content","MimeDocumentFactory","renderTimeout","dataType","modelName","primaryFileType","getFileType","defaultFor","defaultRendered","addWidgetFactory","widgetCreated","sender","pathChanged","SIDEBAR_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","addClass","_tracker","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","FocusTracker","_mainOptionsCache","_sideOptionsCache","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","panel","setAttribute","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","dockPanel","_dockPanel","DockPanelSvg","MessageLoop","hsplitPanel","_hsplitPanel","RestorableSplitPanel","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","sideBar","contentNode","stackedPanel","spacing","direction","SplitPanel","addWidget","setRelativeSizes","hide","currentChanged","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","updated","titleWidgetHandler","_titleWidgetHandler","TitleWidgetHandler","titleWidget","mode","insertWidget","skipLinkWidgetHandler","_skipLinkWidgetHandler","SkipLinkWidgetHandler","skipLinkWidget","show","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","_updateCurrentPath","activeWidget","currentTitle","hasClass","value","toggleClass","applicationCurrentWidget","saveLayout","activateWidget","shellMode","toArray","normalizeAreaConfig","restoreLayout","parent","_addToMainArea","find","_currentTabBar","ci","titles","nextBar","_adjacentBar","prevBar","len","_addToLeftArea","_addToRightArea","_addToHeaderArea","_addToTopArea","_addToMenuArea","_addToBottomArea","Error","collapse","isDisposed","dispose","expand","isEmpty","activateById","rehydrate","collapseLeft","collapseRight","dehydrate","iter","t","inputElement","label","caption","ref","bindprops","stylesheet","iconClass","classes","isHidden","bars","tabBars","index","indexOf","bar","className","replace","invoke","itemCmp","second","_panelChildHook","_items","v","ArrayExt","_panel","Panel","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","widgetRemoved","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","insertTab","_refreshVisibility","i","setHidden","oldWidget","previousTitle","_findWidgetByTitle","newWidget","_findWidgetIndex","removeTab","shell","_isDisposed","_skipLinkWidget","skipToFilterFiles","createElement","href","tabIndex","text","addEventListener","appendChild","_focusFileSearch","querySelector","focus","removeEventListener","_selected","_shell","_titleWidget","titleInput","_evtKeyUp","_evtClick","key","oldName","split","pop","newName","blur","isValidFileName","rename","button","readOnly","removeAttribute","selectEnd","select","setSelectionRange","onUpdateRequest","ILabStatus","LabStatus","_busyCount","_dirtyCount","_busySignal","_dirtySignal","oldDirty","isDirty","DisposableDelegate","Math","max","oldBusy","isBusy","JupyterLab","PageConfig","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","mods","registerPluginModule","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","_b","parsed","URLExt","window","location","search","hash","pathname","request","history","hard","old","url","reload","pushState","skipRouting","route","pattern","rules","routed","rule","queue","sort","a","b","done","next","execute","debug","reason","ITreePathUpdater","IConnectionLost","IRouter"],"mappings":"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","file":"5415.8deaa8f1b9704fb748aa.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied funcion. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt, PromiseDelegate, Token } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\n/**\n * The layout restorer token.\n */\nexport const ILayoutRestorer = new Token('@jupyterlab/application:ILayoutRestorer');\n/**\n * The data connector key for restorer data.\n */\nconst KEY = 'layout-restorer:data';\n/**\n * The default implementation of a layout restorer.\n *\n * #### Notes\n * The lifecycle for state restoration is subtle. The sequence of events is:\n *\n * 1. The layout restorer plugin is instantiated and makes a `fetch` call to\n *    the data connector that stores the layout restoration data. The `fetch`\n *    call returns a promise that resolves in step 6, below.\n *\n * 2. Other plugins that care about state restoration require the layout\n *    restorer as a dependency.\n *\n * 3. As each load-time plugin initializes (which happens before the front-end\n *    application has `started`), it instructs the layout restorer whether\n *    the restorer ought to `restore` its widgets by passing in its widget\n *    tracker.\n *    Alternatively, a plugin that does not require its own widget tracker\n *    (because perhaps it only creates a single widget, like a command palette),\n *    can simply `add` its widget along with a persistent unique name to the\n *    layout restorer so that its layout state can be restored when the lab\n *    application restores.\n *\n * 4. After all the load-time plugins have finished initializing, the front-end\n *    application `started` promise will resolve. This is the `first`\n *    promise that the layout restorer waits for. By this point, all of the\n *    plugins that care about restoration will have instructed the layout\n *    restorer to `restore` their widget trackers.\n *\n * 5. The layout restorer will then instruct each plugin's widget tracker\n *    to restore its state and reinstantiate whichever widgets it wants. The\n *    tracker returns a promise to the layout restorer that resolves when it\n *    has completed restoring the tracked widgets it cares about.\n *\n * 6. As each widget tracker finishes restoring the widget instances it cares\n *    about, it resolves the promise that was returned to the layout restorer\n *    (in step 5). After all of the promises that the restorer is awaiting have\n *    settled, the restorer then resolves the outstanding `fetch` promise\n *    (from step 1) and hands off a layout state object to the application\n *    shell's `restoreLayout` method for restoration.\n *\n * 7. Once the application shell has finished restoring the layout, the\n *    JupyterLab application's `restored` promise is resolved.\n *\n * Of particular note are steps 5 and 6: since data restoration of plugins\n * is accomplished by executing commands, the command that is used to restore\n * the data of each plugin must return a promise that only resolves when the\n * widget has been created and added to the plugin's widget tracker.\n */\nexport class LayoutRestorer {\n    /**\n     * Create a layout restorer.\n     */\n    constructor(options) {\n        this._firstDone = false;\n        this._promisesDone = false;\n        this._promises = [];\n        this._restored = new PromiseDelegate();\n        this._trackers = new Set();\n        this._widgets = new Map();\n        this._connector = options.connector;\n        this._first = options.first;\n        this._registry = options.registry;\n        void this._first\n            .then(() => {\n            this._firstDone = true;\n        })\n            .then(() => Promise.all(this._promises))\n            .then(() => {\n            this._promisesDone = true;\n            // Release the tracker set.\n            this._trackers.clear();\n        })\n            .then(() => {\n            this._restored.resolve(void 0);\n        });\n    }\n    /**\n     * A promise resolved when the layout restorer is ready to receive signals.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Add a widget to be tracked by the layout restorer.\n     */\n    add(widget, name) {\n        Private.nameProperty.set(widget, name);\n        this._widgets.set(name, widget);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n    }\n    /**\n     * Fetch the layout state for the application.\n     *\n     * #### Notes\n     * Fetching the layout relies on all widget restoration to be complete, so\n     * calls to `fetch` are guaranteed to return after restoration is complete.\n     */\n    async fetch() {\n        const blank = {\n            fresh: true,\n            mainArea: null,\n            leftArea: null,\n            rightArea: null,\n            relativeSizes: null\n        };\n        const layout = this._connector.fetch(KEY);\n        try {\n            const [data] = await Promise.all([layout, this.restored]);\n            if (!data) {\n                return blank;\n            }\n            const { main, left, right, relativeSizes } = data;\n            // If any data exists, then this is not a fresh session.\n            const fresh = false;\n            // Rehydrate main area.\n            const mainArea = this._rehydrateMainArea(main);\n            // Rehydrate left area.\n            const leftArea = this._rehydrateSideArea(left);\n            // Rehydrate right area.\n            const rightArea = this._rehydrateSideArea(right);\n            return {\n                fresh,\n                mainArea,\n                leftArea,\n                rightArea,\n                relativeSizes: relativeSizes || null\n            };\n        }\n        catch (error) {\n            return blank;\n        }\n    }\n    /**\n     * Restore the widgets of a particular widget tracker.\n     *\n     * @param tracker - The widget tracker whose widgets will be restored.\n     *\n     * @param options - The restoration options.\n     */\n    restore(tracker, options) {\n        const warning = 'restore() can only be called before `first` has resolved.';\n        if (this._firstDone) {\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const { namespace } = tracker;\n        if (this._trackers.has(namespace)) {\n            const warning = `A tracker namespaced ${namespace} was already restored.`;\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const { args, command, name, when } = options;\n        // Add the tracker to the private trackers collection.\n        this._trackers.add(namespace);\n        // Whenever a new widget is added to the tracker, record its name.\n        tracker.widgetAdded.connect((_, widget) => {\n            const widgetName = name(widget);\n            if (widgetName) {\n                this.add(widget, `${namespace}:${widgetName}`);\n            }\n        }, this);\n        // Whenever a widget is updated, get its new name.\n        tracker.widgetUpdated.connect((_, widget) => {\n            const widgetName = name(widget);\n            if (widgetName) {\n                const name = `${namespace}:${widgetName}`;\n                Private.nameProperty.set(widget, name);\n                this._widgets.set(name, widget);\n            }\n        });\n        const first = this._first;\n        const promise = tracker\n            .restore({\n            args: args || (() => JSONExt.emptyObject),\n            command,\n            connector: this._connector,\n            name,\n            registry: this._registry,\n            when: when ? [first].concat(when) : first\n        })\n            .catch(error => {\n            console.error(error);\n        });\n        this._promises.push(promise);\n        return promise;\n    }\n    /**\n     * Save the layout state for the application.\n     */\n    save(data) {\n        // If there are promises that are unresolved, bail.\n        if (!this._promisesDone) {\n            const warning = 'save() was called prematurely.';\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const dehydrated = {};\n        dehydrated.main = this._dehydrateMainArea(data.mainArea);\n        dehydrated.left = this._dehydrateSideArea(data.leftArea);\n        dehydrated.right = this._dehydrateSideArea(data.rightArea);\n        dehydrated.relativeSizes = data.relativeSizes;\n        return this._connector.save(KEY, dehydrated);\n    }\n    /**\n     * Dehydrate a main area description into a serializable object.\n     */\n    _dehydrateMainArea(area) {\n        if (!area) {\n            return null;\n        }\n        return Private.serializeMain(area);\n    }\n    /**\n     * Reydrate a serialized main area description object.\n     *\n     * #### Notes\n     * This function consumes data that can become corrupted, so it uses type\n     * coercion to guarantee the dehydrated object is safely processed.\n     */\n    _rehydrateMainArea(area) {\n        if (!area) {\n            return null;\n        }\n        return Private.deserializeMain(area, this._widgets);\n    }\n    /**\n     * Dehydrate a side area description into a serializable object.\n     */\n    _dehydrateSideArea(area) {\n        if (!area) {\n            return null;\n        }\n        const dehydrated = { collapsed: area.collapsed };\n        if (area.currentWidget) {\n            const current = Private.nameProperty.get(area.currentWidget);\n            if (current) {\n                dehydrated.current = current;\n            }\n        }\n        if (area.widgets) {\n            dehydrated.widgets = area.widgets\n                .map(widget => Private.nameProperty.get(widget))\n                .filter(name => !!name);\n        }\n        return dehydrated;\n    }\n    /**\n     * Reydrate a serialized side area description object.\n     *\n     * #### Notes\n     * This function consumes data that can become corrupted, so it uses type\n     * coercion to guarantee the dehydrated object is safely processed.\n     */\n    _rehydrateSideArea(area) {\n        var _a;\n        if (!area) {\n            return { collapsed: true, currentWidget: null, widgets: null };\n        }\n        const internal = this._widgets;\n        const collapsed = (_a = area.collapsed) !== null && _a !== void 0 ? _a : false;\n        const currentWidget = area.current && internal.has(`${area.current}`)\n            ? internal.get(`${area.current}`)\n            : null;\n        const widgets = !Array.isArray(area.widgets)\n            ? null\n            : area.widgets\n                .map(name => internal.has(`${name}`) ? internal.get(`${name}`) : null)\n                .filter(widget => !!widget);\n        return {\n            collapsed,\n            currentWidget: currentWidget,\n            widgets: widgets\n        };\n    }\n    /**\n     * Handle a widget disposal.\n     */\n    _onWidgetDisposed(widget) {\n        const name = Private.nameProperty.get(widget);\n        this._widgets.delete(name);\n    }\n}\n/*\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a widget's ID in the serialized restore data.\n     */\n    Private.nameProperty = new AttachedProperty({\n        name: 'name',\n        create: owner => ''\n    });\n    /**\n     * Serialize individual areas within the main area.\n     */\n    function serializeArea(area) {\n        if (!area || !area.type) {\n            return null;\n        }\n        if (area.type === 'tab-area') {\n            return {\n                type: 'tab-area',\n                currentIndex: area.currentIndex,\n                widgets: area.widgets\n                    .map(widget => Private.nameProperty.get(widget))\n                    .filter(name => !!name)\n            };\n        }\n        return {\n            type: 'split-area',\n            orientation: area.orientation,\n            sizes: area.sizes,\n            children: area.children\n                .map(serializeArea)\n                .filter(area => !!area)\n        };\n    }\n    /**\n     * Return a dehydrated, serializable version of the main dock panel.\n     */\n    function serializeMain(area) {\n        const dehydrated = {\n            dock: (area && area.dock && serializeArea(area.dock.main)) || null\n        };\n        if (area) {\n            if (area.currentWidget) {\n                const current = Private.nameProperty.get(area.currentWidget);\n                if (current) {\n                    dehydrated.current = current;\n                }\n            }\n        }\n        return dehydrated;\n    }\n    Private.serializeMain = serializeMain;\n    /**\n     * Deserialize individual areas within the main area.\n     *\n     * #### Notes\n     * Because this data comes from a potentially unreliable foreign source, it is\n     * typed as a `JSONObject`; but the actual expected type is:\n     * `ITabArea | ISplitArea`.\n     *\n     * For fault tolerance, types are manually checked in deserialization.\n     */\n    function deserializeArea(area, names) {\n        if (!area) {\n            return null;\n        }\n        // Because this data is saved to a foreign data source, its type safety is\n        // not guaranteed when it is retrieved, so exhaustive checks are necessary.\n        const type = area.type || 'unknown';\n        if (type === 'unknown' || (type !== 'tab-area' && type !== 'split-area')) {\n            console.warn(`Attempted to deserialize unknown type: ${type}`);\n            return null;\n        }\n        if (type === 'tab-area') {\n            const { currentIndex, widgets } = area;\n            const hydrated = {\n                type: 'tab-area',\n                currentIndex: currentIndex || 0,\n                widgets: (widgets &&\n                    widgets\n                        .map(widget => names.get(widget))\n                        .filter(widget => !!widget)) ||\n                    []\n            };\n            // Make sure the current index is within bounds.\n            if (hydrated.currentIndex > hydrated.widgets.length - 1) {\n                hydrated.currentIndex = 0;\n            }\n            return hydrated;\n        }\n        const { orientation, sizes, children } = area;\n        const hydrated = {\n            type: 'split-area',\n            orientation: orientation,\n            sizes: sizes || [],\n            children: (children &&\n                children\n                    .map(child => deserializeArea(child, names))\n                    .filter(widget => !!widget)) ||\n                []\n        };\n        return hydrated;\n    }\n    /**\n     * Return the hydrated version of the main dock panel, ready to restore.\n     *\n     * #### Notes\n     * Because this data comes from a potentially unreliable foreign source, it is\n     * typed as a `JSONObject`; but the actual expected type is: `IMainArea`.\n     *\n     * For fault tolerance, types are manually checked in deserialization.\n     */\n    function deserializeMain(area, names) {\n        if (!area) {\n            return null;\n        }\n        const name = area.current || null;\n        const dock = area.dock || null;\n        return {\n            currentWidget: (name && names.has(name) && names.get(name)) || null,\n            dock: dock ? { main: deserializeArea(dock, names) } : null\n        };\n    }\n    Private.deserializeMain = deserializeMain;\n})(Private || (Private = {}));\n//# sourceMappingURL=layoutrestorer.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { MimeDocumentFactory } from '@jupyterlab/docregistry';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Token } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { ILayoutRestorer } from './layoutrestorer';\nimport { ITranslator } from '@jupyterlab/translation';\n/**\n * The mime document tracker token.\n */\nexport const IMimeDocumentTracker = new Token('@jupyterlab/application:IMimeDocumentTracker');\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugins(extensions) {\n    const plugins = [];\n    const namespace = 'application-mimedocuments';\n    const tracker = new WidgetTracker({ namespace });\n    extensions.forEach(mod => {\n        let data = mod.default;\n        // Handle CommonJS exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            plugins.push(createRendermimePlugin(tracker, item));\n        });\n    });\n    // Also add a meta-plugin handling state restoration\n    // and exposing the mime document widget tracker.\n    plugins.push({\n        id: '@jupyterlab/application:mimedocument',\n        optional: [ILayoutRestorer],\n        provides: IMimeDocumentTracker,\n        autoStart: true,\n        activate: (app, restorer) => {\n            if (restorer) {\n                void restorer.restore(tracker, {\n                    command: 'docmanager:open',\n                    args: widget => ({\n                        path: widget.context.path,\n                        factory: Private.factoryNameProperty.get(widget)\n                    }),\n                    name: widget => `${widget.context.path}:${Private.factoryNameProperty.get(widget)}`\n                });\n            }\n            return tracker;\n        }\n    });\n    return plugins;\n}\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugin(tracker, item) {\n    return {\n        id: item.id,\n        requires: [IRenderMimeRegistry, ITranslator],\n        autoStart: true,\n        activate: (app, rendermime, translator) => {\n            // Add the mime renderer.\n            if (item.rank !== undefined) {\n                rendermime.addFactory(item.rendererFactory, item.rank);\n            }\n            else {\n                rendermime.addFactory(item.rendererFactory);\n            }\n            // Handle the widget factory.\n            if (!item.documentWidgetFactoryOptions) {\n                return;\n            }\n            const registry = app.docRegistry;\n            let options = [];\n            if (Array.isArray(item.documentWidgetFactoryOptions)) {\n                options = item.documentWidgetFactoryOptions;\n            }\n            else {\n                options = [\n                    item.documentWidgetFactoryOptions\n                ];\n            }\n            if (item.fileTypes) {\n                item.fileTypes.forEach(ft => {\n                    if (ft.icon) {\n                        // upconvert the contents of the icon field to a proper LabIcon\n                        ft = Object.assign(Object.assign({}, ft), { icon: LabIcon.resolve({ icon: ft.icon }) });\n                    }\n                    app.docRegistry.addFileType(ft);\n                });\n            }\n            options.forEach(option => {\n                const toolbarFactory = option.toolbarFactory\n                    ? (w) => option.toolbarFactory(w.content.renderer)\n                    : undefined;\n                const factory = new MimeDocumentFactory({\n                    renderTimeout: item.renderTimeout,\n                    dataType: item.dataType,\n                    rendermime,\n                    modelName: option.modelName,\n                    name: option.name,\n                    primaryFileType: registry.getFileType(option.primaryFileType),\n                    fileTypes: option.fileTypes,\n                    defaultFor: option.defaultFor,\n                    defaultRendered: option.defaultRendered,\n                    toolbarFactory,\n                    translator,\n                    factory: item.rendererFactory\n                });\n                registry.addWidgetFactory(factory);\n                factory.widgetCreated.connect((sender, widget) => {\n                    Private.factoryNameProperty.set(widget, factory.name);\n                    // Notify the widget tracker if restore data needs to update.\n                    widget.context.pathChanged.connect(() => {\n                        void tracker.save(widget);\n                    });\n                    void tracker.add(widget);\n                });\n            });\n        }\n    };\n}\n/**\n * Private namespace for the module.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for keeping the factory name\n     * that was used to create a mimedocument.\n     */\n    Private.factoryNameProperty = new AttachedProperty({\n        name: 'factoryName',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=mimerenderers.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, DockPanelSvg, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\nimport { isValidFileName } from '@jupyterlab/docmanager';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const trans = ((options && options.translator) || nullTranslator).load('jupyterlab');\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        menuHandler.panel.node.setAttribute('role', 'navigation');\n        menuHandler.panel.node.setAttribute('aria-label', trans.__('main'));\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        topHandler.panel.node.setAttribute('role', 'banner');\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        bottomPanel.node.setAttribute('role', 'contentinfo');\n        const hboxPanel = new BoxPanel();\n        const dockPanel = (this._dockPanel = new DockPanelSvg());\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = (this._hsplitPanel = new Private.RestorableSplitPanel());\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.sideBar.node.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.node.setAttribute('role', 'complementary');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.sideBar.node.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.node.setAttribute('role', 'complementary');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        dockPanel.node.setAttribute('role', 'main');\n        hboxPanel.spacing = 0;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(hsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel. The default sizes will be overwritten during layout restoration.\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Catch update events on the horizontal split panel\n        this._hsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleWidgetHandler = (this._titleWidgetHandler = new Private.TitleWidgetHandler(this));\n        this.add(titleWidgetHandler.titleWidget, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleWidgetHandler.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Skip Links\n        const skipLinkWidgetHandler = (this._skipLinkWidgetHandler = new Private.SkipLinkWidgetHandler(this));\n        this.add(skipLinkWidgetHandler.skipLinkWidget, 'top', { rank: 0 });\n        this._skipLinkWidgetHandler.show();\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/mutiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Set the mode data attribute on the application shell node.\n            this.node.dataset.shellMode = mode;\n            // Adjust menu and title\n            // this.add(this._menuHandler.panel, 'top', {rank: 100});\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleWidgetHandler.show();\n            this._updateTitlePanelTitle();\n            this._modeChanged.emit(mode);\n            return;\n        }\n        // Cache a reference to every widget currently in the dock panel.\n        const widgets = toArray(dock.widgets());\n        // Toggle back to multiple document mode.\n        dock.mode = mode;\n        // Restore the original layout.\n        if (this._cachedLayout) {\n            // Remove any disposed widgets in the cached layout and restore.\n            Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n            dock.restoreLayout(this._cachedLayout);\n            this._cachedLayout = null;\n        }\n        // Add any widgets created during single document mode, which have\n        // subsequently been removed from the dock panel after the multiple document\n        // layout has been restored. If the widget has add options cached for\n        // the widget (i.e., if it has been placed with respect to another widget),\n        // then take that into account.\n        widgets.forEach(widget => {\n            if (!widget.parent) {\n                this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n            }\n        });\n        this._mainOptionsCache.clear();\n        // In case the active widget in the dock panel is *not* the active widget\n        // of the application, defer to the application.\n        if (applicationCurrentWidget) {\n            dock.activateWidget(applicationCurrentWidget);\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        // Adjust menu and title\n        this.add(this._menuHandler.panel, 'top', { rank: 100 });\n        // this._topHandler.addWidget(this._menuHandler.panel, 100)\n        this._titleWidgetHandler.hide();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        this._titleWidgetHandler.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    restoreLayout(mode, layout) {\n        const { mainArea, leftArea, rightArea, relativeSizes } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock) {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        // Restore the relative sizes.\n        if (relativeSizes) {\n            this._hsplitPanel.setRelativeSizes(relativeSizes);\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate(),\n            relativeSizes: this._hsplitPanel.relativeSizes()\n        };\n        return layout;\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const inputElement = this._titleWidgetHandler.titleWidget.node\n            .children[0];\n        inputElement.value = current ? current.title.label : '';\n        inputElement.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true,\n                orientation: 'vertical'\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n    class SkipLinkWidgetHandler {\n        /**\n         * Construct a new skipLink widget handler.\n         */\n        constructor(shell) {\n            this._isDisposed = false;\n            const skipLinkWidget = (this._skipLinkWidget = new Widget());\n            const skipToFilterFiles = document.createElement('a');\n            skipToFilterFiles.href = '#';\n            skipToFilterFiles.tabIndex = 1;\n            skipToFilterFiles.text = 'Skip to Filter Files';\n            skipToFilterFiles.className = 'skip-link';\n            skipToFilterFiles.addEventListener('click', this);\n            skipLinkWidget.addClass('jp-skiplink');\n            skipLinkWidget.id = 'jp-skiplink';\n            skipLinkWidget.node.appendChild(skipToFilterFiles);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusFileSearch();\n                    break;\n            }\n        }\n        _focusFileSearch() {\n            const input = document.querySelector('#filename-searcher .bp3-input');\n            input.focus();\n        }\n        /**\n         * Get the input element managed by the handler.\n         */\n        get skipLinkWidget() {\n            return this._skipLinkWidget;\n        }\n        /**\n         * Dispose of the handler and the resources it holds.\n         */\n        dispose() {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._skipLinkWidget.node.removeEventListener('click', this);\n            this._skipLinkWidget.dispose();\n        }\n        /**\n         * Hide the skipLink widget.\n         */\n        hide() {\n            this._skipLinkWidget.hide();\n        }\n        /**\n         * Show the skipLink widget.\n         */\n        show() {\n            this._skipLinkWidget.show();\n        }\n        /**\n         * Test whether the handler has been disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n    }\n    Private.SkipLinkWidgetHandler = SkipLinkWidgetHandler;\n    class TitleWidgetHandler {\n        /**\n         * Construct a new title widget handler.\n         */\n        constructor(shell) {\n            this._isDisposed = false;\n            this._selected = false;\n            this._shell = shell;\n            const titleWidget = (this._titleWidget = new Widget());\n            titleWidget.id = 'jp-title-panel-title';\n            const titleInput = document.createElement('input');\n            titleInput.type = 'text';\n            titleInput.addEventListener('keyup', this);\n            titleInput.addEventListener('click', this);\n            titleInput.addEventListener('blur', this);\n            titleWidget.node.appendChild(titleInput);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'keyup':\n                    void this._evtKeyUp(event);\n                    break;\n                case 'click':\n                    this._evtClick(event);\n                    break;\n                case 'blur':\n                    this._selected = false;\n                    break;\n            }\n        }\n        /**\n         * Handle `keyup` events on the handler.\n         */\n        async _evtKeyUp(event) {\n            if (event.key == 'Enter') {\n                const widget = this._shell.currentWidget;\n                if (widget instanceof DocumentWidget) {\n                    const oldName = widget.context.path.split('/').pop();\n                    const inputElement = this.titleWidget.node\n                        .children[0];\n                    const newName = inputElement.value;\n                    inputElement.blur();\n                    if (newName !== oldName && isValidFileName(newName)) {\n                        await widget.context.rename(newName);\n                    }\n                    else {\n                        inputElement.value = oldName;\n                    }\n                }\n            }\n        }\n        /**\n         * Handle `click` events on the handler.\n         */\n        _evtClick(event) {\n            // only handle primary button clicks\n            if (event.button !== 0 || this._selected) {\n                return;\n            }\n            const currentWidget = this._shell.currentWidget;\n            const inputElement = this.titleWidget.node\n                .children[0];\n            if (currentWidget == null || !(currentWidget instanceof DocumentWidget)) {\n                inputElement.readOnly = true;\n                return;\n            }\n            else {\n                inputElement.removeAttribute('readOnly');\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this._selected = true;\n            const selectEnd = inputElement.value.indexOf('.');\n            if (selectEnd === -1) {\n                inputElement.select();\n            }\n            else {\n                inputElement.setSelectionRange(0, selectEnd);\n            }\n        }\n        /**\n         * Get the input element managed by the handler.\n         */\n        get titleWidget() {\n            return this._titleWidget;\n        }\n        /**\n         * Dispose of the handler and the resources it holds.\n         */\n        dispose() {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._titleWidget.node.removeEventListener('keyup', this);\n            this._titleWidget.node.removeEventListener('click', this);\n            this._titleWidget.node.removeEventListener('blur', this);\n            this._titleWidget.dispose();\n        }\n        /**\n         * Hide the title widget.\n         */\n        hide() {\n            this._titleWidget.hide();\n        }\n        /**\n         * Show the title widget.\n         */\n        show() {\n            this._titleWidget.show();\n        }\n        /**\n         * Test whether the handler has been disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n    }\n    Private.TitleWidgetHandler = TitleWidgetHandler;\n    class RestorableSplitPanel extends SplitPanel {\n        constructor(options = {}) {\n            super(options);\n            this.updated = new Signal(this);\n        }\n        /**\n         * Emit 'updated' signal on 'update' requests.\n         */\n        onUpdateRequest(msg) {\n            super.onUpdateRequest(msg);\n            this.updated.emit();\n        }\n    }\n    Private.RestorableSplitPanel = RestorableSplitPanel;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus');\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}
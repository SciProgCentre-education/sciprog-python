{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/index.js"],"names":["CommandIDs","activateNextTab","activatePreviousTab","activateNextTabBar","activatePreviousTabBar","close","closeOtherTabs","closeRightTabs","closeAll","setMode","toggleMode","toggleLeftArea","toggleRightArea","togglePresentationMode","tree","switchSidebar","mainCommands","id","autoStart","requires","ITranslator","optional","ILabShell","ICommandPalette","activate","app","translator","labShell","palette","commands","contextMenu","shell","trans","load","category","__","addCommand","JupyterFrontEndContextMenu","label","isEnabled","execute","addItem","command","selector","rank","Infinity","contextMenuWidget","node","contextMenuHitTest","dataset","currentWidget","matches","toArray","widgets","filter","widget","length","closeWidgets","forEach","findTab","area","type","iterator","iter","children","value","tab","next","some","widgetsRightOf","tabArea","_a","layout","saveLayout","mainArea","PageConfig","dock","main","tabAreaFor","index","findIndex","slice","tabSelector","title","closable","otherWidgets","leftCollapsed","expandLeft","collapseLeft","activateById","isToggled","isVisible","isEmpty","rightCollapsed","expandRight","collapseRight","presentationMode","args","mode","Error","IRouter","IWindowResolver","IConnectionLost","provides","ITreePathUpdater","router","resolver","connectionLost","JupyterLab","_docTreePath","_defaultBrowserTreePath","workspace","name","console","debug","registerPluginErrors","body","map","e","message","join","showErrorMessage","layoutModified","connect","notifyCommandChanged","modeChanged","_","path","navigate","skipRouting","currentPathChanged","maybeTreePath","newValue","treePath","ConnectionLost","serviceManager","connectionFailure","manager","error","builder","build","then","showDialog","buttons","Dialog","actions","hasClose","button","accept","reload","catch","err","includes","isAvailable","shouldCheck","getStatus","response","status","result","undefined","window","addEventListener","event","isDirty","returnValue","IStateDB","state","info","first","started","registry","restorer","LayoutRestorer","connector","fetch","saved","restoreLayout","save","ILayoutRestorer","JupyterFrontEnd","paths","base","urls","Router","route","set","DisposableSet","delegate","PromiseDelegate","treePattern","RegExp","add","async","isDisposed","query","URLExt","search","browser","dispose","resolve","file","register","pattern","listener","routed","DisposableDelegate","disconnect","promise","notfound","bad","notFound","busy","ILabStatus","busySignal","isBusy","favicon","document","querySelector","newFavicon","rel","parentNode","replaceChild","SIDEBAR_ID","sidebar","ISettingRegistry","settingRegistry","overrides","handleLayoutOverrides","each","Promise","all","restored","settings","get","composite","changed","contextNode","side","leftPanel","getElementById","contains","newOverrides","Object","assign","LabShell","propertyInspector","IPropertyInspectorProvider","labshell","SideBarPropertyInspectorProvider","icon","buildIcon","caption","JupyterLogo","logo","Widget","jupyterIcon","container","elementPosition","margin","height","width"],"mappings":"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","file":"5311.61a3f86e3426d8b1c2e5.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module application-extension\n */\nimport { IConnectionLost, ILabShell, ILabStatus, ILayoutRestorer, IRouter, ITreePathUpdater, ConnectionLost, JupyterFrontEnd, JupyterFrontEndContextMenu, JupyterLab, LabShell, LayoutRestorer, Router } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, IWindowResolver, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { URLExt, PageConfig } from '@jupyterlab/coreutils';\nimport { IPropertyInspectorProvider, SideBarPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { buildIcon, jupyterIcon } from '@jupyterlab/ui-components';\nimport { each, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activateNextTab = 'application:activate-next-tab';\n    CommandIDs.activatePreviousTab = 'application:activate-previous-tab';\n    CommandIDs.activateNextTabBar = 'application:activate-next-tab-bar';\n    CommandIDs.activatePreviousTabBar = 'application:activate-previous-tab-bar';\n    CommandIDs.close = 'application:close';\n    CommandIDs.closeOtherTabs = 'application:close-other-tabs';\n    CommandIDs.closeRightTabs = 'application:close-right-tabs';\n    CommandIDs.closeAll = 'application:close-all';\n    CommandIDs.setMode = 'application:set-mode';\n    CommandIDs.toggleMode = 'application:toggle-mode';\n    CommandIDs.toggleLeftArea = 'application:toggle-left-area';\n    CommandIDs.toggleRightArea = 'application:toggle-right-area';\n    CommandIDs.togglePresentationMode = 'application:toggle-presentation-mode';\n    CommandIDs.tree = 'router:tree';\n    CommandIDs.switchSidebar = 'sidebar:switch';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to register the commands for the main application.\n */\nconst mainCommands = {\n    id: '@jupyterlab/application-extension:commands',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, ICommandPalette],\n    activate: (app, translator, labShell, palette) => {\n        const { commands, contextMenu, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        // Add Command to override the JLab context menu.\n        commands.addCommand(JupyterFrontEndContextMenu.contextMenu, {\n            label: trans.__('Shift+Right Click for Browser Menu'),\n            isEnabled: () => false,\n            execute: () => void 0\n        });\n        contextMenu.addItem({\n            command: JupyterFrontEndContextMenu.contextMenu,\n            selector: 'body',\n            rank: Infinity // At the bottom always\n        });\n        // Returns the widget associated with the most recent contextmenu event.\n        const contextMenuWidget = () => {\n            const test = (node) => !!node.dataset.id;\n            const node = app.contextMenuHitTest(test);\n            if (!node) {\n                // Fall back to active widget if path cannot be obtained from event.\n                return shell.currentWidget;\n            }\n            const matches = toArray(shell.widgets('main')).filter(widget => widget.id === node.dataset.id);\n            if (matches.length < 1) {\n                return shell.currentWidget;\n            }\n            return matches[0];\n        };\n        // Closes an array of widgets.\n        const closeWidgets = (widgets) => {\n            widgets.forEach(widget => widget.close());\n        };\n        // Find the tab area for a widget within a specific dock area.\n        const findTab = (area, widget) => {\n            switch (area.type) {\n                case 'split-area': {\n                    const iterator = iter(area.children);\n                    let tab = null;\n                    let value;\n                    do {\n                        value = iterator.next();\n                        if (value) {\n                            tab = findTab(value, widget);\n                        }\n                    } while (!tab && value);\n                    return tab;\n                }\n                case 'tab-area': {\n                    const { id } = widget;\n                    return area.widgets.some(widget => widget.id === id) ? area : null;\n                }\n                default:\n                    return null;\n            }\n        };\n        // Find the tab area for a widget within the main dock area.\n        const tabAreaFor = (widget) => {\n            var _a;\n            const layout = labShell === null || labShell === void 0 ? void 0 : labShell.saveLayout();\n            const mainArea = layout === null || layout === void 0 ? void 0 : layout.mainArea;\n            if (!mainArea || PageConfig.getOption('mode') !== 'multiple-document') {\n                return null;\n            }\n            const area = (_a = mainArea.dock) === null || _a === void 0 ? void 0 : _a.main;\n            if (!area) {\n                return null;\n            }\n            return findTab(area, widget);\n        };\n        // Returns an array of all widgets to the right of a widget in a tab area.\n        const widgetsRightOf = (widget) => {\n            const { id } = widget;\n            const tabArea = tabAreaFor(widget);\n            const widgets = tabArea ? tabArea.widgets || [] : [];\n            const index = widgets.findIndex(widget => widget.id === id);\n            if (index < 0) {\n                return [];\n            }\n            return widgets.slice(index + 1);\n        };\n        // A CSS selector targeting tabs in the main area. This is a very\n        // specific selector since we really only want tabs that are\n        // in the main area, as opposed to those in sidebars, ipywidgets, etc.\n        const tabSelector = '#jp-main-dock-panel .lm-DockPanel-tabBar.jp-Activity .lm-TabBar-tab';\n        commands.addCommand(CommandIDs.close, {\n            label: () => trans.__('Close Tab'),\n            isEnabled: () => {\n                const widget = contextMenuWidget();\n                return !!widget && widget.title.closable;\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (widget) {\n                    widget.close();\n                }\n            }\n        });\n        contextMenu.addItem({\n            command: CommandIDs.close,\n            selector: tabSelector,\n            rank: 4\n        });\n        commands.addCommand(CommandIDs.closeOtherTabs, {\n            label: () => trans.__('Close All Other Tabs'),\n            isEnabled: () => {\n                // Ensure there are at least two widgets.\n                const iterator = shell.widgets('main');\n                return !!iterator.next() && !!iterator.next();\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                const { id } = widget;\n                const otherWidgets = toArray(shell.widgets('main')).filter(widget => widget.id !== id);\n                closeWidgets(otherWidgets);\n            }\n        });\n        contextMenu.addItem({\n            command: CommandIDs.closeOtherTabs,\n            selector: tabSelector,\n            rank: 4\n        });\n        commands.addCommand(CommandIDs.closeRightTabs, {\n            label: () => trans.__('Close Tabs to Right'),\n            isEnabled: () => !!contextMenuWidget() &&\n                widgetsRightOf(contextMenuWidget()).length > 0,\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                closeWidgets(widgetsRightOf(widget));\n            }\n        });\n        contextMenu.addItem({\n            command: CommandIDs.closeRightTabs,\n            selector: tabSelector,\n            rank: 5\n        });\n        if (labShell) {\n            commands.addCommand(CommandIDs.activateNextTab, {\n                label: trans.__('Activate Next Tab'),\n                execute: () => {\n                    labShell.activateNextTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTab, {\n                label: trans.__('Activate Previous Tab'),\n                execute: () => {\n                    labShell.activatePreviousTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activateNextTabBar, {\n                label: trans.__('Activate Next Tab Bar'),\n                execute: () => {\n                    labShell.activateNextTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTabBar, {\n                label: trans.__('Activate Previous Tab Bar'),\n                execute: () => {\n                    labShell.activatePreviousTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.closeAll, {\n                label: trans.__('Close All Tabs'),\n                execute: () => {\n                    labShell.closeAll();\n                }\n            });\n            commands.addCommand(CommandIDs.toggleLeftArea, {\n                label: () => trans.__('Show Left Sidebar'),\n                execute: () => {\n                    if (labShell.leftCollapsed) {\n                        labShell.expandLeft();\n                    }\n                    else {\n                        labShell.collapseLeft();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.leftCollapsed,\n                isVisible: () => !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.toggleRightArea, {\n                label: () => trans.__('Show Right Sidebar'),\n                execute: () => {\n                    if (labShell.rightCollapsed) {\n                        labShell.expandRight();\n                    }\n                    else {\n                        labShell.collapseRight();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.rightCollapsed,\n                isVisible: () => !labShell.isEmpty('right')\n            });\n            commands.addCommand(CommandIDs.togglePresentationMode, {\n                label: () => trans.__('Presentation Mode'),\n                execute: () => {\n                    labShell.presentationMode = !labShell.presentationMode;\n                },\n                isToggled: () => labShell.presentationMode,\n                isVisible: () => true\n            });\n            commands.addCommand(CommandIDs.setMode, {\n                isVisible: args => {\n                    const mode = args['mode'];\n                    return mode === 'single-document' || mode === 'multiple-document';\n                },\n                execute: args => {\n                    const mode = args['mode'];\n                    if (mode === 'single-document' || mode === 'multiple-document') {\n                        labShell.mode = mode;\n                        return;\n                    }\n                    throw new Error(`Unsupported application shell mode: ${mode}`);\n                }\n            });\n            commands.addCommand(CommandIDs.toggleMode, {\n                label: trans.__('Simple Interface'),\n                isToggled: () => labShell.mode === 'single-document',\n                execute: () => {\n                    const args = labShell.mode === 'multiple-document'\n                        ? { mode: 'single-document' }\n                        : { mode: 'multiple-document' };\n                    return commands.execute(CommandIDs.setMode, args);\n                }\n            });\n        }\n        if (palette) {\n            [\n                CommandIDs.activateNextTab,\n                CommandIDs.activatePreviousTab,\n                CommandIDs.activateNextTabBar,\n                CommandIDs.activatePreviousTabBar,\n                CommandIDs.close,\n                CommandIDs.closeAll,\n                CommandIDs.closeOtherTabs,\n                CommandIDs.closeRightTabs,\n                CommandIDs.toggleLeftArea,\n                CommandIDs.toggleRightArea,\n                CommandIDs.togglePresentationMode,\n                CommandIDs.toggleMode\n            ].forEach(command => palette.addItem({ command, category }));\n        }\n    }\n};\n/**\n * The main extension.\n */\nconst main = {\n    id: '@jupyterlab/application-extension:main',\n    requires: [IRouter, IWindowResolver, ITranslator],\n    optional: [IConnectionLost],\n    provides: ITreePathUpdater,\n    activate: (app, router, resolver, translator, connectionLost) => {\n        const trans = translator.load('jupyterlab');\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${main.id} must be activated in JupyterLab.`);\n        }\n        // These two internal state variables are used to manage the two source\n        // of the tree part of the URL being updated: 1) path of the active document,\n        // 2) path of the default browser if the active main area widget isn't a document.\n        let _docTreePath = '';\n        let _defaultBrowserTreePath = '';\n        function updateTreePath(treePath) {\n            _defaultBrowserTreePath = treePath;\n            if (!_docTreePath) {\n                const path = PageConfig.getUrl({ treePath });\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n            }\n        }\n        // Requiring the window resolver guarantees that the application extension\n        // only loads if there is a viable window name. Otherwise, the application\n        // will short-circuit and ask the user to navigate away.\n        const workspace = resolver.name;\n        console.debug(`Starting application in workspace: \"${workspace}\"`);\n        // If there were errors registering plugins, tell the user.\n        if (app.registerPluginErrors.length !== 0) {\n            const body = (React.createElement(\"pre\", null, app.registerPluginErrors.map(e => e.message).join('\\n')));\n            void showErrorMessage(trans.__('Error Registering Plugins'), {\n                message: body\n            });\n        }\n        // If the application shell layout is modified,\n        // trigger a refresh of the commands.\n        app.shell.layoutModified.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        // Watch the mode and update the page URL to /lab or /doc to reflect the\n        // change.\n        app.shell.modeChanged.connect((_, args) => {\n            const path = PageConfig.getUrl({ mode: args });\n            router.navigate(path, { skipRouting: true });\n            // Persist this mode change to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('mode', args);\n        });\n        // Watch the path of the current widget in the main area and update the page\n        // URL to reflect the change.\n        app.shell.currentPathChanged.connect((_, args) => {\n            const maybeTreePath = args.newValue;\n            const treePath = maybeTreePath || _defaultBrowserTreePath;\n            const path = PageConfig.getUrl({ treePath: treePath });\n            router.navigate(path, { skipRouting: true });\n            // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('treePath', treePath);\n            _docTreePath = maybeTreePath;\n        });\n        // If the connection to the server is lost, handle it with the\n        // connection lost handler.\n        connectionLost = connectionLost || ConnectionLost;\n        app.serviceManager.connectionFailure.connect((manager, error) => connectionLost(manager, error, translator));\n        const builder = app.serviceManager.builder;\n        const build = () => {\n            return builder\n                .build()\n                .then(() => {\n                return showDialog({\n                    title: trans.__('Build Complete'),\n                    body: (React.createElement(\"div\", null,\n                        trans.__('Build successfully completed, reload page?'),\n                        React.createElement(\"br\", null),\n                        trans.__('You will lose any unsaved changes.'))),\n                    buttons: [\n                        Dialog.cancelButton({\n                            label: trans.__('Reload Without Saving'),\n                            actions: ['reload']\n                        }),\n                        Dialog.okButton({ label: trans.__('Save and Reload') })\n                    ],\n                    hasClose: true\n                });\n            })\n                .then(({ button: { accept, actions } }) => {\n                if (accept) {\n                    void app.commands\n                        .execute('docmanager:save')\n                        .then(() => {\n                        router.reload();\n                    })\n                        .catch(err => {\n                        void showErrorMessage(trans.__('Save Failed'), {\n                            message: React.createElement(\"pre\", null, err.message)\n                        });\n                    });\n                }\n                else if (actions.includes('reload')) {\n                    router.reload();\n                }\n            })\n                .catch(err => {\n                void showErrorMessage(trans.__('Build Failed'), {\n                    message: React.createElement(\"pre\", null, err.message)\n                });\n            });\n        };\n        if (builder.isAvailable && builder.shouldCheck) {\n            void builder.getStatus().then(response => {\n                if (response.status === 'building') {\n                    return build();\n                }\n                if (response.status !== 'needed') {\n                    return;\n                }\n                const body = (React.createElement(\"div\", null,\n                    trans.__('JupyterLab build is suggested:'),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"pre\", null, response.message)));\n                void showDialog({\n                    title: trans.__('Build Recommended'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Build') })\n                    ]\n                }).then(result => (result.button.accept ? build() : undefined));\n            });\n        }\n        const message = trans.__('Are you sure you want to exit JupyterLab?\\n\\nAny unsaved changes will be lost.');\n        // The spec for the `beforeunload` event is implemented differently by\n        // the different browser vendors. Consequently, the `event.returnValue`\n        // attribute needs to set in addition to a return value being returned.\n        // For more information, see:\n        // https://developer.mozilla.org/en/docs/Web/Events/beforeunload\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * The default layout restorer provider.\n */\nconst layout = {\n    id: '@jupyterlab/application-extension:layout',\n    requires: [IStateDB, ILabShell],\n    activate: (app, state, labShell, info) => {\n        const first = app.started;\n        const registry = app.commands;\n        const restorer = new LayoutRestorer({ connector: state, first, registry });\n        void restorer.fetch().then(saved => {\n            labShell.restoreLayout(PageConfig.getOption('mode'), saved);\n            labShell.layoutModified.connect(() => {\n                void restorer.save(labShell.saveLayout());\n            });\n        });\n        return restorer;\n    },\n    autoStart: true,\n    provides: ILayoutRestorer\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab/application-extension:router',\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n    autoStart: true,\n    provides: IRouter\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyterlab/application-extension:tree-resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(lab|doc)(/workspaces/[a-zA-Z0-9-_]+)?(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.tree, {\n            execute: async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }\n        }));\n        set.add(router.register({ command: CommandIDs.tree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\n/**\n * The default URL not found extension.\n */\nconst notfound = {\n    id: '@jupyterlab/application-extension:notfound',\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    activate: (_, paths, router, translator) => {\n        const trans = translator.load('jupyterlab');\n        const bad = paths.urls.notFound;\n        if (!bad) {\n            return;\n        }\n        const base = router.base;\n        const message = trans.__('The path: %1 was not found. JupyterLab redirected to: %2', bad, base);\n        // Change the URL back to the base application URL.\n        router.navigate('');\n        void showErrorMessage(trans.__('Path Not Found'), { message });\n    },\n    autoStart: true\n};\n/**\n * Change the favicon changing based on the busy status;\n */\nconst busy = {\n    id: '@jupyterlab/application-extension:faviconbusy',\n    requires: [ILabStatus],\n    activate: async (_, status) => {\n        status.busySignal.connect((_, isBusy) => {\n            const favicon = document.querySelector(`link[rel=\"icon\"]${isBusy ? '.idle.favicon' : '.busy.favicon'}`);\n            if (!favicon) {\n                return;\n            }\n            const newFavicon = document.querySelector(`link${isBusy ? '.busy.favicon' : '.idle.favicon'}`);\n            if (!newFavicon) {\n                return;\n            }\n            // If we have the two icons with the special classes, then toggle them.\n            if (favicon !== newFavicon) {\n                favicon.rel = '';\n                newFavicon.rel = 'icon';\n                // Firefox doesn't seem to recognize just changing rel, so we also\n                // reinsert the link into the DOM.\n                newFavicon.parentNode.replaceChild(newFavicon, newFavicon);\n            }\n        });\n    },\n    autoStart: true\n};\nconst SIDEBAR_ID = '@jupyterlab/application-extension:sidebar';\n/**\n * Keep user settings for where to show the side panels.\n */\nconst sidebar = {\n    id: SIDEBAR_ID,\n    autoStart: true,\n    requires: [ISettingRegistry, ILabShell, ITranslator],\n    activate: (app, settingRegistry, labShell, translator, info) => {\n        const trans = translator.load('jupyterlab');\n        let overrides = {};\n        // const trans = translator.load(\"jupyterlab\");\n        const handleLayoutOverrides = () => {\n            each(labShell.widgets('left'), widget => {\n                if (overrides[widget.id] && overrides[widget.id] === 'right') {\n                    labShell.add(widget, 'right');\n                }\n            });\n            each(labShell.widgets('right'), widget => {\n                if (overrides[widget.id] && overrides[widget.id] === 'left') {\n                    labShell.add(widget, 'left');\n                }\n            });\n        };\n        labShell.layoutModified.connect(handleLayoutOverrides);\n        // Fetch overrides from the settings system.\n        void Promise.all([settingRegistry.load(SIDEBAR_ID), app.restored]).then(([settings]) => {\n            overrides = settings.get('overrides').composite || {};\n            settings.changed.connect(settings => {\n                overrides =\n                    settings.get('overrides').composite || {};\n                handleLayoutOverrides();\n            });\n        });\n        // Add a command to switch a side panels's side\n        app.commands.addCommand(CommandIDs.switchSidebar, {\n            label: trans.__('Switch Sidebar Side'),\n            execute: () => {\n                // First, try to find the correct panel based on the\n                // application context menu click.\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                let id;\n                let side;\n                if (contextNode) {\n                    id = contextNode.dataset['id'];\n                    const leftPanel = document.getElementById('jp-left-stack');\n                    const node = document.getElementById(id);\n                    if (leftPanel && node && leftPanel.contains(node)) {\n                        side = 'right';\n                    }\n                    else {\n                        side = 'left';\n                    }\n                }\n                else {\n                    // Bail if we don't find a sidebar for the widget.\n                    return;\n                }\n                // Move the panel to the other side.\n                const newOverrides = Object.assign({}, overrides);\n                newOverrides[id] = side;\n                return settingRegistry.set(SIDEBAR_ID, 'overrides', newOverrides);\n            }\n        });\n        // Add a context menu item to sidebar tabs.\n        app.contextMenu.addItem({\n            command: CommandIDs.switchSidebar,\n            selector: '.jp-SideBar .lm-TabBar-tab',\n            rank: 500\n        });\n    }\n};\n/**\n * The default JupyterLab application shell.\n */\nconst shell = {\n    id: '@jupyterlab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof LabShell)) {\n            throw new Error(`${shell.id} did not find a LabShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: ILabShell\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlab/application-extension:status',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${status.id} must be activated in JupyterLab.`);\n        }\n        return app.status;\n    },\n    autoStart: true,\n    provides: ILabStatus\n};\n/**\n * The default JupyterLab application-specific information provider.\n *\n * #### Notes\n * This plugin should only be used by plugins that specifically need to access\n * JupyterLab application information, e.g., listing extensions that have been\n * loaded or deferred within JupyterLab.\n */\nconst info = {\n    id: '@jupyterlab/application-extension:info',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${info.id} must be activated in JupyterLab.`);\n        }\n        return app.info;\n    },\n    autoStart: true,\n    provides: JupyterLab.IInfo\n};\n/**\n * The default JupyterLab paths dictionary provider.\n */\nconst paths = {\n    id: '@jupyterlab/apputils-extension:paths',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default property inspector provider.\n */\nconst propertyInspector = {\n    id: '@jupyterlab/application-extension:property-inspector',\n    autoStart: true,\n    requires: [ILabShell, ITranslator],\n    optional: [ILayoutRestorer],\n    provides: IPropertyInspectorProvider,\n    activate: (app, labshell, translator, restorer) => {\n        const trans = translator.load('jupyterlab');\n        const widget = new SideBarPropertyInspectorProvider(labshell, undefined, translator);\n        widget.title.icon = buildIcon;\n        widget.title.caption = trans.__('Property Inspector');\n        widget.id = 'jp-property-inspector';\n        labshell.add(widget, 'right', { rank: 100 });\n        if (restorer) {\n            restorer.add(widget, 'jp-property-inspector');\n        }\n        return widget;\n    }\n};\nconst JupyterLogo = {\n    id: '@jupyterlab/application-extension:logo',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, shell) => {\n        const logo = new Widget();\n        jupyterIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    main,\n    mainCommands,\n    layout,\n    router,\n    tree,\n    notfound,\n    busy,\n    sidebar,\n    shell,\n    status,\n    info,\n    paths,\n    propertyInspector,\n    JupyterLogo\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/statusbar-extension/lib/index.js"],"names":["STATUSBAR_PLUGIN_ID","statusBar","id","requires","ITranslator","provides","IStatusBar","autoStart","activate","app","translator","labShell","settingRegistry","mainMenu","palette","trans","load","StatusBar","shell","add","layoutModified","connect","update","category","__","command","commands","addCommand","label","execute","args","setHidden","isVisible","set","isToggled","addItem","viewMenu","addGroup","loadSettings","updateSettings","settings","visible","get","composite","Promise","all","restored","then","changed","catch","reason","console","error","message","optional","ILabShell","ISettingRegistry","IMainMenu","ICommandPalette","kernelStatus","INotebookTracker","IConsoleTracker","ISessionContextDialogs","notebookTracker","consoleTracker","sessionDialogs","currentSession","item","KernelStatus","onClick","async","sessionContextDialogs","selectKernel","onTitleChanged","title","model","activityName","currentChanged","_","change","oldValue","newValue","disconnect","has","sessionContext","registerStatusItem","align","rank","isActive","current","currentWidget","lineColItem","IEditorTracker","editorTracker","LineCol","onActiveCellChanged","notebook","cell","editor","onPromptCreated","prompt","promptCellCreated","content","activeCellChanged","promptCell","activeCell","runningSessionsItem","RunningSessions","activateById","serviceManager","modeSwitch","Switch","valueChanged","mode","modeChanged","value","updateModeSwitchTitle","binding","keyBindings","find","b","ks","CommandRegistry","keys","join","caption","keyBindingChanged"],"mappings":"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","file":"3242.52ffe5d33754a753478b.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module statusbar-extension\n */\nimport { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, ISessionContextDialogs, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IStatusBar, KernelStatus, LineCol, RunningSessions, StatusBar } from '@jupyterlab/statusbar';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Switch } from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nexport const STATUSBAR_PLUGIN_ID = '@jupyterlab/statusbar-extension:plugin';\n/**\n * Initialization data for the statusbar extension.\n */\nconst statusBar = {\n    id: STATUSBAR_PLUGIN_ID,\n    requires: [ITranslator],\n    provides: IStatusBar,\n    autoStart: true,\n    activate: (app, translator, labShell, settingRegistry, mainMenu, palette) => {\n        const trans = translator.load('jupyterlab');\n        const statusBar = new StatusBar();\n        statusBar.id = 'jp-main-statusbar';\n        app.shell.add(statusBar, 'bottom');\n        // If available, connect to the shell's layout modified signal.\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                statusBar.update();\n            });\n        }\n        const category = trans.__('Main Area');\n        const command = 'statusbar:toggle';\n        app.commands.addCommand(command, {\n            label: trans.__('Show Status Bar'),\n            execute: (args) => {\n                statusBar.setHidden(statusBar.isVisible);\n                if (settingRegistry) {\n                    void settingRegistry.set(STATUSBAR_PLUGIN_ID, 'visible', statusBar.isVisible);\n                }\n            },\n            isToggled: () => statusBar.isVisible\n        });\n        if (palette) {\n            palette.addItem({ command, category });\n        }\n        if (mainMenu) {\n            mainMenu.viewMenu.addGroup([{ command }], 1);\n        }\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(STATUSBAR_PLUGIN_ID);\n            const updateSettings = (settings) => {\n                const visible = settings.get('visible').composite;\n                statusBar.setHidden(!visible);\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(settings => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        return statusBar;\n    },\n    optional: [ILabShell, ISettingRegistry, IMainMenu, ICommandPalette]\n};\n/**\n * A plugin that provides a kernel status item to the status bar.\n */\nexport const kernelStatus = {\n    id: '@jupyterlab/statusbar-extension:kernel-status',\n    autoStart: true,\n    requires: [\n        IStatusBar,\n        INotebookTracker,\n        IConsoleTracker,\n        ILabShell,\n        ITranslator\n    ],\n    optional: [ISessionContextDialogs],\n    activate: (app, statusBar, notebookTracker, consoleTracker, labShell, translator, sessionDialogs) => {\n        // When the status item is clicked, launch the kernel\n        // selection dialog for the current session.\n        let currentSession = null;\n        const changeKernel = async () => {\n            if (!currentSession) {\n                return;\n            }\n            await (sessionDialogs || sessionContextDialogs).selectKernel(currentSession, translator);\n        };\n        // Create the status item.\n        const item = new KernelStatus({ onClick: changeKernel }, translator);\n        // When the title of the active widget changes, update the label\n        // of the hover text.\n        const onTitleChanged = (title) => {\n            item.model.activityName = title.label;\n        };\n        // Keep the session object on the status item up-to-date.\n        labShell.currentChanged.connect((_, change) => {\n            const { oldValue, newValue } = change;\n            // Clean up after the old value if it exists,\n            // listen for changes to the title of the activity\n            if (oldValue) {\n                oldValue.title.changed.disconnect(onTitleChanged);\n            }\n            if (newValue) {\n                newValue.title.changed.connect(onTitleChanged);\n            }\n            // Grab the session off of the current widget, if it exists.\n            if (newValue && consoleTracker.has(newValue)) {\n                currentSession = newValue.sessionContext;\n            }\n            else if (newValue && notebookTracker.has(newValue)) {\n                currentSession = newValue.sessionContext;\n            }\n            else {\n                currentSession = null;\n            }\n            item.model.sessionContext = currentSession;\n        });\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:kernel-status', {\n            item,\n            align: 'left',\n            rank: 1,\n            isActive: () => {\n                const current = labShell.currentWidget;\n                return (!!current &&\n                    (notebookTracker.has(current) || consoleTracker.has(current)));\n            }\n        });\n    }\n};\n/**\n * A plugin providing a line/column status item to the application.\n */\nexport const lineColItem = {\n    id: '@jupyterlab/statusbar-extension:line-col-status',\n    autoStart: true,\n    requires: [\n        IStatusBar,\n        INotebookTracker,\n        IEditorTracker,\n        IConsoleTracker,\n        ILabShell,\n        ITranslator\n    ],\n    activate: (_, statusBar, notebookTracker, editorTracker, consoleTracker, labShell, translator) => {\n        const item = new LineCol(translator);\n        const onActiveCellChanged = (notebook, cell) => {\n            item.model.editor = cell && cell.editor;\n        };\n        const onPromptCreated = (console, prompt) => {\n            item.model.editor = prompt && prompt.editor;\n        };\n        labShell.currentChanged.connect((_, change) => {\n            const { oldValue, newValue } = change;\n            // Check if we need to disconnect the console listener\n            // or the notebook active cell listener\n            if (oldValue && consoleTracker.has(oldValue)) {\n                oldValue.console.promptCellCreated.disconnect(onPromptCreated);\n            }\n            else if (oldValue && notebookTracker.has(oldValue)) {\n                oldValue.content.activeCellChanged.disconnect(onActiveCellChanged);\n            }\n            // Wire up the new editor to the model if it exists\n            if (newValue && consoleTracker.has(newValue)) {\n                newValue.console.promptCellCreated.connect(onPromptCreated);\n                const prompt = newValue.console.promptCell;\n                item.model.editor = prompt && prompt.editor;\n            }\n            else if (newValue && notebookTracker.has(newValue)) {\n                newValue.content.activeCellChanged.connect(onActiveCellChanged);\n                const cell = newValue.content.activeCell;\n                item.model.editor = cell && cell.editor;\n            }\n            else if (newValue && editorTracker.has(newValue)) {\n                item.model.editor = newValue.content.editor;\n            }\n            else {\n                item.model.editor = null;\n            }\n        });\n        // Add the status item to the status bar.\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:line-col-status', {\n            item,\n            align: 'right',\n            rank: 2,\n            isActive: () => {\n                const current = labShell.currentWidget;\n                return (!!current &&\n                    (notebookTracker.has(current) ||\n                        editorTracker.has(current) ||\n                        consoleTracker.has(current)));\n            }\n        });\n    }\n};\n/*\n * A plugin providing running terminals and sessions information\n * to the status bar.\n */\nexport const runningSessionsItem = {\n    id: '@jupyterlab/statusbar-extension:running-sessions-status',\n    autoStart: true,\n    requires: [IStatusBar, ITranslator],\n    activate: (app, statusBar, translator) => {\n        const item = new RunningSessions({\n            onClick: () => app.shell.activateById('jp-running-sessions'),\n            serviceManager: app.serviceManager,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:running-sessions-status', {\n            item,\n            align: 'left',\n            rank: 0\n        });\n    }\n};\n/**\n * The simple interface mode switch in the status bar.\n */\nconst modeSwitch = {\n    id: '@jupyterlab/statusbar-extension:mode-switch',\n    requires: [ILabShell, ITranslator, IStatusBar],\n    activate: (app, shell, translator, statusBar) => {\n        const trans = translator.load('jupyterlab');\n        const modeSwitch = new Switch();\n        modeSwitch.id = 'jp-single-document-mode';\n        modeSwitch.valueChanged.connect((_, args) => {\n            shell.mode = args.newValue ? 'single-document' : 'multiple-document';\n        });\n        shell.modeChanged.connect((_, mode) => {\n            modeSwitch.value = mode === 'single-document';\n        });\n        modeSwitch.value = shell.mode === 'single-document';\n        // Show the current file browser shortcut in its title.\n        const updateModeSwitchTitle = () => {\n            const binding = app.commands.keyBindings.find(b => b.command === 'application:toggle-mode');\n            if (binding) {\n                const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n                modeSwitch.caption = trans.__('Simple Interface (%1)', ks);\n            }\n            else {\n                modeSwitch.caption = trans.__('Simple Interface');\n            }\n        };\n        updateModeSwitchTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateModeSwitchTitle();\n        });\n        modeSwitch.label = trans.__('Simple');\n        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:mode-switch', {\n            item: modeSwitch,\n            align: 'left',\n            isActive: () => true,\n            rank: -1\n        });\n    },\n    autoStart: true\n};\nconst plugins = [\n    statusBar,\n    lineColItem,\n    kernelStatus,\n    runningSessionsItem,\n    modeSwitch\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
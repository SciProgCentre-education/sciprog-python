{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/addwidget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/celltags/lib/tool.js"],"names":["AddWidget","Widget","translator","super","this","parent","input","document","createElement","nullTranslator","_trans","load","addClass","editing","buildTag","text","value","__","contentEditable","className","style","width","tag","appendChild","iconContainer","addIcon","elementPosition","height","marginLeft","marginRight","node","addEventListener","removeEventListener","event","type","_evtMouseDown","_evtKeyDown","_evtBlur","_evtFocus","target","addTag","blur","focus","preventDefault","tmp","innerHTML","body","getBoundingClientRect","removeChild","keyCode","TagWidget","name","applied","textContent","textOverflow","checkIcon","display","_evtClick","_evtMouseOver","_evtMouseOut","_a","checkApplied","toggleApplied","_b","removeClass","firstChild","lastChild","removeTag","classList","add","remove","TagTool","NotebookTools","tracker","app","tagList","label","layout","PanelLayout","createTagInput","id","insertWidget","activeCell","tags","model","metadata","get","includes","cell","oldTags","tagsToAdd","split","filter","set","concat","refreshTags","loadActiveTags","length","delete","widget","widgets","update","_c","notebook","currentWidget","cells","allTags","reduce","Set","pullTags","tagWidgets","w","forEach","dispose","tagWidgetNames","map","idx","validTags","insertBefore","context","ready","then","changed","connect","currentChanged","taglist","push","validateTags"],"mappings":"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","file":"7474.078d801f3650ba1ba0c2.js","sourcesContent":["import { Widget } from '@lumino/widgets';\nimport { addIcon } from '@jupyterlab/ui-components';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class AddWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(translator) {\n        super();\n        this.parent = null;\n        this.input = document.createElement('input');\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass('tag');\n        this.editing = false;\n        this.buildTag();\n    }\n    /**\n     * Create input box with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = this.input || document.createElement('input');\n        text.value = this._trans.__('Add Tag');\n        text.contentEditable = 'true';\n        text.className = 'add-tag';\n        text.style.width = '49px';\n        this.input = text;\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = addIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '3px',\n            marginRight: '-5px'\n        });\n        this.addClass('unapplied-tag');\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('focus', this);\n        this.input.addEventListener('blur', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('focus', this);\n        this.input.removeEventListener('blur', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'blur':\n                this._evtBlur();\n                break;\n            case 'focus':\n                this._evtFocus();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMouseDown(event) {\n        if (!this.editing) {\n            this.editing = true;\n            this.input.value = '';\n            this.input.focus();\n        }\n        else if (event.target !== this.input) {\n            if (this.input.value !== '') {\n                const value = this.input.value;\n                this.parent.addTag(value);\n                this.input.blur();\n                this._evtBlur();\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'focus'` event for the input box.\n     */\n    _evtFocus() {\n        if (!this.editing) {\n            this.input.blur();\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the input box.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtKeyDown(event) {\n        const tmp = document.createElement('span');\n        tmp.className = 'add-tag';\n        tmp.innerHTML = this.input.value;\n        // set width to the pixel length of the text\n        document.body.appendChild(tmp);\n        this.input.style.width = tmp.getBoundingClientRect().width + 8 + 'px';\n        document.body.removeChild(tmp);\n        // if they hit Enter, add the tag and reset state\n        if (event.keyCode === 13) {\n            const value = this.input.value;\n            this.parent.addTag(value);\n            this.input.blur();\n            this._evtBlur();\n        }\n    }\n    /**\n     * Handle the `'focusout'` event for the input box.\n     */\n    _evtBlur() {\n        if (this.editing) {\n            this.editing = false;\n            this.input.value = this._trans.__('Add Tag');\n            this.input.style.width = '49px';\n        }\n    }\n}\n//# sourceMappingURL=addwidget.js.map","import { Widget } from '@lumino/widgets';\nimport { checkIcon } from '@jupyterlab/ui-components';\n/**\n * A widget which hosts a cell tags area.\n */\nexport class TagWidget extends Widget {\n    /**\n     * Construct a new tag widget.\n     */\n    constructor(name) {\n        super();\n        this.parent = null;\n        this.applied = true;\n        this.name = name;\n        this.addClass('tag');\n        this.buildTag();\n    }\n    /**\n     * Create tag div with icon and attach to this.node.\n     */\n    buildTag() {\n        const text = document.createElement('span');\n        text.textContent = this.name;\n        text.style.textOverflow = 'ellipsis';\n        const tag = document.createElement('div');\n        tag.className = 'tag-holder';\n        tag.appendChild(text);\n        const iconContainer = checkIcon.element({\n            tag: 'span',\n            elementPosition: 'center',\n            height: '18px',\n            width: '18px',\n            marginLeft: '5px',\n            marginRight: '-3px'\n        });\n        if (this.applied) {\n            this.addClass('applied-tag');\n        }\n        else {\n            this.addClass('unapplied-tag');\n            iconContainer.style.display = 'none';\n        }\n        tag.appendChild(iconContainer);\n        this.node.appendChild(tag);\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach() {\n        this.node.addEventListener('mousedown', this);\n        this.node.addEventListener('mouseover', this);\n        this.node.addEventListener('mouseout', this);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach() {\n        this.node.removeEventListener('mousedown', this);\n        this.node.removeEventListener('mouseover', this);\n        this.node.removeEventListener('mouseout', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtClick();\n                break;\n            case 'mouseover':\n                this._evtMouseOver();\n                break;\n            case 'mouseout':\n                this._evtMouseOut();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `update-request` messages. Check if applied to current active cell.\n     */\n    onUpdateRequest() {\n        var _a;\n        const applied = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.checkApplied(this.name);\n        if (applied !== this.applied) {\n            this.toggleApplied();\n        }\n    }\n    /**\n     * Update styling to reflect whether tag is applied to current active cell.\n     */\n    toggleApplied() {\n        var _a, _b;\n        if (this.applied) {\n            this.removeClass('applied-tag');\n            ((_a = this.node.firstChild) === null || _a === void 0 ? void 0 : _a.lastChild).style.display =\n                'none';\n            this.addClass('unapplied-tag');\n        }\n        else {\n            this.removeClass('unapplied-tag');\n            ((_b = this.node.firstChild) === null || _b === void 0 ? void 0 : _b.lastChild).style.display =\n                'inline-block';\n            this.addClass('applied-tag');\n        }\n        this.applied = !this.applied;\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick() {\n        var _a, _b;\n        if (this.applied) {\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.removeTag(this.name);\n        }\n        else {\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.addTag(this.name);\n        }\n        this.toggleApplied();\n    }\n    /**\n     * Handle the `'mouseover'` event for the widget.\n     */\n    _evtMouseOver() {\n        this.node.classList.add('tag-hover');\n    }\n    /**\n     * Handle the `'mouseout'` event for the widget.\n     */\n    _evtMouseOut() {\n        this.node.classList.remove('tag-hover');\n    }\n}\n//# sourceMappingURL=widget.js.map","import { reduce } from '@lumino/algorithm';\nimport { PanelLayout } from '@lumino/widgets';\nimport { NotebookTools } from '@jupyterlab/notebook';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TagWidget } from './widget';\nimport { AddWidget } from './addwidget';\n/**\n * A Tool for tag operations.\n */\nexport class TagTool extends NotebookTools.Tool {\n    /**\n     * Construct a new tag Tool.\n     *\n     * @param tracker - The notebook tracker.\n     */\n    constructor(tracker, app, translator) {\n        super();\n        this.tagList = [];\n        this.label = false;\n        app;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.tracker = tracker;\n        this.layout = new PanelLayout();\n        this.createTagInput();\n        this.addClass('jp-TagTool');\n    }\n    /**\n     * Add an AddWidget input box to the layout.\n     */\n    createTagInput() {\n        const layout = this.layout;\n        const input = new AddWidget(this.translator);\n        input.id = 'add-tag';\n        layout.insertWidget(0, input);\n    }\n    /**\n     * Check whether a tag is applied to the current active cell\n     *\n     * @param name - The name of the tag.\n     *\n     * @returns A boolean representing whether it is applied.\n     */\n    checkApplied(name) {\n        var _a;\n        const activeCell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (activeCell) {\n            const tags = activeCell.model.metadata.get('tags');\n            if (tags) {\n                return tags.includes(name);\n            }\n        }\n        return false;\n    }\n    /**\n     * Add a tag to the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    addTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tagsToAdd = name.split(/[,\\s]+/);\n            tagsToAdd = tagsToAdd.filter(tag => tag !== '' && !oldTags.includes(tag));\n            cell.model.metadata.set('tags', oldTags.concat(tagsToAdd));\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Remove a tag from the current active cell.\n     *\n     * @param name - The name of the tag.\n     */\n    removeTag(name) {\n        var _a, _b;\n        const cell = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell) {\n            const oldTags = [\n                ...((_b = cell.model.metadata.get('tags')) !== null && _b !== void 0 ? _b : [])\n            ];\n            let tags = oldTags.filter(tag => tag !== name);\n            cell.model.metadata.set('tags', tags);\n            if (tags.length === 0) {\n                cell.model.metadata.delete('tags');\n            }\n            this.refreshTags();\n            this.loadActiveTags();\n        }\n    }\n    /**\n     * Update each tag widget to represent whether it is applied to the current\n     * active cell.\n     */\n    loadActiveTags() {\n        const layout = this.layout;\n        for (const widget of layout.widgets) {\n            widget.update();\n        }\n    }\n    /**\n     * Pull from cell metadata all the tags used in the notebook and update the\n     * stored tag list.\n     */\n    pullTags() {\n        var _a, _b, _c;\n        const notebook = (_a = this.tracker) === null || _a === void 0 ? void 0 : _a.currentWidget;\n        const cells = (_c = (_b = notebook === null || notebook === void 0 ? void 0 : notebook.model) === null || _b === void 0 ? void 0 : _b.cells) !== null && _c !== void 0 ? _c : [];\n        const allTags = reduce(cells, (allTags, cell) => {\n            var _a;\n            const tags = (_a = cell.metadata.get('tags')) !== null && _a !== void 0 ? _a : [];\n            return [...allTags, ...tags];\n        }, []);\n        this.tagList = [...new Set(allTags)].filter(tag => tag !== '');\n    }\n    /**\n     * Pull the most recent list of tags and update the tag widgets - dispose if\n     * the tag no longer exists, and create new widgets for new tags.\n     */\n    refreshTags() {\n        this.pullTags();\n        const layout = this.layout;\n        const tagWidgets = layout.widgets.filter(w => w.id !== 'add-tag');\n        tagWidgets.forEach(widget => {\n            if (!this.tagList.includes(widget.name)) {\n                widget.dispose();\n            }\n        });\n        const tagWidgetNames = tagWidgets.map(w => w.name);\n        this.tagList.forEach(tag => {\n            if (!tagWidgetNames.includes(tag)) {\n                const idx = layout.widgets.length - 1;\n                layout.insertWidget(idx, new TagWidget(tag));\n            }\n        });\n    }\n    /**\n     * Validate the 'tags' of cell metadata, ensuring it is a list of strings and\n     * that each string doesn't include spaces.\n     */\n    validateTags(cell, tags) {\n        tags = tags.filter(tag => typeof tag === 'string');\n        tags = reduce(tags, (allTags, tag) => {\n            return [...allTags, ...tag.split(/[,\\s]+/)];\n        }, []);\n        const validTags = [...new Set(tags)].filter(tag => tag !== '');\n        cell.model.metadata.set('tags', validTags);\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    onActiveCellChanged() {\n        this.loadActiveTags();\n    }\n    /**\n     * Get all tags once available.\n     */\n    onAfterShow() {\n        this.refreshTags();\n        this.loadActiveTags();\n    }\n    /**\n     * Upon attach, add label if it doesn't already exist and listen for changes\n     * from the notebook tracker.\n     */\n    onAfterAttach() {\n        if (!this.label) {\n            const label = document.createElement('label');\n            label.textContent = this._trans.__('Cell Tags');\n            label.className = 'tag-label';\n            this.parent.node.insertBefore(label, this.node);\n            this.label = true;\n        }\n        if (this.tracker.currentWidget) {\n            void this.tracker.currentWidget.context.ready.then(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n            this.tracker.currentWidget.model.cells.changed.connect(() => {\n                this.refreshTags();\n                this.loadActiveTags();\n            });\n        }\n        this.tracker.currentChanged.connect(() => {\n            this.refreshTags();\n            this.loadActiveTags();\n        });\n    }\n    /**\n     * Handle a change to active cell metadata.\n     */\n    onActiveCellMetadataChanged() {\n        const tags = this.tracker.activeCell.model.metadata.get('tags');\n        let taglist = [];\n        if (tags) {\n            if (typeof tags === 'string') {\n                taglist.push(tags);\n            }\n            else {\n                taglist = tags;\n            }\n        }\n        this.validateTags(this.tracker.activeCell, taglist);\n    }\n}\n//# sourceMappingURL=tool.js.map"],"sourceRoot":""}
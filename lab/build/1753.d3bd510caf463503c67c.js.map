{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel-extension/lib/index.js"],"names":["BaseKernel","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","_parent","id","name","sendMessage","_id","_name","_sendMessage","Promise","resolve","isDisposed","emit","msg","_busy","header","msg_type","_kernelInfo","_execute","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","content","_a","_b","message","KernelMessage","channel","msgType","session","parentHeader","type","metadata","buffers","parent","execution_state","kernelInfoRequest","historyMsg","status","history","code","execution_count","executeMsg","_executeInput","push","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","IKernels","Token","IKernelSpecs","PyoliteKernel","super","_executeDelegate","PromiseDelegate","_ready","pyodideUrl","widgetsnbextensionWheel","widgetsnbextensionWheelUrl","URLExt","window","location","origin","nbformatWheel","nbformatWheelUrl","ipykernelWheel","ipykernelWheelUrl","pyoliteWheel","pyoliteWheelUrl","indexUrl","slice","lastIndexOf","blob","Blob","join","_worker","Worker","URL","createObjectURL","onmessage","e","_processWorkerMessage","data","console","log","terminate","dispose","promise","_c","_d","_e","_f","bundle","text","stream","results","transient","displayData","updateDisplayData","wait","clearOutput","publishExecuteResult","ename","evalue","traceback","publishExecuteError","handleComm","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","banner","help_links","url","result","_sendWorkerMessage","executionCount","Error","postMessage","autoStart","requires","activate","app","kernelspecs","PageConfig","register","spec","display_name","language","argv","env","interrupt_mode","resources","create","async"],"mappings":"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","file":"1753.d3bd510caf463503c67c.js","sourcesContent":["import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimick ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param content The execut result content.\n     */\n    publishExecuteResult(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param content The error content.\n     */\n    publishExecuteError(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param content The clear_output content.\n     */\n    clearOutput(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        this._history.push([0, 0, content.code]);\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport worker from './worker?raw';\n// TODO: see https://github.com/jupyterlite/jupyterlite/issues/151\n// TODO: sync this version with the npm version (despite version mangling)\nimport pyolite from '../py/pyolite/dist/pyolite-0.1.0a5-py3-none-any.whl';\n// TODO: sync this version with the pypi version\nimport widgetsnbextension from '../py/widgetsnbextension/dist/widgetsnbextension-3.5.0-py3-none-any.whl';\nimport nbformat from '../py/nbformat/dist/nbformat-4.2.0-py3-none-any.whl';\nimport ipykernel from '../py/ipykernel/dist/ipykernel-5.5.5-py3-none-any.whl';\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyoliteKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._executeDelegate = new PromiseDelegate();\n        this._ready = new PromiseDelegate();\n        const { pyodideUrl } = options;\n        const widgetsnbextensionWheel = widgetsnbextension;\n        const widgetsnbextensionWheelUrl = URLExt.join(window.location.origin, widgetsnbextensionWheel);\n        const nbformatWheel = nbformat;\n        const nbformatWheelUrl = URLExt.join(window.location.origin, nbformatWheel);\n        const ipykernelWheel = ipykernel;\n        const ipykernelWheelUrl = URLExt.join(window.location.origin, ipykernelWheel);\n        const pyoliteWheel = (_a = options.pyoliteWheel) !== null && _a !== void 0 ? _a : pyolite;\n        const pyoliteWheelUrl = URLExt.join(window.location.origin, pyoliteWheel);\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const blob = new Blob([\n            [\n                `importScripts(\"${pyodideUrl}\");`,\n                `var indexURL = \"${indexUrl}\";`,\n                `var _widgetsnbextensionWheelUrl = '${widgetsnbextensionWheelUrl}';`,\n                `var _nbformatWheelUrl = '${nbformatWheelUrl}';`,\n                `var _ipykernelWheelUrl = '${ipykernelWheelUrl}';`,\n                `var _pyoliteWheelUrl = '${pyoliteWheelUrl}';`,\n                worker\n            ].join('\\n')\n        ]);\n        this._worker = new Worker(window.URL.createObjectURL(blob));\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n        this._ready.resolve();\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        console.log(`Dispose worker for kernel ${this.id}`);\n        this._worker.terminate();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f;\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle);\n                break;\n            }\n            case 'reply': {\n                const bundle = msg.results;\n                this._executeDelegate.resolve(bundle);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_b = msg.bundle) !== null && _b !== void 0 ? _b : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { wait: false };\n                this.clearOutput(bundle);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { execution_count: 0, data: {}, metadata: {} };\n                this.publishExecuteResult(bundle);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers);\n                break;\n            }\n            default:\n                this._executeDelegate.resolve({\n                    data: {},\n                    metadata: {}\n                });\n                break;\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Pyolite: A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const result = await this._sendWorkerMessage('execute-request', content);\n        return {\n            execution_count: this.executionCount,\n            ...result\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._sendWorkerMessage('complete-request', content);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._sendWorkerMessage('inspect-request', content);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._sendWorkerMessage('is-complete-request', content);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._sendWorkerMessage('comm-info-request', content);\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._sendWorkerMessage('comm-open', msg);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._sendWorkerMessage('comm-msg', msg);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._sendWorkerMessage('comm-close', msg);\n    }\n    /**\n     * Send a message to the web worker\n     *\n     * @param type The message type to send to the worker.\n     * @param data The message to send to the worker.\n     */\n    async _sendWorkerMessage(type, data) {\n        this._executeDelegate = new PromiseDelegate();\n        this._worker.postMessage({ type, data, parent: this.parent });\n        return await this._executeDelegate.promise;\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { PyoliteKernel } from '@jupyterlite/pyolite-kernel';\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.17.0/full/pyodide.js';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/pyolite-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('pyodideUrl') || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.isLocal(url)\n            ? URLExt.join(window.location.origin, url)\n            : url;\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Pyolite',\n                language: 'python',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'Pyolite',\n                    language: 'python',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/python.png'\n                }\n            },\n            create: async (options) => {\n                return new PyoliteKernel({\n                    ...options,\n                    pyodideUrl\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}
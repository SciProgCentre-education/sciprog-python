{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole-extension/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole-extension/lib/index.js"],"names":["LogConsoleStatusComponent","props","trans","translator","nullTranslator","load","title","newMessages","__","logEntries","source","GroupItem","spacing","onClick","handleClick","listIcon","top","stylesheet","TextItem","LogConsoleStatus","VDomRenderer","options","super","Model","loggerRegistry","this","_handleClick","addClass","interactiveItem","model","version","hide","show","flashEnabled","messages","versionDisplayed","versionNotified","_flashHighlight","sourceNotified","_showHighlighted","_clearHighlight","removeClass","requestAnimationFrame","VDomModel","flashEnabledChanged","Signal","_flashEnabled","_source","_sourceVersion","Map","_loggerRegistry","registryChanged","connect","_handleLogRegistryChange","getLogger","length","name","stateChanged","emit","_a","_b","get","lastDisplayed","lastNotified","enabled","versions","change","loggers","getLoggers","logger","has","contentChanged","_handleLogContentChange","set","LOG_CONSOLE_PLUGIN_ID","CommandIDs","addCheckpoint","clear","open","setLevel","logConsolePlugin","activate","app","labShell","rendermime","nbtracker","palette","restorer","mainMenu","settingRegistry","statusBar","logConsoleWidget","logConsolePanel","LoggerRegistry","defaultRendermime","maxLength","tracker","WidgetTracker","namespace","restore","command","status","shell","activateById","id","createLogConsoleWidget","insertMode","ref","currentWidget","LogConsolePanel","undefined","context","path","MainAreaWidget","content","closable","icon","label","addCheckpointButton","CommandToolbarButton","commands","clearButton","toolbar","addItem","LogLevelSwitcher","sourceChanged","notifyCommandChanged","sourceDisplayed","panel","disposed","add","mode","update","setSource","newValue","addCommand","execute","dispose","isToggled","checkpoint","addIcon","isEnabled","clearIcon","args","level","value","toUpperCase","slice","contextMenu","selector","viewMenu","addGroup","category","registerStatusItem","item","align","isActive","activeStateChanged","restored","then","currentChanged","_","updateSettings","settings","composite","Promise","all","changed","catch","reason","console","error","message","provides","ILoggerRegistry","requires","ILabShell","IRenderMimeRegistry","INotebookTracker","ITranslator","optional","ICommandPalette","ILayoutRestorer","IMainMenu","ISettingRegistry","IStatusBar","autoStart","ReactWidget","widget","handleChange","event","_logConsole","target","handleKeyDown","keyCode","_id","UUID","_trans","_updateSource","sender","oldValue","disconnect","htmlFor","className","HTMLSelect","onChange","onKeyDown","disabled","map","data","toLowerCase"],"mappings":"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","file":"3181.b5384e1b4c71ec95285f.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { GroupItem, TextItem, interactiveItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { listIcon } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport React from 'react';\n/**\n * A pure functional component for a Log Console status item.\n *\n * @param props - the props for the component.\n *\n * @returns a tsx component for rendering the Log Console status.\n */\nfunction LogConsoleStatusComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    let title = '';\n    if (props.newMessages > 0) {\n        title = trans.__('%1 new messages, %2 log entries for %3', props.newMessages, props.logEntries, props.source);\n    }\n    else {\n        title += trans.__('%1 log entries for %2', props.logEntries, props.source);\n    }\n    return (React.createElement(GroupItem, { spacing: 0, onClick: props.handleClick, title: title },\n        React.createElement(listIcon.react, { top: '2px', stylesheet: 'statusBar' }),\n        props.newMessages > 0 ? React.createElement(TextItem, { source: props.newMessages }) : React.createElement(React.Fragment, null)));\n}\n/**\n * A VDomRenderer widget for displaying the status of Log Console logs.\n */\nexport class LogConsoleStatus extends VDomRenderer {\n    /**\n     * Construct the log console status widget.\n     *\n     * @param options - The status widget initialization options.\n     */\n    constructor(options) {\n        super(new LogConsoleStatus.Model(options.loggerRegistry));\n        this.translator = options.translator || nullTranslator;\n        this._handleClick = options.handleClick;\n        this.addClass(interactiveItem);\n        this.addClass('jp-LogConsoleStatusItem');\n    }\n    /**\n     * Render the log console status item.\n     */\n    render() {\n        if (this.model === null || this.model.version === 0) {\n            this.hide();\n            return null;\n        }\n        this.show();\n        const { flashEnabled, messages, source, version, versionDisplayed, versionNotified } = this.model;\n        if (source !== null && flashEnabled && version > versionNotified) {\n            this._flashHighlight();\n            this.model.sourceNotified(source, version);\n        }\n        else if (source !== null && flashEnabled && version > versionDisplayed) {\n            this._showHighlighted();\n        }\n        else {\n            this._clearHighlight();\n        }\n        return (React.createElement(LogConsoleStatusComponent, { handleClick: this._handleClick, logEntries: messages, newMessages: version - versionDisplayed, source: this.model.source, translator: this.translator }));\n    }\n    _flashHighlight() {\n        this._showHighlighted();\n        // To make sure the browser triggers the animation, we remove the class,\n        // wait for an animation frame, then add it back\n        this.removeClass('jp-LogConsole-flash');\n        requestAnimationFrame(() => {\n            this.addClass('jp-LogConsole-flash');\n        });\n    }\n    _showHighlighted() {\n        this.addClass('jp-mod-selected');\n    }\n    _clearHighlight() {\n        this.removeClass('jp-LogConsole-flash');\n        this.removeClass('jp-mod-selected');\n    }\n}\n/**\n * A namespace for Log Console log status.\n */\n(function (LogConsoleStatus) {\n    /**\n     * A VDomModel for the LogConsoleStatus item.\n     */\n    class Model extends VDomModel {\n        /**\n         * Create a new LogConsoleStatus model.\n         *\n         * @param loggerRegistry - The logger registry providing the logs.\n         */\n        constructor(loggerRegistry) {\n            super();\n            /**\n             * A signal emitted when the flash enablement changes.\n             */\n            this.flashEnabledChanged = new Signal(this);\n            this._flashEnabled = true;\n            this._source = null;\n            /**\n             * The view status of each source.\n             *\n             * #### Notes\n             * Keys are source names, value is a list of two numbers. The first\n             * represents the version of the messages that was last displayed to the\n             * user, the second represents the version that we last notified the user\n             * about.\n             */\n            this._sourceVersion = new Map();\n            this._loggerRegistry = loggerRegistry;\n            this._loggerRegistry.registryChanged.connect(this._handleLogRegistryChange, this);\n            this._handleLogRegistryChange();\n        }\n        /**\n         * Number of messages currently in the current source.\n         */\n        get messages() {\n            if (this._source === null) {\n                return 0;\n            }\n            const logger = this._loggerRegistry.getLogger(this._source);\n            return logger.length;\n        }\n        /**\n         * The number of messages ever stored by the current source.\n         */\n        get version() {\n            if (this._source === null) {\n                return 0;\n            }\n            const logger = this._loggerRegistry.getLogger(this._source);\n            return logger.version;\n        }\n        /**\n         * The name of the active log source\n         */\n        get source() {\n            return this._source;\n        }\n        set source(name) {\n            if (this._source === name) {\n                return;\n            }\n            this._source = name;\n            // refresh rendering\n            this.stateChanged.emit();\n        }\n        /**\n         * The last source version that was displayed.\n         */\n        get versionDisplayed() {\n            var _a, _b;\n            if (this._source === null) {\n                return 0;\n            }\n            return (_b = (_a = this._sourceVersion.get(this._source)) === null || _a === void 0 ? void 0 : _a.lastDisplayed) !== null && _b !== void 0 ? _b : 0;\n        }\n        /**\n         * The last source version we notified the user about.\n         */\n        get versionNotified() {\n            var _a, _b;\n            if (this._source === null) {\n                return 0;\n            }\n            return (_b = (_a = this._sourceVersion.get(this._source)) === null || _a === void 0 ? void 0 : _a.lastNotified) !== null && _b !== void 0 ? _b : 0;\n        }\n        /**\n         * Flag to toggle flashing when new logs added.\n         */\n        get flashEnabled() {\n            return this._flashEnabled;\n        }\n        set flashEnabled(enabled) {\n            if (this._flashEnabled === enabled) {\n                return;\n            }\n            this._flashEnabled = enabled;\n            this.flashEnabledChanged.emit();\n            // refresh rendering\n            this.stateChanged.emit();\n        }\n        /**\n         * Record the last source version displayed to the user.\n         *\n         * @param source - The name of the log source.\n         * @param version - The version of the log that was displayed.\n         *\n         * #### Notes\n         * This will also update the last notified version so that the last\n         * notified version is always at least the last displayed version.\n         */\n        sourceDisplayed(source, version) {\n            if (source === null || version === null) {\n                return;\n            }\n            const versions = this._sourceVersion.get(source);\n            let change = false;\n            if (versions.lastDisplayed < version) {\n                versions.lastDisplayed = version;\n                change = true;\n            }\n            if (versions.lastNotified < version) {\n                versions.lastNotified = version;\n                change = true;\n            }\n            if (change && source === this._source) {\n                this.stateChanged.emit();\n            }\n        }\n        /**\n         * Record a source version we notified the user about.\n         *\n         * @param source - The name of the log source.\n         * @param version - The version of the log.\n         */\n        sourceNotified(source, version) {\n            if (source === null) {\n                return;\n            }\n            const versions = this._sourceVersion.get(source);\n            if (versions.lastNotified < version) {\n                versions.lastNotified = version;\n                if (source === this._source) {\n                    this.stateChanged.emit();\n                }\n            }\n        }\n        _handleLogRegistryChange() {\n            const loggers = this._loggerRegistry.getLoggers();\n            for (const logger of loggers) {\n                if (!this._sourceVersion.has(logger.source)) {\n                    logger.contentChanged.connect(this._handleLogContentChange, this);\n                    this._sourceVersion.set(logger.source, {\n                        lastDisplayed: 0,\n                        lastNotified: 0\n                    });\n                }\n            }\n        }\n        _handleLogContentChange({ source }, change) {\n            if (source === this._source) {\n                this.stateChanged.emit();\n            }\n        }\n    }\n    LogConsoleStatus.Model = Model;\n})(LogConsoleStatus || (LogConsoleStatus = {}));\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module logconsole-extension\n */\nimport { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette, MainAreaWidget, WidgetTracker, ReactWidget } from '@jupyterlab/apputils';\nimport { ILoggerRegistry, LogConsolePanel, LoggerRegistry } from '@jupyterlab/logconsole';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { nullTranslator, ITranslator } from '@jupyterlab/translation';\nimport { addIcon, clearIcon, HTMLSelect, listIcon } from '@jupyterlab/ui-components';\nimport { UUID } from '@lumino/coreutils';\nimport * as React from 'react';\nimport { LogConsoleStatus } from './status';\nconst LOG_CONSOLE_PLUGIN_ID = '@jupyterlab/logconsole-extension:plugin';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.addCheckpoint = 'logconsole:add-checkpoint';\n    CommandIDs.clear = 'logconsole:clear';\n    CommandIDs.open = 'logconsole:open';\n    CommandIDs.setLevel = 'logconsole:set-level';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The Log Console extension.\n */\nconst logConsolePlugin = {\n    activate: activateLogConsole,\n    id: LOG_CONSOLE_PLUGIN_ID,\n    provides: ILoggerRegistry,\n    requires: [ILabShell, IRenderMimeRegistry, INotebookTracker, ITranslator],\n    optional: [\n        ICommandPalette,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        IStatusBar\n    ],\n    autoStart: true\n};\n/**\n * Activate the Log Console extension.\n */\nfunction activateLogConsole(app, labShell, rendermime, nbtracker, translator, palette, restorer, mainMenu, settingRegistry, statusBar) {\n    const trans = translator.load('jupyterlab');\n    let logConsoleWidget = null;\n    let logConsolePanel = null;\n    const loggerRegistry = new LoggerRegistry({\n        defaultRendermime: rendermime,\n        // The maxLength is reset below from settings\n        maxLength: 1000\n    });\n    const tracker = new WidgetTracker({\n        namespace: 'logconsole'\n    });\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.open,\n            name: () => 'logconsole'\n        });\n    }\n    const status = new LogConsoleStatus({\n        loggerRegistry: loggerRegistry,\n        handleClick: () => {\n            var _a;\n            if (!logConsoleWidget) {\n                createLogConsoleWidget({\n                    insertMode: 'split-bottom',\n                    ref: (_a = app.shell.currentWidget) === null || _a === void 0 ? void 0 : _a.id\n                });\n            }\n            else {\n                app.shell.activateById(logConsoleWidget.id);\n            }\n        },\n        translator\n    });\n    const createLogConsoleWidget = (options = {}) => {\n        logConsolePanel = new LogConsolePanel(loggerRegistry, translator);\n        logConsolePanel.source =\n            options.source !== undefined\n                ? options.source\n                : nbtracker.currentWidget\n                    ? nbtracker.currentWidget.context.path\n                    : null;\n        logConsoleWidget = new MainAreaWidget({ content: logConsolePanel });\n        logConsoleWidget.addClass('jp-LogConsole');\n        logConsoleWidget.title.closable = true;\n        logConsoleWidget.title.icon = listIcon;\n        logConsoleWidget.title.label = trans.__('Log Console');\n        const addCheckpointButton = new CommandToolbarButton({\n            commands: app.commands,\n            id: CommandIDs.addCheckpoint\n        });\n        const clearButton = new CommandToolbarButton({\n            commands: app.commands,\n            id: CommandIDs.clear\n        });\n        logConsoleWidget.toolbar.addItem('lab-log-console-add-checkpoint', addCheckpointButton);\n        logConsoleWidget.toolbar.addItem('lab-log-console-clear', clearButton);\n        logConsoleWidget.toolbar.addItem('level', new LogLevelSwitcher(logConsoleWidget.content, translator));\n        logConsolePanel.sourceChanged.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        logConsolePanel.sourceDisplayed.connect((panel, { source, version }) => {\n            status.model.sourceDisplayed(source, version);\n        });\n        logConsoleWidget.disposed.connect(() => {\n            logConsoleWidget = null;\n            logConsolePanel = null;\n            app.commands.notifyCommandChanged();\n        });\n        app.shell.add(logConsoleWidget, 'main', {\n            ref: options.ref,\n            mode: options.insertMode\n        });\n        void tracker.add(logConsoleWidget);\n        logConsoleWidget.update();\n        app.commands.notifyCommandChanged();\n    };\n    app.commands.addCommand(CommandIDs.open, {\n        label: trans.__('Show Log Console'),\n        execute: (options = {}) => {\n            // Toggle the display\n            if (logConsoleWidget) {\n                logConsoleWidget.dispose();\n            }\n            else {\n                createLogConsoleWidget(options);\n            }\n        },\n        isToggled: () => {\n            return logConsoleWidget !== null;\n        }\n    });\n    app.commands.addCommand(CommandIDs.addCheckpoint, {\n        execute: () => {\n            var _a;\n            (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.checkpoint();\n        },\n        icon: addIcon,\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: trans.__('Add Checkpoint')\n    });\n    app.commands.addCommand(CommandIDs.clear, {\n        execute: () => {\n            var _a;\n            (_a = logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) === null || _a === void 0 ? void 0 : _a.clear();\n        },\n        icon: clearIcon,\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: trans.__('Clear Log')\n    });\n    function toTitleCase(value) {\n        return value.length === 0 ? value : value[0].toUpperCase() + value.slice(1);\n    }\n    app.commands.addCommand(CommandIDs.setLevel, {\n        // TODO: find good icon class\n        execute: (args) => {\n            if (logConsolePanel === null || logConsolePanel === void 0 ? void 0 : logConsolePanel.logger) {\n                logConsolePanel.logger.level = args.level;\n            }\n        },\n        isEnabled: () => !!logConsolePanel && logConsolePanel.source !== null,\n        label: args => trans.__('Set Log Level to %1', toTitleCase(args.level))\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.open,\n        selector: '.jp-Notebook'\n    });\n    if (mainMenu) {\n        mainMenu.viewMenu.addGroup([{ command: CommandIDs.open }]);\n    }\n    if (palette) {\n        palette.addItem({\n            command: CommandIDs.open,\n            category: trans.__('Main Area')\n        });\n    }\n    if (statusBar) {\n        statusBar.registerStatusItem('@jupyterlab/logconsole-extension:status', {\n            item: status,\n            align: 'left',\n            isActive: () => true,\n            activeStateChanged: status.model.stateChanged\n        });\n    }\n    function setSource(newValue) {\n        if (logConsoleWidget && newValue === logConsoleWidget) {\n            // Do not change anything if we are just focusing on ourselves\n            return;\n        }\n        let source;\n        if (newValue && nbtracker.has(newValue)) {\n            source = newValue.context.path;\n        }\n        else {\n            source = null;\n        }\n        if (logConsolePanel) {\n            logConsolePanel.source = source;\n        }\n        status.model.source = source;\n    }\n    void app.restored.then(() => {\n        // Set source only after app is restored in order to allow restorer to\n        // restore previous source first, which may set the renderer\n        setSource(labShell.currentWidget);\n        labShell.currentChanged.connect((_, { newValue }) => setSource(newValue));\n    });\n    if (settingRegistry) {\n        const updateSettings = (settings) => {\n            loggerRegistry.maxLength = settings.get('maxLogEntries')\n                .composite;\n            status.model.flashEnabled = settings.get('flash').composite;\n        };\n        Promise.all([settingRegistry.load(LOG_CONSOLE_PLUGIN_ID), app.restored])\n            .then(([settings]) => {\n            updateSettings(settings);\n            settings.changed.connect(settings => {\n                updateSettings(settings);\n            });\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n    }\n    return loggerRegistry;\n}\n/**\n * A toolbar widget that switches log levels.\n */\nexport class LogLevelSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     */\n    constructor(widget, translator) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            if (this._logConsole.logger) {\n                this._logConsole.logger.level = event.target.value;\n            }\n            this.update();\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._logConsole.activate();\n            }\n        };\n        this._id = `level-${UUID.uuid4()}`;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass('jp-LogConsole-toolbarLogLevel');\n        this._logConsole = widget;\n        if (widget.source) {\n            this.update();\n        }\n        widget.sourceChanged.connect(this._updateSource, this);\n    }\n    _updateSource(sender, { oldValue, newValue }) {\n        // Transfer stateChanged handler to new source logger\n        if (oldValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(oldValue);\n            logger.stateChanged.disconnect(this.update, this);\n        }\n        if (newValue !== null) {\n            const logger = sender.loggerRegistry.getLogger(newValue);\n            logger.stateChanged.connect(this.update, this);\n        }\n        this.update();\n    }\n    render() {\n        const logger = this._logConsole.logger;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"label\", { htmlFor: this._id, className: logger === null\n                    ? 'jp-LogConsole-toolbarLogLevel-disabled'\n                    : undefined }, this._trans.__('Log Level:')),\n            React.createElement(HTMLSelect, { id: this._id, className: \"jp-LogConsole-toolbarLogLevelDropdown\", onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: logger === null || logger === void 0 ? void 0 : logger.level, \"aria-label\": this._trans.__('Log level'), disabled: logger === null, options: logger === null\n                    ? []\n                    : [\n                        [this._trans.__('Critical'), 'Critical'],\n                        [this._trans.__('Error'), 'Error'],\n                        [this._trans.__('Warning'), 'Warning'],\n                        [this._trans.__('Info'), 'Info'],\n                        [this._trans.__('Debug'), 'Debug']\n                    ].map(data => ({\n                        label: data[0],\n                        value: data[1].toLowerCase()\n                    })) })));\n    }\n}\nexport default logConsolePlugin;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
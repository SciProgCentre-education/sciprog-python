{"version":3,"file":"6493.1e67f303efb884532493.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/lib0/array.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/lib0/function.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/lib0/math.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/lib0/object.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/y-protocols/awareness.js"],"sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n\n/**\n * @template ELEM\n * @param {Array<Array<ELEM>>} arr\n * @return {Array<ELEM>}\n */\nexport const flatten = arr => arr.reduce((acc, val) => acc.concat(val), [])\n","/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\nimport * as array from './array.js'\nimport * as object from './object.js'\n\n/**\n * Calls all functions in `fs` with args. Only throws after all functions were called.\n *\n * @param {Array<function>} fs\n * @param {Array<any>} args\n */\nexport const callAll = (fs, args, i = 0) => {\n  try {\n    for (; i < fs.length; i++) {\n      fs[i](...args)\n    }\n  } finally {\n    if (i < fs.length) {\n      callAll(fs, args, i + 1)\n    }\n  }\n}\n\nexport const nop = () => {}\n\n/**\n * @template T\n * @param {function():T} f\n * @return {T}\n */\nexport const apply = f => f()\n\n/**\n * @template A\n *\n * @param {A} a\n * @return {A}\n */\nexport const id = a => a\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nexport const equalityStrict = (a, b) => a === b\n\n/**\n * @template T\n *\n * @param {Array<T>|object} a\n * @param {Array<T>|object} b\n * @return {boolean}\n */\nexport const equalityFlat = (a, b) => a === b || (a != null && b != null && a.constructor === b.constructor && ((a instanceof Array && array.equalFlat(a, /** @type {Array<T>} */ (b))) || (typeof a === 'object' && object.equalFlat(a, b))))\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nexport const equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a)\n      b = new Uint8Array(b)\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (object.length(a) !== object.length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!object.hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n}\n","/**\n * Common Math expressions.\n *\n * @module math\n */\n\nexport const floor = Math.floor\nexport const ceil = Math.ceil\nexport const abs = Math.abs\nexport const imul = Math.imul\nexport const round = Math.round\nexport const log10 = Math.log10\nexport const log2 = Math.log2\nexport const log = Math.log\nexport const sqrt = Math.sqrt\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The sum of a and b\n */\nexport const add = (a, b) => a + b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nexport const min = (a, b) => a < b ? a : b\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nexport const max = (a, b) => a > b ? a : b\n\nexport const isNaN = Number.isNaN\n\nexport const pow = Math.pow\n/**\n * Base 10 exponential function. Returns the value of 10 raised to the power of pow.\n *\n * @param {number} exp\n * @return {number}\n */\nexport const exp10 = exp => Math.pow(10, exp)\n\nexport const sign = Math.sign\n\n/**\n * @param {number} n\n * @return {boolean} Wether n is negative. This function also differentiates between -0 and +0\n */\nexport const isNegativeZero = n => n !== 0 ? n < 0 : 1 / n < 0\n","/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n/**\n * @return {Object<string,any>} obj\n */\nexport const create = () => Object.create(null)\n\n/**\n * Object.assign\n */\nexport const assign = Object.assign\n\n/**\n * @param {Object<string,any>} obj\n */\nexport const keys = Object.keys\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):any} f\n */\nexport const forEach = (obj, f) => {\n  for (const key in obj) {\n    f(obj[key], key)\n  }\n}\n\n/**\n * @template R\n * @param {Object<string,any>} obj\n * @param {function(any,string):R} f\n * @return {Array<R>}\n */\nexport const map = (obj, f) => {\n  const results = []\n  for (const key in obj) {\n    results.push(f(obj[key], key))\n  }\n  return results\n}\n\n/**\n * @param {Object<string,any>} obj\n * @return {number}\n */\nexport const length = obj => keys(obj).length\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const some = (obj, f) => {\n  for (const key in obj) {\n    if (f(obj[key], key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * @param {Object<string,any>} obj\n * @param {function(any,string):boolean} f\n * @return {boolean}\n */\nexport const every = (obj, f) => {\n  for (const key in obj) {\n    if (!f(obj[key], key)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nexport const hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)\n\n/**\n * @param {Object<string,any>} a\n * @param {Object<string,any>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a === b || (length(a) === length(b) && every(a, (val, key) => (val !== undefined || hasProperty(b, key)) && b[key] === val))\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n"],"names":["last","arr","length","appendTo","dest","src","i","push","from","Array","equalFlat","a","b","f","item","index","every","callAll","fs","args","nop","equalityFlat","constructor","equalityDeep","equalityStrict","ArrayBuffer","Uint8Array","byteLength","Set","size","value","has","Map","key","keys","get","Object","floor","Math","abs","ceil","log10","imul","round","add","log2","log","sqrt","min","max","isNegativeZero","Number","isNaN","pow","sign","n","assign","map","obj","results","hasProperty","prototype","hasOwnProperty","call","val","undefined","Awareness","doc","super","this","clientID","states","meta","_checkInterval","setInterval","now","getLocalState","outdatedTimeout","lastUpdated","setLocalState","remove","forEach","clientid","removeAwarenessStates","on","destroy","emit","clearInterval","state","currLocalMeta","clock","prevState","delete","set","added","updated","filteredUpdated","removed","setLocalStateField","field","getStates","awareness","clients","origin","curMeta","encodeAwarenessUpdate","len","encoder","JSON","stringify","applyAwarenessUpdate","update","decoder","timestamp","parse","clientMeta","currClock"],"sourceRoot":""}
{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/logger.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/logconsole/lib/widget.js"],"names":["Private","LogOutputModel","OutputModel","options","super","this","timestamp","Date","value","level","LogConsoleModelContentFactory","OutputAreaModel","LoggerOutputAreaModel","_a","maxLength","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","output","add","_applyMaxLength","lastModel","Math","trunc","getTime","index","get","_maxLength","list","removeRange","Logger","_isDisposed","_contentChanged","Signal","_stateChanged","_rendermime","_version","_level","source","outputAreaModel","contentFactory","newValue","oldValue","_log","output_type","data","emit","name","log","LogLevel","type","clear","isDisposed","assign","now","LoggerRegistry","_loggers","Map","_registryChanged","_defaultRendermime","defaultRendermime","loggers","logger","rendermime","set","Array","from","values","forEach","x","dispose","ILoggerRegistry","Token","LogConsoleOutputPrompt","Widget","_timestampNode","document","createElement","node","append","_timestamp","innerHTML","toLocaleTimeString","update","dataset","logLevel","undefined","title","toLocaleString","toUpperCase","slice","LogConsoleOutputArea","OutputArea","model","panel","createOutputItem","prompt","widgets","msg","future","LogConsoleContentFactory","ScrollingWidget","content","_observer","addClass","layout","PanelLayout","addWidget","_content","_sentinel","appendChild","onAfterAttach","requestAnimationFrame","scrollIntoView","_scrollHeight","scrollHeight","IntersectionObserver","args","_handleScroll","root","threshold","observe","disconnect","_tracking","entry","isIntersecting","isVisible","currentHeight","LogConsolePanel","StackedPanel","loggerRegistry","translator","_outputAreas","_source","_sourceChanged","_sourceDisplayed","_loggersWatched","Set","nullTranslator","_trans","load","_loggerRegistry","registryChanged","connect","sender","_bindLoggerSignals","_placeholder","getLogger","_showOutputFromSource","_handlePlaceholder","version","_updateOutputAreas","onAfterShow","sourceVersion","getLoggers","has","contentChanged","stateChanged","change","viewId","outputArea","_b","id","parent","show","hide","__","label","caption","textContent","loggerIds","w","outputUpdate","outputLengthChanged","viewIds","keys","delete"],"mappings":"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","file":"7430.682cd42c30d6d5c7e653.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * Log Output Model with timestamp which provides\n * item information for Output Area Model.\n */\nexport class LogOutputModel extends OutputModel {\n    /**\n     * Construct a LogOutputModel.\n     *\n     * @param options - The model initialization options.\n     */\n    constructor(options) {\n        super(options);\n        this.timestamp = new Date(options.value.timestamp);\n        this.level = options.value.level;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area Model\n * which creates LogOutputModel instances.\n */\nclass LogConsoleModelContentFactory extends OutputAreaModel.ContentFactory {\n    /**\n     * Create a rendermime output model from notebook output.\n     */\n    createOutputModel(options) {\n        return new LogOutputModel(options);\n    }\n}\n/**\n * Output Area Model implementation which is able to\n * limit number of outputs stored.\n */\nexport class LoggerOutputAreaModel extends OutputAreaModel {\n    constructor(_a) {\n        var { maxLength } = _a, options = __rest(_a, [\"maxLength\"]);\n        super(options);\n        this.maxLength = maxLength;\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied. Contiguous stream outputs of the same `name`\n     * are combined. The oldest outputs are possibly removed to ensure the total\n     * number of outputs is at most `.maxLength`.\n     */\n    add(output) {\n        super.add(output);\n        this._applyMaxLength();\n        return this.length;\n    }\n    /**\n     * Whether an output should combine with the previous output.\n     *\n     * We combine if the two outputs are in the same second, which is the\n     * resolution for our time display.\n     */\n    shouldCombine(options) {\n        const { value, lastModel } = options;\n        const oldSeconds = Math.trunc(lastModel.timestamp.getTime() / 1000);\n        const newSeconds = Math.trunc(value.timestamp / 1000);\n        return oldSeconds === newSeconds;\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return super.get(index);\n    }\n    /**\n     * Maximum number of outputs to store in the model.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._applyMaxLength();\n    }\n    /**\n     * Manually apply length limit.\n     */\n    _applyMaxLength() {\n        if (this.list.length > this._maxLength) {\n            this.list.removeRange(0, this.list.length - this._maxLength);\n        }\n    }\n}\n/**\n * A concrete implementation of ILogger.\n */\nexport class Logger {\n    /**\n     * Construct a Logger.\n     *\n     * @param source - The name of the log source.\n     */\n    constructor(options) {\n        this._isDisposed = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._rendermime = null;\n        this._version = 0;\n        this._level = 'warning';\n        this.source = options.source;\n        this.outputAreaModel = new LoggerOutputAreaModel({\n            contentFactory: new LogConsoleModelContentFactory(),\n            maxLength: options.maxLength\n        });\n    }\n    /**\n     * The maximum number of outputs stored.\n     *\n     * #### Notes\n     * Oldest entries will be trimmed to ensure the length is at most\n     * `.maxLength`.\n     */\n    get maxLength() {\n        return this.outputAreaModel.maxLength;\n    }\n    set maxLength(value) {\n        this.outputAreaModel.maxLength = value;\n    }\n    /**\n     * The level of outputs logged\n     */\n    get level() {\n        return this._level;\n    }\n    set level(newValue) {\n        const oldValue = this._level;\n        if (oldValue === newValue) {\n            return;\n        }\n        this._level = newValue;\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/plain': `Log level set to ${newValue}`\n                }\n            },\n            level: 'metadata'\n        });\n        this._stateChanged.emit({ name: 'level', oldValue, newValue });\n    }\n    /**\n     * Number of outputs logged.\n     */\n    get length() {\n        return this.outputAreaModel.length;\n    }\n    /**\n     * A signal emitted when the list of log messages changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the log state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * Rendermime to use when rendering outputs logged.\n     */\n    get rendermime() {\n        return this._rendermime;\n    }\n    set rendermime(value) {\n        if (value !== this._rendermime) {\n            const oldValue = this._rendermime;\n            const newValue = (this._rendermime = value);\n            this._stateChanged.emit({ name: 'rendermime', oldValue, newValue });\n        }\n    }\n    /**\n     * The number of messages that have ever been stored.\n     */\n    get version() {\n        return this._version;\n    }\n    /**\n     * Log an output to logger.\n     *\n     * @param log - The output to be logged.\n     */\n    log(log) {\n        // Filter by our current log level\n        if (Private.LogLevel[log.level] <\n            Private.LogLevel[this._level]) {\n            return;\n        }\n        let output = null;\n        switch (log.type) {\n            case 'text':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/plain': log.data\n                    }\n                };\n                break;\n            case 'html':\n                output = {\n                    output_type: 'display_data',\n                    data: {\n                        'text/html': log.data\n                    }\n                };\n                break;\n            case 'output':\n                output = log.data;\n                break;\n            default:\n                break;\n        }\n        if (output) {\n            this._log({\n                output,\n                level: log.level\n            });\n        }\n    }\n    /**\n     * Clear all outputs logged.\n     */\n    clear() {\n        this.outputAreaModel.clear(false);\n        this._contentChanged.emit('clear');\n    }\n    /**\n     * Add a checkpoint to the log.\n     */\n    checkpoint() {\n        this._log({\n            output: {\n                output_type: 'display_data',\n                data: {\n                    'text/html': '<hr/>'\n                }\n            },\n            level: 'metadata'\n        });\n    }\n    /**\n     * Whether the logger is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the logger.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.clear();\n        this._rendermime = null;\n        Signal.clearData(this);\n    }\n    _log(options) {\n        // First, make sure our version reflects the new message so things\n        // triggering from the signals below have the correct version.\n        this._version++;\n        // Next, trigger any displays of the message\n        this.outputAreaModel.add(Object.assign(Object.assign({}, options.output), { timestamp: Date.now(), level: options.level }));\n        // Finally, tell people that the message was appended (and possibly\n        // already displayed).\n        this._contentChanged.emit('append');\n    }\n}\nvar Private;\n(function (Private) {\n    let LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"debug\"] = 0] = \"debug\";\n        LogLevel[LogLevel[\"info\"] = 1] = \"info\";\n        LogLevel[LogLevel[\"warning\"] = 2] = \"warning\";\n        LogLevel[LogLevel[\"error\"] = 3] = \"error\";\n        LogLevel[LogLevel[\"critical\"] = 4] = \"critical\";\n        LogLevel[LogLevel[\"metadata\"] = 5] = \"metadata\";\n    })(LogLevel = Private.LogLevel || (Private.LogLevel = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=logger.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { Logger } from './logger';\n/**\n * A concrete implementation of ILoggerRegistry.\n */\nexport class LoggerRegistry {\n    /**\n     * Construct a LoggerRegistry.\n     *\n     * @param defaultRendermime - Default rendermime to render outputs\n     * with when logger is not supplied with one.\n     */\n    constructor(options) {\n        this._loggers = new Map();\n        this._registryChanged = new Signal(this);\n        this._isDisposed = false;\n        this._defaultRendermime = options.defaultRendermime;\n        this._maxLength = options.maxLength;\n    }\n    /**\n     * Get the logger for the specified source.\n     *\n     * @param source - The name of the log source.\n     *\n     * @returns The logger for the specified source.\n     */\n    getLogger(source) {\n        const loggers = this._loggers;\n        let logger = loggers.get(source);\n        if (logger) {\n            return logger;\n        }\n        logger = new Logger({ source, maxLength: this.maxLength });\n        logger.rendermime = this._defaultRendermime;\n        loggers.set(source, logger);\n        this._registryChanged.emit('append');\n        return logger;\n    }\n    /**\n     * Get all loggers registered.\n     *\n     * @returns The array containing all registered loggers.\n     */\n    getLoggers() {\n        return Array.from(this._loggers.values());\n    }\n    /**\n     * A signal emitted when the logger registry changes.\n     */\n    get registryChanged() {\n        return this._registryChanged;\n    }\n    /**\n     * The max length for loggers.\n     */\n    get maxLength() {\n        return this._maxLength;\n    }\n    set maxLength(value) {\n        this._maxLength = value;\n        this._loggers.forEach(logger => {\n            logger.maxLength = value;\n        });\n    }\n    /**\n     * Whether the register is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the registry and all loggers.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._loggers.forEach(x => x.dispose());\n        Signal.clearData(this);\n    }\n}\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The Logger Registry token.\n */\nexport const ILoggerRegistry = new Token('@jupyterlab/logconsole:ILoggerRegistry');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { OutputArea } from '@jupyterlab/outputarea';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, PanelLayout, StackedPanel } from '@lumino/widgets';\nfunction toTitleCase(value) {\n    return value.length === 0 ? value : value[0].toUpperCase() + value.slice(1);\n}\n/**\n * Log console output prompt implementation\n */\nclass LogConsoleOutputPrompt extends Widget {\n    constructor() {\n        super();\n        this._timestampNode = document.createElement('div');\n        this.node.append(this._timestampNode);\n    }\n    /**\n     * Date & time when output is logged.\n     */\n    set timestamp(value) {\n        this._timestamp = value;\n        this._timestampNode.innerHTML = this._timestamp.toLocaleTimeString();\n        this.update();\n    }\n    /**\n     * Log level\n     */\n    set level(value) {\n        this._level = value;\n        this.node.dataset.logLevel = value;\n        this.update();\n    }\n    update() {\n        if (this._level !== undefined && this._timestamp !== undefined) {\n            this.node.title = `${this._timestamp.toLocaleString()}; ${toTitleCase(this._level)} level`;\n        }\n    }\n}\n/**\n * Output Area implementation displaying log outputs\n * with prompts showing log timestamps.\n */\nclass LogConsoleOutputArea extends OutputArea {\n    /**\n     * Create an output item with a prompt and actual output\n     */\n    createOutputItem(model) {\n        const panel = super.createOutputItem(model);\n        if (panel === null) {\n            // Could not render model\n            return null;\n        }\n        // first widget in panel is prompt of type LoggerOutputPrompt\n        const prompt = panel.widgets[0];\n        prompt.timestamp = model.timestamp;\n        prompt.level = model.level;\n        return panel;\n    }\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n}\n/**\n * Implementation of `IContentFactory` for Output Area\n * which creates custom output prompts.\n */\nclass LogConsoleContentFactory extends OutputArea.ContentFactory {\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt() {\n        return new LogConsoleOutputPrompt();\n    }\n}\n/**\n * Implements a panel which supports pinning the position to the end if it is\n * scrolled to the end.\n *\n * #### Notes\n * This is useful for log viewing components or chat components that append\n * elements at the end. We would like to automatically scroll when the user\n * has scrolled to the bottom, but not change the scrolling when the user has\n * changed the scroll position.\n */\nexport class ScrollingWidget extends Widget {\n    constructor(_a) {\n        var { content } = _a, options = __rest(_a, [\"content\"]);\n        super(options);\n        this._observer = null;\n        this.addClass('jp-Scrolling');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(content);\n        this._content = content;\n        this._sentinel = document.createElement('div');\n        this.node.appendChild(this._sentinel);\n    }\n    /**\n     * The content widget.\n     */\n    get content() {\n        return this._content;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        // defer so content gets a chance to attach first\n        requestAnimationFrame(() => {\n            this._sentinel.scrollIntoView();\n            this._scrollHeight = this.node.scrollHeight;\n        });\n        // Set up intersection observer for the sentinel\n        if (typeof IntersectionObserver !== 'undefined') {\n            this._observer = new IntersectionObserver(args => {\n                this._handleScroll(args);\n            }, { root: this.node, threshold: 1 });\n            this._observer.observe(this._sentinel);\n        }\n    }\n    onBeforeDetach(msg) {\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n    }\n    onAfterShow(msg) {\n        if (this._tracking) {\n            this._sentinel.scrollIntoView();\n        }\n    }\n    _handleScroll([entry]) {\n        if (entry.isIntersecting) {\n            this._tracking = true;\n        }\n        else if (this.isVisible) {\n            const currentHeight = this.node.scrollHeight;\n            if (currentHeight === this._scrollHeight) {\n                // Likely the user scrolled manually\n                this._tracking = false;\n            }\n            else {\n                // We assume we scrolled because our size changed, so scroll to the end.\n                this._sentinel.scrollIntoView();\n                this._scrollHeight = currentHeight;\n                this._tracking = true;\n            }\n        }\n    }\n}\n/**\n * A StackedPanel implementation that creates Output Areas\n * for each log source and activates as source is switched.\n */\nexport class LogConsolePanel extends StackedPanel {\n    /**\n     * Construct a LogConsolePanel instance.\n     *\n     * @param loggerRegistry - The logger registry that provides\n     * logs to be displayed.\n     */\n    constructor(loggerRegistry, translator) {\n        super();\n        this._outputAreas = new Map();\n        this._source = null;\n        this._sourceChanged = new Signal(this);\n        this._sourceDisplayed = new Signal(this);\n        this._loggersWatched = new Set();\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._loggerRegistry = loggerRegistry;\n        this.addClass('jp-LogConsolePanel');\n        loggerRegistry.registryChanged.connect((sender, args) => {\n            this._bindLoggerSignals();\n        }, this);\n        this._bindLoggerSignals();\n        this._placeholder = new Widget();\n        this._placeholder.addClass('jp-LogConsoleListPlaceholder');\n        this.addWidget(this._placeholder);\n    }\n    /**\n     * The logger registry providing the logs.\n     */\n    get loggerRegistry() {\n        return this._loggerRegistry;\n    }\n    /**\n     * The current logger.\n     */\n    get logger() {\n        if (this.source === null) {\n            return null;\n        }\n        return this.loggerRegistry.getLogger(this.source);\n    }\n    /**\n     * The log source displayed\n     */\n    get source() {\n        return this._source;\n    }\n    set source(name) {\n        if (name === this._source) {\n            return;\n        }\n        const oldValue = this._source;\n        const newValue = (this._source = name);\n        this._showOutputFromSource(newValue);\n        this._handlePlaceholder();\n        this._sourceChanged.emit({ oldValue, newValue, name: 'source' });\n    }\n    /**\n     * The source version displayed.\n     */\n    get sourceVersion() {\n        const source = this.source;\n        return source !== null\n            ? this._loggerRegistry.getLogger(source).version\n            : null;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceChanged() {\n        return this._sourceChanged;\n    }\n    /**\n     * Signal for source changes\n     */\n    get sourceDisplayed() {\n        return this._sourceDisplayed;\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._updateOutputAreas();\n        this._showOutputFromSource(this._source);\n        this._handlePlaceholder();\n    }\n    onAfterShow(msg) {\n        super.onAfterShow(msg);\n        if (this.source !== null) {\n            this._sourceDisplayed.emit({\n                source: this.source,\n                version: this.sourceVersion\n            });\n        }\n    }\n    _bindLoggerSignals() {\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            if (this._loggersWatched.has(logger.source)) {\n                continue;\n            }\n            logger.contentChanged.connect((sender, args) => {\n                this._updateOutputAreas();\n                this._handlePlaceholder();\n            }, this);\n            logger.stateChanged.connect((sender, change) => {\n                if (change.name !== 'rendermime') {\n                    return;\n                }\n                const viewId = `source:${sender.source}`;\n                const outputArea = this._outputAreas.get(viewId);\n                if (outputArea) {\n                    if (change.newValue) {\n                        // cast away readonly\n                        outputArea.rendermime = change.newValue;\n                    }\n                    else {\n                        outputArea.dispose();\n                    }\n                }\n            }, this);\n            this._loggersWatched.add(logger.source);\n        }\n    }\n    _showOutputFromSource(source) {\n        // If the source is null, pick a unique name so all output areas hide.\n        const viewId = source === null ? 'null source' : `source:${source}`;\n        this._outputAreas.forEach((outputArea, name) => {\n            var _a, _b;\n            // Show/hide the output area parents, the scrolling windows.\n            if (outputArea.id === viewId) {\n                (_a = outputArea.parent) === null || _a === void 0 ? void 0 : _a.show();\n                if (outputArea.isVisible) {\n                    this._sourceDisplayed.emit({\n                        source: this.source,\n                        version: this.sourceVersion\n                    });\n                }\n            }\n            else {\n                (_b = outputArea.parent) === null || _b === void 0 ? void 0 : _b.hide();\n            }\n        });\n        const title = source === null\n            ? this._trans.__('Log Console')\n            : this._trans.__('Log: %1', source);\n        this.title.label = title;\n        this.title.caption = title;\n    }\n    _handlePlaceholder() {\n        if (this.source === null) {\n            this._placeholder.node.textContent = this._trans.__('No source selected.');\n            this._placeholder.show();\n        }\n        else if (this._loggerRegistry.getLogger(this.source).length === 0) {\n            this._placeholder.node.textContent = this._trans.__('No log messages.');\n            this._placeholder.show();\n        }\n        else {\n            this._placeholder.hide();\n            this._placeholder.node.textContent = '';\n        }\n    }\n    _updateOutputAreas() {\n        const loggerIds = new Set();\n        const loggers = this._loggerRegistry.getLoggers();\n        for (const logger of loggers) {\n            const source = logger.source;\n            const viewId = `source:${source}`;\n            loggerIds.add(viewId);\n            // add view for logger if not exist\n            if (!this._outputAreas.has(viewId)) {\n                const outputArea = new LogConsoleOutputArea({\n                    rendermime: logger.rendermime,\n                    contentFactory: new LogConsoleContentFactory(),\n                    model: logger.outputAreaModel\n                });\n                outputArea.id = viewId;\n                // Attach the output area so it is visible, so the accounting\n                // functions below record the outputs actually displayed.\n                const w = new ScrollingWidget({\n                    content: outputArea\n                });\n                this.addWidget(w);\n                this._outputAreas.set(viewId, outputArea);\n                // This is where the source object is associated with the output area.\n                // We capture the source from this environment in the closure.\n                const outputUpdate = (sender) => {\n                    // If the current log console panel source is the source associated\n                    // with this output area, and the output area is visible, then emit\n                    // the logConsolePanel source displayed signal.\n                    if (this.source === source && sender.isVisible) {\n                        // We assume that the output area has been updated to the current\n                        // version of the source.\n                        this._sourceDisplayed.emit({\n                            source: this.source,\n                            version: this.sourceVersion\n                        });\n                    }\n                };\n                // Notify messages were displayed any time the output area is updated\n                // and update for any outputs rendered on construction.\n                outputArea.outputLengthChanged.connect(outputUpdate, this);\n                // Since the output area was attached above, we can rely on its\n                // visibility to account for the messages displayed.\n                outputUpdate(outputArea);\n            }\n        }\n        // remove output areas that do not have corresponding loggers anymore\n        const viewIds = this._outputAreas.keys();\n        for (const viewId of viewIds) {\n            if (!loggerIds.has(viewId)) {\n                const outputArea = this._outputAreas.get(viewId);\n                outputArea === null || outputArea === void 0 ? void 0 : outputArea.dispose();\n                this._outputAreas.delete(viewId);\n            }\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}
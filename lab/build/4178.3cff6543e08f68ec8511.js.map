{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_item.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc_tree.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/toc.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/latex/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_markdown.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/sanitizer_options.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/generate_numbering.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/parse_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_rendered_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/markdown/get_headings.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/options_manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_code_cell_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_last_heading_level.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/get_rendered_html_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/is_heading_filtered.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_markdown_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/append_collapsible_heading.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/codemirror.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/tag_list.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/tagstool/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/notebook/toolbar_generator.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/utils/is_dom.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/render.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/toc/lib/generators/python/index.js"],"names":["ITableOfContentsRegistry","Token","TableOfContentsRegistry","this","_collapseChanged","Signal","_generators","widget","i","length","gen","tracker","has","isEnabled","generator","collapseChanged","connect","sender","args","emit","push","IOptionsManager","TOCItem","heading","toc","props","content","itemRenderer","onClick","event","preventDefault","stopPropagation","TOCTree","Toolbar","toolbar","list","map","el","key","text","level","className","title","TableOfContents","Widget","options","super","translator","nullTranslator","_docmanager","docmanager","_rendermime","rendermime","_trans","load","_current","value","toolbarGenerator","_toolbar","_monitor","dispose","update","context","contextForWidget","model","Error","ActivityMonitor","signal","contentChanged","timeout","activityStopped","msg","__","generate","PathExt","localPath","item","jsx","node","usesLatex","latexTypesetter","typeset","LATEX_LEVELS","part","chapter","section","subsection","subsubsection","paragraph","subparagraph","editor","mime","mimeType","lines","split","arr","toEntries","headings","RE","match","line","setCursorPosition","column","createLatexGenerator","isMarkdown","OptionsManager","_numbering","numbering","_widget","sanitizer","sanitizerOptions","allowedTags","allowedAttributes","code","span","div","p","pre","render","fontSizeClass","html","sanitize","dangerouslySetInnerHTML","__html","state","initializeOptions","toggleNumbering","setState","icon","role","numberingIcon","generateNumbering","dict","l","j","parseHeading","str","replace","type","parseInt","scrollIntoView","FLG","indexOf","getHeadings","createMarkdownGenerator","createRenderedMarkdownGenerator","nodes","querySelectorAll","tagName","textContent","hide","getElementsByClassName","removeChild","innerHTML","nstr","nhtml","getRenderedHeadings","notebook","_preRenderedToolbar","_filtered","_showCode","_showMarkdown","_showTags","_tagTool","_notebook","storeTags","tagTool","currentWidget","metadata","set","notebookMetadata","filtered","showCode","showMarkdown","showTags","getCodeCellHeading","executionCount","lastLevel","cellRef","index","console","warn","len","Math","min","prompt","hasChild","getLastHeadingLevel","loc","getMarkdownHeadings","clbk","getRenderedHTMLHeadings","nodeName","toLowerCase","document","createElement","classList","add","insertBefore","firstChild","isHeadingFiltered","tags","ctags","get","name","k","appendHeading","prev","collapseLevel","appendMarkdownHeading","collapsed","parent","appendCollapsibleHeading","CodeComponent","nextProps","host","previousHeader","activeCellIndex","tocIndexOfNextHeader","TagComponent","tag","Date","toLocaleTimeString","TagListComponent","selectedTagWithName","selectedTags","selectionStateHandler","renderTagComponents","tagClass","tabIndex","selected","TagsToolComponent","changeSelectionState","newState","filterTags","deselectAll","updateWidget","updateFilters","tmp","idx","inputFilter","cell","tagList","createNotebookGenerator","activeCellChanged","ready","then","cells","Set","Array","isArray","forEach","from","codeToggleIcon","toggleCode","codeIcon","markdownToggleIcon","toggleMarkdown","markdownIcon","numberingToggleIcon","tagDropdown","tagToggleIcon","tagIcon","loadTags","ref","toggleTagDropdown","button","ellipseButton","ellipsesIcon","activeCell","delete","updateAndCollapse","collapsedState","tocType","panel","widgets","mcell","rendered","inputHidden","mode","htmlHeadings","markdownHeadings","count","outputs","m","dtypes","Object","keys","data","filter","t","outputArea","processingImports","trim","slice","createPythonGenerator"],"mappings":"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","file":"4178.3cff6543e08f68ec8511.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * Table of contents registry token.\n */\nexport const ITableOfContentsRegistry = new Token('@jupyterlab/toc:ITableOfContentsRegistry');\n/* tslint:enable */\n/**\n * Class for registering widgets for which we can generate a table of contents.\n */\nexport class TableOfContentsRegistry {\n    constructor() {\n        this._collapseChanged = new Signal(this);\n        this._generators = [];\n    }\n    /**\n     * Finds a table of contents generator for a widget.\n     *\n     * ## Notes\n     *\n     * -   If unable to find a table of contents generator, the method return `undefined`.\n     *\n     * @param widget - widget\n     * @returns table of contents generator\n     */\n    find(widget) {\n        for (let i = 0; i < this._generators.length; i++) {\n            const gen = this._generators[i];\n            if (gen.tracker.has(widget)) {\n                if (gen.isEnabled && !gen.isEnabled(widget)) {\n                    continue;\n                }\n                return gen;\n            }\n        }\n    }\n    /**\n     * Adds a table of contents generator to the registry.\n     *\n     * @param generator - table of contents generator\n     */\n    add(generator) {\n        if (generator.collapseChanged) {\n            // If there is a collapseChanged for a given generator, propogate the arguments through the registry's signal\n            generator.collapseChanged.connect((sender, args) => {\n                this._collapseChanged.emit(args);\n            });\n        }\n        this._generators.push(generator);\n    }\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n}\n/**\n * Static registry methods.\n */\n(function (TableOfContentsRegistry) {\n    /**\n     * Abstract class for managing options affecting how a table of contents is generated for a particular widget type.\n     */\n    class IOptionsManager {\n    }\n    TableOfContentsRegistry.IOptionsManager = IOptionsManager;\n})(TableOfContentsRegistry || (TableOfContentsRegistry = {}));\n//# sourceMappingURL=registry.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for a table of contents entry.\n *\n * @private\n */\nclass TOCItem extends React.Component {\n    /**\n     * Renders a table of contents entry.\n     *\n     * @returns rendered entry\n     */\n    render() {\n        const { heading, toc } = this.props;\n        // Create an onClick handler for the TOC item\n        // that scrolls the anchor into view.\n        const onClick = (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            heading.onClick();\n        };\n        let content = this.props.itemRenderer(heading, toc);\n        return content && React.createElement(\"li\", { onClick: onClick }, content);\n    }\n}\n/**\n * Exports.\n */\nexport { TOCItem };\n//# sourceMappingURL=toc_item.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TOCItem } from './toc_item';\n/**\n * React component for a table of contents tree.\n *\n * @private\n */\nclass TOCTree extends React.Component {\n    /**\n     * Renders a table of contents tree.\n     */\n    render() {\n        const Toolbar = this.props.toolbar;\n        // Map the heading objects onto a list of JSX elements...\n        let i = 0;\n        let list = this.props.toc.map(el => {\n            return (React.createElement(TOCItem, { heading: el, toc: this.props.toc, itemRenderer: this.props.itemRenderer, key: `${el.text}-${el.level}-${i++}` }));\n        });\n        return (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, this.props.title),\n            Toolbar && React.createElement(Toolbar, null),\n            React.createElement(\"ul\", { className: \"jp-TableOfContents-content\" }, list)));\n    }\n}\n/**\n * Exports.\n */\nexport { TOCTree };\n//# sourceMappingURL=toc_tree.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ActivityMonitor, PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport { TOCTree } from './toc_tree';\n/**\n * Timeout for throttling ToC rendering.\n *\n * @private\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * Widget for hosting a notebook table of contents.\n */\nexport class TableOfContents extends Widget {\n    /**\n     * Returns a new table of contents.\n     *\n     * @param options - options\n     * @returns widget\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._docmanager = options.docmanager;\n        this._rendermime = options.rendermime;\n        this._trans = this.translator.load('jupyterlab');\n    }\n    /**\n     * Current widget-generator tuple for the ToC.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(value) {\n        // If they are the same as previously, do nothing...\n        if (value &&\n            this._current &&\n            this._current.widget === value.widget &&\n            this._current.generator === value.generator) {\n            return;\n        }\n        this._current = value;\n        if (this.generator) {\n            if (this.generator.toolbarGenerator) {\n                this._toolbar = this.generator.toolbarGenerator();\n            }\n            else {\n                this._toolbar = null;\n            }\n        }\n        // Dispose an old activity monitor if one existed...\n        if (this._monitor) {\n            this._monitor.dispose();\n            this._monitor = null;\n        }\n        // If we are wiping the ToC, update and return...\n        if (!this._current) {\n            this.update();\n            return;\n        }\n        // Find the document model associated with the widget:\n        const context = this._docmanager.contextForWidget(this._current.widget);\n        if (!context || !context.model) {\n            throw Error('Could not find a context for the Table of Contents');\n        }\n        // Throttle the rendering rate of the table of contents:\n        this._monitor = new ActivityMonitor({\n            signal: context.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(this.update, this);\n        this.update();\n    }\n    /**\n     * Current table of contents generator.\n     *\n     * @returns table of contents generator\n     */\n    get generator() {\n        if (this._current) {\n            return this._current.generator;\n        }\n        return null;\n    }\n    /**\n     * Callback invoked upon an update request.\n     *\n     * @param msg - message\n     */\n    onUpdateRequest(msg) {\n        let toc = [];\n        let title = this._trans.__('Table of Contents');\n        if (this._current) {\n            toc = this._current.generator.generate(this._current.widget);\n            const context = this._docmanager.contextForWidget(this._current.widget);\n            if (context) {\n                title = PathExt.basename(context.localPath);\n            }\n        }\n        let itemRenderer = (item) => {\n            return React.createElement(\"span\", null, item.text);\n        };\n        if (this._current && this._current.generator.itemRenderer) {\n            itemRenderer = this._current.generator.itemRenderer;\n        }\n        let jsx = (React.createElement(\"div\", { className: \"jp-TableOfContents\" },\n            React.createElement(\"div\", { className: \"jp-stack-panel-header\" }, title)));\n        if (this._current && this._current.generator) {\n            jsx = (React.createElement(TOCTree, { title: title, toc: toc, generator: this.generator, itemRenderer: itemRenderer, toolbar: this._toolbar }));\n        }\n        ReactDOM.render(jsx, this.node, () => {\n            if (this._current &&\n                this._current.generator.usesLatex === true &&\n                this._rendermime.latexTypesetter) {\n                this._rendermime.latexTypesetter.typeset(this.node);\n            }\n        });\n    }\n    /**\n     * Callback invoked to re-render after showing a table of contents.\n     *\n     * @param msg - message\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n}\n//# sourceMappingURL=toc.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Maps LaTeX section headings to HTML header levels.\n *\n * ## Notes\n *\n * -   As `part` and `chapter` section headings appear to be less common, assign them to heading level 1.\n *\n * @private\n */\nconst LATEX_LEVELS = {\n    part: 1,\n    chapter: 1,\n    section: 1,\n    subsection: 2,\n    subsubsection: 3,\n    paragraph: 4,\n    subparagraph: 5\n};\n/**\n * Converts array elements to \"entries\".\n *\n * @private\n * @param arr - input array\n * @returns input array\n *\n * @example\n * const arr = toEntries([4,5,6]);\n * // returns [[4,0], [5,1], [6,2]]\n */\nfunction toEntries(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = [arr[i], i];\n    }\n    return arr;\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few LaTeX variants:\n    let mime = editor.content.model.mimeType;\n    return mime === 'text/x-latex' || mime === 'text/x-stex';\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Convert the list into \"entries\" so we can use the line number to scroll the editor upon ToC item click:\n    lines = toEntries(lines);\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    for (let i = 0; i < lines.length; i++) {\n        const RE = /^\\s*\\\\(section|subsection|subsubsection){(.+)}/;\n        const match = lines[i][0].match(RE);\n        if (match) {\n            headings.push({\n                text: match[2],\n                level: LATEX_LEVELS[match[1]],\n                onClick: onClick(lines[i][1])\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for LaTeX files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing LaTeX files\n */\nfunction createLatexGenerator(tracker) {\n    return {\n        tracker,\n        usesLatex: true,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createLatexGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to a Markdown flavor.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to a Markdown flavor\n *\n * @example\n * const bool = isMarkdown('text/markdown');\n * // returns true\n *\n * @example\n * const bool = isMarkdown('text/plain');\n * // returns false\n */\nfunction isMarkdown(mime) {\n    return (mime === 'text/x-ipythongfm' ||\n        mime === 'text/x-markdown' ||\n        mime === 'text/x-gfm' ||\n        mime === 'text/markdown');\n}\n/**\n * Exports.\n */\nexport { isMarkdown };\n//# sourceMappingURL=is_markdown.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\n/**\n * Class for managing Markdown ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, options) {\n        super();\n        this._numbering = options.numbering;\n        this._widget = widget;\n        this.translator = options.translator || nullTranslator;\n        this.sanitizer = options.sanitizer;\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     */\n    initializeOptions(numbering) {\n        this._numbering = numbering;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Allowed HTML tags and associated attributes for ToC entries when sanitizing HTML headings.\n *\n * ## Notes\n *\n * -   We specifically disallow anchor tags, since we are adding our own.\n *\n * @private\n */\nconst sanitizerOptions = {\n    allowedTags: [\n        'p',\n        'blockquote',\n        'b',\n        'i',\n        'strong',\n        'em',\n        'strike',\n        'code',\n        'br',\n        'div',\n        'span',\n        'pre',\n        'del'\n    ],\n    allowedAttributes: {\n        // Allow \"class\" attribute for <code> tags.\n        code: ['class'],\n        // Allow \"class\" attribute for <span> tags.\n        span: ['class'],\n        // Allow \"class\" attribute for <div> tags.\n        div: ['class'],\n        // Allow \"class\" attribute for <p> tags.\n        p: ['class'],\n        // Allow \"class\" attribute for <pre> tags.\n        pre: ['class']\n    }\n};\n/**\n * Exports.\n */\nexport { sanitizerOptions };\n//# sourceMappingURL=sanitizer_options.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Renders a Markdown table of contents item.\n *\n * @private\n * @param options - generator options\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(options, item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    // Render item numbering:\n    let numbering = item.numbering && options.numbering ? item.numbering : '';\n    // Render the item:\n    let jsx;\n    if (item.html) {\n        let html = options.sanitizer.sanitize(item.html, sanitizerOptions);\n        jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: { __html: numbering + html }, className: 'toc-markdown-cell ' + fontSizeClass }));\n    }\n    else {\n        jsx = React.createElement(\"span\", { className: fontSizeClass },\n            \" \",\n            numbering + item.text);\n    }\n    return jsx;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { numberingIcon } from '@jupyterlab/ui-components';\n/**\n * Returns a component for rendering a Markdown table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @returns toolbar component\n */\nfunction toolbar(options) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a Markdown table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this.state = { numbering: false };\n            options.initializeOptions(false);\n            this._trans = options.translator.load('jupyterlab');\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const toggleNumbering = () => {\n                options.numbering = !options.numbering;\n                this.setState({ numbering: options.numbering });\n            };\n            const icon = (React.createElement(\"div\", { onClick: event => toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' }, icon)));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// Maximum heading level:\nconst MAX_HEADING_LEVEL = 6;\n/**\n * Updates numbering dictionary levels.\n *\n * ## Notes\n *\n * -   Mutates a provided dictionary.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns input dictionary\n */\nfunction update(dict, level) {\n    for (let l = level + 1; l <= MAX_HEADING_LEVEL; l++) {\n        if (dict[l] !== void 0) {\n            dict[l] = void 0;\n        }\n    }\n    if (dict[level] === void 0) {\n        dict[level] = 1;\n    }\n    else {\n        dict[level] += 1;\n    }\n    return dict;\n}\n/**\n * Generate the current numbering based on a provided numbering dictionary and the current level.\n *\n * @private\n * @param dict - numbering dictionary\n * @param level - current level\n * @returns numbering\n */\nfunction generateNumbering(dict, level) {\n    if (dict === null) {\n        return;\n    }\n    let numbering = '';\n    dict = update(dict, level);\n    if (level >= 1) {\n        for (let j = 1; j <= level; j++) {\n            numbering += (dict[j] === void 0 ? '0' : dict[j]) + '.';\n        }\n        numbering += ' ';\n    }\n    return numbering;\n}\n/**\n * Exports.\n */\nexport { generateNumbering };\n//# sourceMappingURL=generate_numbering.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Parses a heading, if one exists, from a provided string.\n *\n * ## Notes\n *\n * -   Heading examples:\n *\n *     -   Markdown heading:\n *\n *         ```\n *         # Foo\n *         ```\n *\n *     -   Markdown heading (alternative style):\n *\n *         ```\n *         Foo\n *         ===\n *         ```\n *\n *         ```\n *         Foo\n *         ---\n *         ```\n *\n *     -   HTML heading:\n *\n *         ```\n *         <h3>Foo</h3>\n *         ```\n *\n * @private\n * @param str - input text\n * @returns heading info\n *\n * @example\n * const out = parseHeading('### Foo\\n');\n * // returns {'text': 'Foo', 'level': 3, 'type': 'markdown'}\n *\n * @example\n * const out = parseHeading('Foo\\n===\\n');\n * // returns {'text': 'Foo', 'level': 1, 'type': 'markdown-alt'}\n *\n * @example\n * const out = parseHeading('<h4>Foo</h4>\\n');\n * // returns {'text': 'Foo', 'level': 4, 'type': 'html'}\n *\n * @example\n * const out = parseHeading('Foo');\n * // returns null\n */\nfunction parseHeading(str) {\n    const lines = str.split('\\n');\n    // Case: Markdown heading\n    let match = lines[0].match(/^([#]{1,6}) (.*)/);\n    if (match) {\n        return {\n            text: match[2].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n            level: match[1].length,\n            type: 'markdown'\n        };\n    }\n    // Case: Markdown heading (alternative style)\n    if (lines.length > 1) {\n        match = lines[1].match(/^ {0,3}([=]{2,}|[-]{2,})\\s*$/);\n        if (match) {\n            return {\n                text: lines[0].replace(/\\[(.+)\\]\\(.+\\)/g, '$1'),\n                level: match[1][0] === '=' ? 1 : 2,\n                type: 'markdown-alt'\n            };\n        }\n    }\n    // Case: HTML heading (WARNING: this is not particularly robust, as HTML headings can span multiple lines)\n    match = lines[0].match(/<h([1-6]).*>(.*)<\\/h\\1>/i);\n    if (match) {\n        return {\n            text: match[2],\n            level: parseInt(match[1], 10),\n            type: 'html'\n        };\n    }\n    return null;\n}\n/**\n * Exports.\n */\nexport { parseHeading };\n//# sourceMappingURL=parse_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a \"click\" handler.\n *\n * @private\n * @param heading - heading element\n * @returns \"click\" handler\n */\nfunction onClick(heading) {\n    return () => {\n        heading.scrollIntoView();\n    };\n}\n/**\n * Processes an HTML element containing rendered Markdown and returns a list of headings.\n *\n * @private\n * @param node - HTML element\n * @param sanitizer - HTML sanitizer\n * @param dict - numbering dictionary\n * @param numbering - boolean indicating whether to enable numbering\n * @returns list of headings\n */\nfunction getRenderedHeadings(node, sanitizer, dict, numbering = true) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    let headings = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const heading = nodes[i];\n        const level = parseInt(heading.tagName[1], 10);\n        let text = heading.textContent ? heading.textContent : '';\n        let hide = !numbering;\n        // Show/hide numbering DOM element based on user settings:\n        if (heading.getElementsByClassName('numbering-entry').length > 0) {\n            heading.removeChild(heading.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(heading.innerHTML, sanitizerOptions);\n        html = html.replace('¶', ''); // remove the anchor symbol\n        // Generate a numbering string:\n        let nstr = generateNumbering(dict, level);\n        // Generate the numbering DOM element:\n        let nhtml = '';\n        if (!hide) {\n            nhtml = '<span class=\"numbering-entry\">' + nstr + '</span>';\n        }\n        // Append the numbering element to the document:\n        heading.innerHTML = nhtml + html;\n        headings.push({\n            level,\n            text: text.replace('¶', ''),\n            numbering: nstr,\n            html,\n            onClick: onClick(heading)\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHeadings };\n//# sourceMappingURL=get_rendered_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { OptionsManager } from './options_manager';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\nimport { getHeadings } from './get_headings';\nimport { getRenderedHeadings } from './get_rendered_headings';\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    // Only enable this if the editor MIME type matches one of a few Markdown variants:\n    return isMarkdown(editor.content.model.mimeType);\n}\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    let dict = {};\n    return getHeadings(editor.content.model.value.text, onClick, dict);\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a ToC generator for Markdown files.\n *\n * @private\n * @param tracker - file editor tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @returns ToC generator capable of parsing Markdown files\n */\nfunction createMarkdownGenerator(tracker, widget, sanitizer, translator) {\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        isEnabled: isEnabled,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n}\n/**\n * Returns a ToC generator for rendered Markdown files.\n *\n * @param tracker - Markdown viewer tracker\n * @param sanitizer - HTML sanitizer\n * @param widget - table of contents widget\n * @returns ToC generator capable of parsing rendered Markdown files\n */\nfunction createRenderedMarkdownGenerator(tracker, widget, sanitizer, translator) {\n    const options = new OptionsManager(widget, {\n        numbering: true,\n        sanitizer,\n        translator: translator || nullTranslator\n    });\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @returns rendered item\n     */\n    function renderItem(item) {\n        return render(options, item);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param widget - Markdown document widget\n     * @returns a list of headings\n     */\n    function generate(widget) {\n        let dict = {};\n        return getRenderedHeadings(widget.content.node, sanitizer, dict, options.numbering);\n    }\n}\n/**\n * Exports.\n */\nexport { createMarkdownGenerator };\nexport { createRenderedMarkdownGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a provided string and returns a list of headings.\n *\n * @private\n * @param text - input text\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @returns list of headings\n */\nfunction getHeadings(text, onClick, dict) {\n    // Split the text into lines:\n    const lines = text.split('\\n');\n    // Iterate over the lines to get the header level and text for each line:\n    let headings = [];\n    let FLG;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        // Don't check for Markdown headings if in a code block:\n        if (line.indexOf('```') === 0) {\n            FLG = !FLG;\n        }\n        if (FLG) {\n            continue;\n        }\n        line += lines[i + 1] ? '\\n' + lines[i + 1] : '';\n        const heading = parseHeading(line); // append the next line to capture alternative style Markdown headings\n        if (heading) {\n            headings.push({\n                text: heading.text,\n                numbering: generateNumbering(dict, heading.level),\n                level: heading.level,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getHeadings };\n//# sourceMappingURL=get_headings.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TableOfContentsRegistry as Registry } from '../../registry';\nimport { Signal } from '@lumino/signaling';\n/**\n * Class for managing notebook ToC generator options.\n *\n * @private\n */\nclass OptionsManager extends Registry.IOptionsManager {\n    /**\n     * Returns an options manager.\n     *\n     * @param widget - table of contents widget\n     * @param notebook - notebook tracker\n     * @param options - generator options\n     * @returns options manager\n     */\n    constructor(widget, notebook, options) {\n        super();\n        this._preRenderedToolbar = null;\n        this._filtered = [];\n        this._showCode = false;\n        this._showMarkdown = false;\n        this._showTags = false;\n        this._tagTool = null;\n        this._numbering = options.numbering;\n        this._widget = widget;\n        this._notebook = notebook;\n        this.sanitizer = options.sanitizer;\n        this.storeTags = [];\n        this.translator = options.translator || nullTranslator;\n        this._collapseChanged = new Signal(this);\n    }\n    /**\n     * Gets/sets the tag tool component.\n     */\n    set tagTool(tagTool) {\n        this._tagTool = tagTool;\n    }\n    get tagTool() {\n        return this._tagTool;\n    }\n    /**\n     * Sets notebook meta data.\n     */\n    set notebookMetadata(value) {\n        if (this._notebook.currentWidget != null) {\n            this._notebook.currentWidget.model.metadata.set(value[0], value[1]);\n        }\n    }\n    /**\n     * Gets/sets ToC generator numbering.\n     */\n    set numbering(value) {\n        this._numbering = value;\n        this._widget.update();\n        this.notebookMetadata = ['toc-autonumbering', this._numbering];\n    }\n    get numbering() {\n        return this._numbering;\n    }\n    /**\n     * Toggles whether to show code previews in the table of contents.\n     */\n    set showCode(value) {\n        this._showCode = value;\n        this.notebookMetadata = ['toc-showcode', this._showCode];\n        this._widget.update();\n    }\n    get showCode() {\n        return this._showCode;\n    }\n    /**\n     * Toggles whether to show Markdown previews in the table of contents.\n     */\n    set showMarkdown(value) {\n        this._showMarkdown = value;\n        this.notebookMetadata = ['toc-showmarkdowntxt', this._showMarkdown];\n        this._widget.update();\n    }\n    get showMarkdown() {\n        return this._showMarkdown;\n    }\n    /**\n     * Signal emitted when a \"collapse\" twist button is pressed in the ToC\n     */\n    get collapseChanged() {\n        return this._collapseChanged;\n    }\n    /**\n     * Toggles whether to show tags in the table of contents.\n     */\n    set showTags(value) {\n        this._showTags = value;\n        this.notebookMetadata = ['toc-showtags', this._showTags];\n        this._widget.update();\n    }\n    get showTags() {\n        return this._showTags;\n    }\n    /**\n     * Returns a list of selected tags.\n     */\n    get filtered() {\n        if (this.tagTool) {\n            this._filtered = this.tagTool.filtered;\n        }\n        else if (this.storeTags.length > 0) {\n            this._filtered = this.storeTags;\n        }\n        else {\n            this._filtered = [];\n        }\n        return this._filtered;\n    }\n    /**\n     * Gets/sets a pre-rendered a toolbar.\n     */\n    set preRenderedToolbar(value) {\n        this._preRenderedToolbar = value;\n    }\n    get preRenderedToolbar() {\n        return this._preRenderedToolbar;\n    }\n    /**\n     * Updates a table of contents widget.\n     */\n    updateWidget() {\n        this._widget.update();\n    }\n    /**\n     * Updates a table of contents widget and\n     * emits a signal in case an extension wants\n     * to perform an action when the collapse button\n     * is pressed.\n     */\n    updateAndCollapse(args) {\n        this._collapseChanged.emit(args);\n        this._widget.update();\n    }\n    /**\n     * Initializes options.\n     *\n     * ## Notes\n     *\n     * -  This will **not** change notebook meta-data.\n     *\n     * @param numbering - boolean indicating whether to number items\n     * @param showCode - boolean indicating whether to show code previews\n     * @param showMarkdown - boolean indicating whether to show Markdown previews\n     * @param showTags - boolean indicating whether to show tags\n     */\n    initializeOptions(numbering, showCode, showMarkdown, showTags) {\n        this._numbering = numbering;\n        this._showCode = showCode;\n        this._showMarkdown = showMarkdown;\n        this._showTags = showTags;\n        this._widget.update();\n    }\n}\n/**\n * Exports.\n */\nexport { OptionsManager };\n//# sourceMappingURL=options_manager.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a code entry notebook heading from a code string.\n *\n * @private\n * @param text - code string\n * @param onClick - callback which returns a \"click\" handler\n * @param executionCount - execution count\n * @param lastLevel - last heading level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getCodeCellHeading(text, onClick, executionCount, lastLevel, cellRef, index = -1) {\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    if (text) {\n        const lines = text.split('\\n');\n        const len = Math.min(lines.length, 3);\n        let str = '';\n        let i = 0;\n        for (; i < len - 1; i++) {\n            str += lines[i] + '\\n';\n        }\n        str += lines[i];\n        headings.push({\n            text: str,\n            level: lastLevel + 1,\n            onClick: onClick(0),\n            type: 'code',\n            prompt: executionCount,\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings[0];\n}\n/**\n * Exports.\n */\nexport { getCodeCellHeading };\n//# sourceMappingURL=get_code_cell_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns the last heading level.\n *\n * @private\n * @param headings - list of notebook headings\n * @returns heading level\n */\nfunction getLastHeadingLevel(headings) {\n    if (headings.length > 0) {\n        let loc = headings.length - 1;\n        while (loc >= 0) {\n            if (headings[loc].type === 'header') {\n                return headings[loc].level;\n            }\n            loc -= 1;\n        }\n    }\n    return 0;\n}\n/**\n * Exports.\n */\nexport { getLastHeadingLevel };\n//# sourceMappingURL=get_last_heading_level.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { parseHeading } from '../../utils/parse_heading';\n/**\n * Parses a Markdown string and returns a notebook heading.\n *\n * @private\n * @param text - Markdown string\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getMarkdownHeadings(text, onClick, dict, lastLevel, cellRef, index = -1) {\n    const clbk = onClick(0);\n    let headings = [];\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    for (const line of text.split('\\n')) {\n        const heading = parseHeading(line);\n        if (heading) {\n            headings.push({\n                text: heading.text,\n                level: heading.level,\n                numbering: generateNumbering(dict, heading.level),\n                onClick: clbk,\n                type: 'header',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n        else {\n            headings.push({\n                text: text,\n                level: lastLevel + 1,\n                onClick: clbk,\n                type: 'markdown',\n                cellRef: cellRef,\n                hasChild: false,\n                index\n            });\n        }\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getMarkdownHeadings };\n//# sourceMappingURL=get_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { generateNumbering } from '../../utils/generate_numbering';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Returns a notebook heading from an HTML element.\n *\n * @private\n * @param node - HTML element\n * @param onClick - callback which returns a \"click\" handler\n * @param dict - numbering dictionary\n * @param lastLevel - last level\n * @param numbering - boolean indicating whether to enable numbering\n * @param cellRef - cell reference\n * @param index - index of referenced cell relative to other cells in the notebook\n * @returns notebook heading\n */\nfunction getRenderedHTMLHeadings(node, onClick, sanitizer, dict, lastLevel, numbering = false, cellRef, index = -1) {\n    let nodes = node.querySelectorAll('h1, h2, h3, h4, h5, h6, p');\n    if (index === -1) {\n        console.warn('Deprecation warning! index argument will become mandatory in the next version');\n    }\n    let headings = [];\n    for (const el of nodes) {\n        if (el.nodeName.toLowerCase() === 'p') {\n            if (el.innerHTML) {\n                let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n                headings.push({\n                    level: lastLevel + 1,\n                    html: html.replace('¶', ''),\n                    text: el.textContent ? el.textContent : '',\n                    onClick: onClick(el),\n                    type: 'markdown',\n                    cellRef: cellRef,\n                    hasChild: false,\n                    index: index\n                });\n            }\n            continue;\n        }\n        if (el.getElementsByClassName('numbering-entry').length > 0) {\n            el.removeChild(el.getElementsByClassName('numbering-entry')[0]);\n        }\n        let html = sanitizer.sanitize(el.innerHTML, sanitizerOptions);\n        html = html.replace('¶', '');\n        const level = parseInt(el.tagName[1], 10);\n        let nstr = generateNumbering(dict, level);\n        if (numbering) {\n            const nhtml = document.createElement('span');\n            nhtml.classList.add('numbering-entry');\n            nhtml.textContent = nstr !== null && nstr !== void 0 ? nstr : '';\n            el.insertBefore(nhtml, el.firstChild);\n        }\n        headings.push({\n            level: level,\n            text: el.textContent ? el.textContent : '',\n            numbering: nstr,\n            html: html,\n            onClick: onClick(el),\n            type: 'header',\n            cellRef: cellRef,\n            hasChild: false,\n            index: index\n        });\n    }\n    return headings;\n}\n/**\n * Exports.\n */\nexport { getRenderedHTMLHeadings };\n//# sourceMappingURL=get_rendered_html_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns a boolean indicating whether a heading is filtered out by selected tags.\n *\n * @private\n * @param heading - notebook heading\n * @param tags - list of tags\n * @returns boolean indicating whether a heading is filtered\n */\nfunction isHeadingFiltered(heading, tags) {\n    if (tags.length === 0) {\n        return false;\n    }\n    if (heading && heading.cellRef) {\n        let meta = heading.cellRef.model.metadata;\n        let ctags = meta.get('tags');\n        if (ctags) {\n            for (let j = 0; j < ctags.length; j++) {\n                let name = ctags[j];\n                for (let k = 0; k < tags.length; k++) {\n                    if (tags[k] === name) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * Exports.\n */\nexport { isHeadingFiltered };\n//# sourceMappingURL=is_heading_filtered.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @returns result tuple\n */\nfunction appendHeading(headings, heading, prev, collapseLevel, tags) {\n    if (heading && !isHeadingFiltered(heading, tags) && heading.text) {\n        // Determine whether this heading is a child of a \"header\" notebook heading...\n        if (prev && prev.type === 'header') {\n            for (let j = headings.length - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        if (collapseLevel < 0) {\n            headings.push(heading);\n        }\n        prev = heading;\n    }\n    return [headings, prev];\n}\n/**\n * Exports.\n */\nexport { appendHeading };\n//# sourceMappingURL=append_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { appendHeading } from './append_heading';\nimport { appendCollapsibleHeading } from './append_collapsible_heading';\n/**\n * Appends a Markdown notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @param showMarkdown - boolean indicating whether to show Markdown previews\n * @returns result tuple\n */\nfunction appendMarkdownHeading(heading, headings, prev, collapseLevel, tags, collapsed, showMarkdown) {\n    if (heading && heading.type === 'markdown' && showMarkdown) {\n        // Append a Markdown preview heading:\n        [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, tags);\n    }\n    else if (heading && heading.type === 'header') {\n        [headings, prev, collapseLevel] = appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed);\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendMarkdownHeading };\n//# sourceMappingURL=append_markdown_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isHeadingFiltered } from './is_heading_filtered';\n/**\n * Appends a collapsible notebook heading to a list of headings.\n *\n * @private\n * @param headings - list of notebook headings\n * @param heading - rendered heading\n * @param prev - previous heading\n * @param collapseLevel - collapse level\n * @param tags - filter tags\n * @param collapsed - boolean indicating whether a heading is collapsed\n * @returns result tuple\n */\nfunction appendCollapsibleHeading(headings, heading, prev, collapseLevel, tags, collapsed) {\n    const len = headings.length;\n    if (!isHeadingFiltered(heading, tags)) {\n        // If the previous heading is a higher level heading, update the heading to note that it has a child heading...\n        if (prev && prev.type === 'header' && prev.level < heading.level) {\n            for (let j = len - 1; j >= 0; j--) {\n                if (headings[j] === prev) {\n                    // TODO: can a heading be the child of multiple headings? If not, we can `break` here upon finding a parent heading, so we don't traverse the entire heading list...\n                    headings[j].hasChild = true;\n                }\n            }\n        }\n        // If the collapse level doesn't include the heading, or, if there is no collapsing, add to headings and adjust the collapse level...\n        if (collapseLevel >= heading.level || collapseLevel < 0) {\n            headings.push(heading);\n            collapseLevel = collapsed ? heading.level : -1;\n        }\n        prev = heading;\n    }\n    else if (prev && heading.level <= prev.level) {\n        // If the heading is filtered out and has a lower level previous heading, determine if the heading has a parent...\n        let parent = false;\n        let k = len - 1;\n        for (; k >= 0; k--) {\n            if (headings[k].level < heading.level) {\n                prev = headings[k];\n                parent = true;\n                break;\n            }\n        }\n        // If there is no parent, reset collapsing...\n        if (parent) {\n            const isCollapsed = headings[k + 1].cellRef.model.metadata.get('toc-hr-collapsed');\n            collapseLevel = isCollapsed ? headings[k + 1].level : -1;\n        }\n        else {\n            prev = null;\n            collapseLevel = -1;\n        }\n    }\n    return [headings, prev, collapseLevel];\n}\n/**\n * Exports.\n */\nexport { appendCollapsibleHeading };\n//# sourceMappingURL=append_collapsible_heading.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\n/**\n * Class for rendering a code component.\n *\n * @private\n */\nclass CodeComponent extends React.Component {\n    /**\n     * Returns a code component.\n     *\n     * @param props - component properties\n     * @returns code component\n     */\n    constructor(props) {\n        super(props);\n        this.state = { heading: props.heading };\n    }\n    /**\n     * Updates code component state.\n     *\n     * @param props - component properties\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        this.setState({ heading: nextProps.heading });\n    }\n    /**\n     * Renders a code component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        // Get the current rendered CodeMirror:\n        let html = this.state.heading.cellRef.editor.host.innerHTML;\n        // Sanitize the HTML:\n        html = this.props.sanitizer.sanitize(html, sanitizerOptions);\n        return (React.createElement(\"div\", { className: \"cm-toc\", dangerouslySetInnerHTML: { __html: html } }));\n    }\n}\n/**\n * Exports.\n */\nexport { CodeComponent };\n//# sourceMappingURL=codemirror.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\nimport { sanitizerOptions } from '../../utils/sanitizer_options';\nimport { CodeComponent } from './codemirror';\n/**\n * Renders a notebook table of contents item.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns rendered item\n */\nfunction render(options, tracker, item, toc = []) {\n    let jsx;\n    if (item.type === 'markdown' || item.type === 'header') {\n        let fontSizeClass = 'toc-level-size-default';\n        let numbering = item.numbering && options.numbering ? item.numbering : '';\n        if (item.type === 'header') {\n            fontSizeClass = 'toc-level-size-' + item.level;\n        }\n        if (item.html && (item.type === 'header' || options.showMarkdown)) {\n            jsx = (React.createElement(\"span\", { dangerouslySetInnerHTML: {\n                    __html: numbering +\n                        options.sanitizer.sanitize(item.html, sanitizerOptions)\n                }, className: item.type + '-cell toc-cell-item' }));\n            // Render the headers:\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has('toc-hr-collapsed')) {\n                    collapsed = item.cellRef.model.metadata.get('toc-hr-collapsed');\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                // Render the heading item:\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        if (item.type === 'header' || options.showMarkdown) {\n            // Render headers/markdown for plain text:\n            jsx = (React.createElement(\"span\", { className: item.type + '-cell toc-cell-item' }, numbering + item.text));\n            if (item.type === 'header') {\n                let button = (React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(item);\n                    } },\n                    React.createElement(\"div\", { className: \"toc-Collapser-child\" })));\n                let collapsed;\n                if (item.cellRef.model.metadata.has('toc-hr-collapsed')) {\n                    collapsed = item.cellRef.model.metadata.get('toc-hr-collapsed');\n                }\n                let ellipseButton = collapsed ? (React.createElement(\"div\", { className: \"toc-Ellipses\", onClick: (event) => {\n                        event.stopPropagation();\n                        onClick(item);\n                    } },\n                    React.createElement(ellipsesIcon.react, null))) : (React.createElement(\"div\", null));\n                jsx = (React.createElement(\"div\", { className: 'toc-entry-holder ' +\n                        fontSizeClass +\n                        (tracker.activeCell === item.cellRef\n                            ? ' toc-active-cell'\n                            : previousHeader(tracker, item, toc)\n                                ? ' toc-active-cell'\n                                : '') },\n                    button,\n                    jsx,\n                    ellipseButton));\n            }\n            return jsx;\n        }\n        return null;\n    }\n    if (item.type === 'code' && options.showCode) {\n        // Render code cells:\n        return (React.createElement(\"div\", { className: \"toc-code-cell-div\" },\n            React.createElement(\"div\", { className: \"toc-code-cell-prompt\" }, item.prompt),\n            React.createElement(\"span\", { className: 'toc-code-span' },\n                React.createElement(CodeComponent, { sanitizer: options.sanitizer, heading: item }))));\n    }\n    return null;\n    /**\n     * Callback invoked upon encountering a \"click\" event.\n     *\n     * @private\n     * @param heading - notebook heading that was clicked\n     */\n    function onClick(heading) {\n        let collapsed;\n        if (heading.cellRef.model.metadata.has('toc-hr-collapsed')) {\n            collapsed = heading.cellRef.model.metadata.get('toc-hr-collapsed');\n            heading.cellRef.model.metadata.delete('toc-hr-collapsed');\n        }\n        else {\n            collapsed = false;\n            heading.cellRef.model.metadata.set('toc-hr-collapsed', true);\n        }\n        if (heading) {\n            options.updateAndCollapse({\n                heading: heading,\n                collapsedState: collapsed,\n                tocType: 'notebook'\n            });\n            // NOTE: we can imagine a future in which this extension combines with a collapsible-header/ings extension such that we can programmatically close notebook \"sections\" according to a public API specifically intended for collapsing notebook sections. In the meantime, we need to resort to manually \"collapsing\" sections...\n        }\n        else {\n            options.updateWidget();\n        }\n    }\n}\n/**\n * Used to find the nearest above heading to an active notebook cell\n *\n * @private\n * @param tracker - notebook tracker\n * @param item - notebook heading\n * @param toc - current list of notebook headings\n * @returns true if heading is nearest above a selected cell, otherwise false\n */\nfunction previousHeader(tracker, item, toc) {\n    if (item.index > -1 || (toc === null || toc === void 0 ? void 0 : toc.length)) {\n        let activeCellIndex = tracker.currentWidget.content.activeCellIndex;\n        let headerIndex = item.index;\n        // header index has to be less than the active cell index\n        if (headerIndex < activeCellIndex) {\n            let tocIndexOfNextHeader = toc.indexOf(item) + 1;\n            // return true if header is the last header\n            if (tocIndexOfNextHeader >= toc.length) {\n                return true;\n            }\n            // return true if the next header cells index is greater than the active cells index\n            let nextHeaderIndex = toc === null || toc === void 0 ? void 0 : toc[tocIndexOfNextHeader].index;\n            if (nextHeaderIndex > activeCellIndex) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Abstract class defining a React component containing one tag label.\n *\n * @private\n */\nclass TagComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n    }\n    /**\n     * Renders a component.\n     *\n     * @returns rendered component\n     */\n    render() {\n        const tag = this.props.tag;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"label\", { className: \"toc-tag-label\", key: new Date().toLocaleTimeString() }, tag)));\n    }\n}\n/**\n * Exports.\n */\nexport { TagComponent };\n//# sourceMappingURL=tag.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { TagComponent } from './tag';\n/**\n * Class for a React component that renders all tags in a list.\n *\n * @private\n */\nclass TagListComponent extends React.Component {\n    /**\n     * Returns a React component.\n     *\n     * @param props - properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Toggles whether a tag is selected when clicked.\n         *\n         * @param name - tag name\n         */\n        this.selectedTagWithName = (name) => {\n            if (this.props.selectedTags.indexOf(name) >= 0) {\n                this.props.selectionStateHandler(name, false);\n            }\n            else {\n                this.props.selectionStateHandler(name, true);\n            }\n        };\n        /**\n         * Renders a tag component for each tag within a list of tags.\n         *\n         * @param tags - list of tags\n         */\n        this.renderTagComponents = (tags) => {\n            const selectedTags = this.props.selectedTags;\n            const selectedTagWithName = this.selectedTagWithName;\n            return tags.map((tag, index) => {\n                const tagClass = selectedTags.indexOf(tag) >= 0\n                    ? 'toc-selected-tag toc-tag'\n                    : 'toc-unselected-tag toc-tag';\n                return (React.createElement(\"div\", { key: tag, className: tagClass, onClick: event => {\n                        selectedTagWithName(tag);\n                    }, tabIndex: 0 },\n                    React.createElement(TagComponent, { selectionStateHandler: this.props.selectionStateHandler, selectedTags: this.props.selectedTags, tag: tag })));\n            });\n        };\n        this.state = { selected: this.props.selectedTags };\n    }\n    /**\n     * Renders the list of tags in the ToC tags dropdown.\n     *\n     * @returns rendered list\n     */\n    render() {\n        let tags = this.props.tags;\n        let jsx = null;\n        if (tags) {\n            jsx = this.renderTagComponents(tags);\n        }\n        return React.createElement(\"div\", { className: \"toc-tag-holder\" }, jsx);\n    }\n}\n/**\n * Exports.\n */\nexport { TagListComponent };\n//# sourceMappingURL=tag_list.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { TagListComponent } from './tag_list';\n/**\n * Tag dropdown React component.\n *\n * @private\n */\nclass TagsToolComponent extends React.Component {\n    /**\n     * Returns a component.\n     *\n     * @param props - component properties\n     * @returns component\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Changes the dropdown selection state.\n         *\n         * @param newState - new state\n         * @param add - boolean indicating whether to add to selection\n         */\n        this.changeSelectionState = (newState, add) => {\n            let tags = this.state.selected;\n            if (add) {\n                tags.push(newState);\n                this.setState({ selected: tags });\n                this.filterTags(tags);\n            }\n            else {\n                let selected = [];\n                for (let i = 0; i < tags.length; i++) {\n                    if (tags[i] !== newState) {\n                        selected.push(tags[i]);\n                    }\n                }\n                this.setState({ selected: selected });\n                this.filterTags(selected);\n            }\n        };\n        /**\n         * De-selects all tags in the dropdown and clear filters in the ToC.\n         */\n        this.deselectAll = () => {\n            this.setState({ selected: [] });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Filters the ToC by according to selected tags.\n         *\n         * @param selected - selected tags\n         */\n        this.filterTags = (selected) => {\n            this.setState({ selected });\n            this.props.options.updateWidget();\n        };\n        /**\n         * Updates filters.\n         */\n        this.updateFilters = () => {\n            let tmp = [];\n            let idx = 0;\n            let update = false;\n            for (let i = 0; i < this.state.selected.length; i++) {\n                if (this.props.tags.indexOf(this.state.selected[i]) > -1) {\n                    tmp[idx] = this.state.selected[i];\n                    idx += 1;\n                }\n                else if (this.props.options.showTags === true) {\n                    update = true;\n                }\n            }\n            if (update) {\n                this.filterTags(tmp);\n                this.setState({ selected: tmp });\n            }\n        };\n        this.state = {\n            selected: this.props.inputFilter\n        };\n        const translator = this.props.translator || nullTranslator;\n        this._trans = translator.load('jupyterlab');\n    }\n    /**\n     * Returns a list of selected tags.\n     *\n     * @returns tag list\n     */\n    get filtered() {\n        return this.state.selected;\n    }\n    /**\n     * Checks whether a cell has a provided tag.\n     *\n     * @param tag - tag\n     * @param cell - cell reference\n     * @returns boolean indicating whether a cell has a provided tag\n     */\n    containsTag(tag, cell) {\n        if (cell === null) {\n            return false;\n        }\n        let tagList = cell.model.metadata.get('tags');\n        if (tagList) {\n            for (let i = 0; i < tagList.length; i++) {\n                if (tagList[i] === tag) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Updates filters.\n     */\n    UNSAFE_componentWillUpdate() {\n        this.updateFilters();\n    }\n    /**\n     * Renders the interior of the tag dropdown.\n     *\n     * @returns rendered component\n     */\n    render() {\n        let jsx = (React.createElement(\"div\", { className: \"toc-no-tags-div\" }, this._trans.__('No Tags Available')));\n        let text;\n        if (this.state.selected.length === 0) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button-na' }, this._trans.__('Clear Filters')));\n        }\n        else if (this.state.selected.length === 1) {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear 1 Filter\",\n                ' '));\n        }\n        else {\n            text = (React.createElement(\"span\", { className: 'toc-filter-button', onClick: () => this.deselectAll() },\n                ' ',\n                \"Clear \",\n                this.state.selected.length,\n                \" Filters\",\n                ' '));\n        }\n        if (this.props.tags && this.props.tags.length > 0) {\n            jsx = (React.createElement(\"div\", { className: 'toc-tags-container' },\n                React.createElement(TagListComponent, { tags: this.props.tags, selectionStateHandler: this.changeSelectionState, selectedTags: this.state.selected }),\n                text));\n        }\n        return jsx;\n    }\n}\n/**\n * Exports.\n */\nexport { TagsToolComponent };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { isMarkdown } from '../../utils/is_markdown';\nimport { isDOM } from '../../utils/is_dom';\nimport { OptionsManager } from './options_manager';\nimport { getCodeCellHeading } from './get_code_cell_heading';\nimport { getLastHeadingLevel } from './get_last_heading_level';\nimport { getMarkdownHeadings } from './get_markdown_heading';\nimport { getRenderedHTMLHeadings } from './get_rendered_html_heading';\nimport { appendHeading } from './append_heading';\nimport { appendMarkdownHeading } from './append_markdown_heading';\nimport { render } from './render';\nimport { toolbar } from './toolbar_generator';\n/**\n * Returns a ToC generator for notebooks.\n *\n * @private\n * @param tracker - notebook tracker\n * @param widget - table of contents widget\n * @param sanitizer - HTML sanitizer\n * @param translator - Language translator\n * @returns ToC generator capable of parsing notebooks\n */\nfunction createNotebookGenerator(tracker, widget, sanitizer, translator) {\n    const options = new OptionsManager(widget, tracker, {\n        numbering: false,\n        sanitizer: sanitizer,\n        translator: translator || nullTranslator\n    });\n    tracker.activeCellChanged.connect((sender, args) => {\n        widget.update();\n    });\n    return {\n        tracker,\n        usesLatex: true,\n        options: options,\n        toolbarGenerator: generateToolbar,\n        itemRenderer: renderItem,\n        generate: generate,\n        collapseChanged: options.collapseChanged\n    };\n    /**\n     * Returns a toolbar generator.\n     *\n     * @private\n     * @returns toolbar generator\n     */\n    function generateToolbar() {\n        return toolbar(options, tracker);\n    }\n    /**\n     * Renders a table of contents item.\n     *\n     * @private\n     * @param item - heading to render\n     * @param toc - list of all headers to render\n     * @returns rendered item\n     */\n    function renderItem(item, toc = []) {\n        return render(options, tracker, item, toc);\n    }\n    /**\n     * Generates a table of contents.\n     *\n     * @private\n     * @param panel - notebook widget\n     * @returns a list of headings\n     */\n    function generate(panel) {\n        let headings = [];\n        let collapseLevel = -1;\n        let dict = {};\n        // Initialize a variable for keeping track of the previous heading:\n        let prev = null;\n        // Generate headings by iterating through all notebook cells...\n        for (let i = 0; i < panel.content.widgets.length; i++) {\n            let cell = panel.content.widgets[i];\n            let model = cell.model;\n            let collapsed = model.metadata.get('toc-hr-collapsed');\n            collapsed = collapsed || false;\n            if (model.type === 'code') {\n                if (!widget || (widget && options.showCode)) {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    let count = cell.model.executionCount;\n                    let executionCount = count !== null ? '[' + count + ']: ' : '[ ]: ';\n                    let heading = getCodeCellHeading(model.value.text, onClick, executionCount, getLastHeadingLevel(headings), cell, i);\n                    [headings, prev] = appendHeading(headings, heading, prev, collapseLevel, options.filtered);\n                }\n                // Iterate over the code cell outputs to check for Markdown or HTML from which we can generate ToC headings...\n                for (let j = 0; j < model.outputs.length; j++) {\n                    const m = model.outputs.get(j);\n                    let dtypes = Object.keys(m.data);\n                    dtypes = dtypes.filter(t => isMarkdown(t) || isDOM(t));\n                    if (!dtypes.length) {\n                        continue;\n                    }\n                    const onClick = (el) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            panel.content.mode = 'command';\n                            el.scrollIntoView();\n                        };\n                    };\n                    let htmlHeadings = getRenderedHTMLHeadings(cell.outputArea.widgets[j].node, onClick, sanitizer, dict, getLastHeadingLevel(headings), options.numbering, cell, i);\n                    for (const heading of htmlHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown);\n                    }\n                }\n                continue;\n            }\n            if (model.type === 'markdown') {\n                let mcell = cell;\n                let heading;\n                let lastLevel = getLastHeadingLevel(headings);\n                // If the cell is rendered, generate the ToC items from the HTML...\n                if (mcell.rendered && !mcell.inputHidden) {\n                    const onClick = (el) => {\n                        return () => {\n                            if (!mcell.rendered) {\n                                panel.content.activeCellIndex = i;\n                                el.scrollIntoView();\n                            }\n                            else {\n                                panel.content.mode = 'command';\n                                cell.node.scrollIntoView();\n                                panel.content.activeCellIndex = i;\n                            }\n                        };\n                    };\n                    const htmlHeadings = getRenderedHTMLHeadings(cell.node, onClick, sanitizer, dict, lastLevel, options.numbering, cell, i);\n                    for (heading of htmlHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown);\n                    }\n                    // If not rendered, generate ToC items from the cell text...\n                }\n                else {\n                    const onClick = (line) => {\n                        return () => {\n                            panel.content.activeCellIndex = i;\n                            cell.node.scrollIntoView();\n                        };\n                    };\n                    const markdownHeadings = getMarkdownHeadings(model.value.text, onClick, dict, lastLevel, cell, i);\n                    for (heading of markdownHeadings) {\n                        [headings, prev, collapseLevel] = appendMarkdownHeading(heading, headings, prev, collapseLevel, options.filtered, collapsed, options.showMarkdown);\n                    }\n                }\n            }\n        }\n        return headings;\n    }\n}\n/**\n * Exports.\n */\nexport { createNotebookGenerator };\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { codeIcon, markdownIcon, numberingIcon, tagIcon } from '@jupyterlab/ui-components';\nimport { TagsToolComponent } from './tagstool';\n/**\n * Returns a component for rendering a notebook table of contents toolbar.\n *\n * @private\n * @param options - generator options\n * @param tracker - notebook tracker\n * @returns toolbar component\n */\nfunction toolbar(options, tracker) {\n    return class Toolbar extends React.Component {\n        /**\n         * Returns a component for rendering a notebook table of contents toolbar.\n         *\n         * @param props - toolbar properties\n         * @returns toolbar component\n         */\n        constructor(props) {\n            super(props);\n            this._trans = options.translator.load('jupyterlab');\n            this.tagTool = null;\n            this.state = {\n                showCode: true,\n                showMarkdown: false,\n                showTags: false,\n                numbering: false\n            };\n            if (tracker.currentWidget) {\n                // Read saved user settings in notebook meta data:\n                void tracker.currentWidget.context.ready.then(() => {\n                    if (tracker.currentWidget) {\n                        tracker.currentWidget.content.activeCellChanged.connect(() => {\n                            options.updateWidget();\n                        });\n                        const numbering = tracker.currentWidget.model.metadata.get('toc-autonumbering');\n                        const showCode = tracker.currentWidget.model.metadata.get('toc-showcode');\n                        const showMarkdown = tracker.currentWidget.model.metadata.get('toc-showmarkdowntxt');\n                        const showTags = tracker.currentWidget.model.metadata.get('toc-showtags');\n                        options.initializeOptions(numbering || options.numbering, showCode || options.showCode, showMarkdown || options.showMarkdown, showTags || options.showTags);\n                        this.setState({\n                            showCode: options.showCode,\n                            showMarkdown: options.showMarkdown,\n                            showTags: options.showTags,\n                            numbering: options.numbering\n                        });\n                        this.tags = [];\n                    }\n                });\n            }\n        }\n        /**\n         * Toggle whether to show code previews.\n         */\n        toggleCode() {\n            options.showCode = !options.showCode;\n            this.setState({ showCode: options.showCode });\n        }\n        /**\n         * Toggle whether to show Markdown previews.\n         */\n        toggleMarkdown() {\n            options.showMarkdown = !options.showMarkdown;\n            this.setState({ showMarkdown: options.showMarkdown });\n        }\n        /**\n         * Toggle whether to number headings.\n         */\n        toggleNumbering() {\n            options.numbering = !options.numbering;\n            this.setState({ numbering: options.numbering });\n        }\n        /**\n         * Toggle tag dropdown.\n         */\n        toggleTagDropdown() {\n            if (options.showTags && this.tagTool) {\n                options.storeTags = this.tagTool.state.selected;\n            }\n            options.showTags = !options.showTags;\n            this.setState({ showTags: options.showTags });\n        }\n        /**\n         * Loads all document tags.\n         */\n        loadTags() {\n            const notebook = tracker.currentWidget;\n            if (notebook) {\n                const cells = notebook.model.cells;\n                const tags = new Set();\n                this.tags = [];\n                for (let i = 0; i < cells.length; i++) {\n                    const cell = cells.get(i);\n                    const list = cell.metadata.get('tags');\n                    if (Array.isArray(list)) {\n                        list.forEach((tag) => tag && tags.add(tag));\n                    }\n                }\n                this.tags = Array.from(tags);\n            }\n        }\n        /**\n         * Renders a toolbar.\n         *\n         * @returns rendered toolbar\n         */\n        render() {\n            const codeToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleCode(), role: \"text\", \"aria-label\": this._trans.__('Toggle Code Cells'), title: this._trans.__('Toggle Code Cells'), className: this.state.showCode\n                    ? 'toc-toolbar-code-icon toc-toolbar-icon-selected'\n                    : 'toc-toolbar-code-icon toc-toolbar-icon' },\n                React.createElement(codeIcon.react, null)));\n            const markdownToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleMarkdown(), role: \"text\", \"aria-label\": this._trans.__('Toggle Markdown Text Cells'), title: this._trans.__('Toggle Markdown Text Cells'), className: this.state.showMarkdown\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(markdownIcon.react, null)));\n            const numberingToggleIcon = (React.createElement(\"div\", { onClick: event => this.toggleNumbering(), role: \"text\", \"aria-label\": this._trans.__('Toggle Auto-Numbering'), title: this._trans.__('Toggle Auto-Numbering'), className: this.state.numbering\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(numberingIcon.react, null)));\n            let tagDropdown = React.createElement(\"div\", null);\n            let tagToggleIcon = (React.createElement(\"div\", { role: \"text\", \"aria-label\": this._trans.__('Show Tags Menu'), title: this._trans.__('Show Tags Menu'), className: this.state.showTags\n                    ? 'toc-toolbar-icon-selected'\n                    : 'toc-toolbar-icon' },\n                React.createElement(tagIcon.react, null)));\n            if (this.state.showTags) {\n                this.loadTags();\n                const tagTool = (React.createElement(TagsToolComponent, { tags: this.tags, tracker: tracker, options: options, inputFilter: options.storeTags, translator: options.translator, ref: tagTool => (this.tagTool = tagTool) }));\n                options.tagTool = this.tagTool;\n                tagDropdown = React.createElement(\"div\", { className: 'toc-tag-dropdown' },\n                    \" \",\n                    tagTool,\n                    \" \");\n            }\n            return (React.createElement(\"div\", null,\n                React.createElement(\"div\", { className: 'toc-toolbar' },\n                    codeToggleIcon,\n                    markdownToggleIcon,\n                    numberingToggleIcon,\n                    React.createElement(\"div\", { className: 'toc-tag-dropdown-button', onClick: event => this.toggleTagDropdown() }, tagToggleIcon)),\n                tagDropdown));\n        }\n    };\n}\n/**\n * Exports.\n */\nexport { toolbar };\n//# sourceMappingURL=toolbar_generator.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * Returns whether a MIME type corresponds to either HTML or virtual DOM.\n *\n * @private\n * @param mime - MIME type string\n * @returns boolean indicating whether a provided MIME type corresponds to either HTML or virtual DOM\n *\n * @example\n * const bool = isDOM('text/html');\n * // returns true\n *\n * @example\n * const bool = isDOM('text/plain');\n * // returns false\n */\nfunction isDOM(mime) {\n    return mime === 'application/vdom.v1+json' || mime === 'text/html';\n}\n/**\n * Exports.\n */\nexport { isDOM };\n//# sourceMappingURL=is_dom.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * Renders a Python table of contents item.\n *\n * @private\n * @param item - numbered heading\n * @returns rendered item\n */\nfunction render(item) {\n    let fontSizeClass = 'toc-level-size-' + item.level;\n    return (React.createElement(\"div\", { className: fontSizeClass + ' toc-entry-holder' },\n        React.createElement(\"div\", { className: \"jp-Collapser p-Widget lm-Widget\" },\n            React.createElement(\"div\", { className: \"toc-Collapser-child\" })),\n        React.createElement(\"span\", { className: \"header-cell toc-cell-item\" },\n            \" \",\n            item.text,\n            \" \")));\n}\n/**\n * Exports.\n */\nexport { render };\n//# sourceMappingURL=render.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { render } from './render';\n/**\n * Generates a table of contents.\n *\n * @private\n * @param editor - editor widget\n * @returns a list of headings\n */\nfunction generate(editor) {\n    // Split the text into lines:\n    let lines = editor.content.model.value.text.split('\\n');\n    // Iterate over the lines to get the heading level and text for each line:\n    let headings = [];\n    let processingImports = false;\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i].trim();\n        if (line.indexOf('def ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('class ') === 0) {\n            processingImports = false;\n            headings.push({\n                text: line.slice(0, -1),\n                level: 1,\n                onClick: onClick(i)\n            });\n        }\n        else if (line.indexOf('import ') == 0 && !processingImports) {\n            processingImports = true;\n            headings.push({\n                text: line,\n                level: 2,\n                onClick: onClick(i)\n            });\n        }\n    }\n    return headings;\n    /**\n     * Returns a \"click\" handler.\n     *\n     * @private\n     * @param line - line number\n     * @returns click handler\n     */\n    function onClick(line) {\n        return () => {\n            editor.content.editor.setCursorPosition({\n                line: line,\n                column: 0\n            });\n        };\n    }\n}\n/**\n * Returns a boolean indicating whether this ToC generator is enabled.\n *\n * @private\n * @param editor - editor widget\n * @returns boolean indicating whether this ToC generator is enabled\n */\nfunction isEnabled(editor) {\n    let mime = editor.content.model.mimeType;\n    return mime === 'application/x-python-code' || mime === 'text/x-python';\n}\n/**\n * Returns a ToC generator for Python files.\n *\n * @private\n * @param tracker - file editor tracker\n * @returns ToC generator capable of parsing Python files\n */\nfunction createPythonGenerator(tracker) {\n    return {\n        tracker,\n        isEnabled: isEnabled,\n        itemRenderer: render,\n        generate: generate\n    };\n}\n/**\n * Exports.\n */\nexport { createPythonGenerator };\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
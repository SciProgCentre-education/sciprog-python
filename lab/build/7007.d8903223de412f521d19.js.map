{"version":3,"file":"7007.d8903223de412f521d19.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/javascript-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/kernel/lib/tokens.js"],"sourcesContent":["import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        try {\n            const result = this._eval(code);\n            this.publishExecuteResult({\n                execution_count: this.executionCount,\n                data: {\n                    'text/plain': result\n                },\n                metadata: {}\n            });\n            return {\n                status: 'ok',\n                execution_count: this.executionCount,\n                user_expressions: {}\n            };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.publishExecuteError({\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            });\n            return {\n                status: 'error',\n                execution_count: this.executionCount,\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n        }\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter(v => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok'\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    inputReply(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimick ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execut result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        this._history.push([0, 0, content.code]);\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n"],"names":["JavaScriptKernel","constructor","options","super","this","_evalFunc","Function","_ready","PromiseDelegate","_iframe","document","createElement","style","visibility","position","top","onload","async","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","dispose","isDisposed","remove","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","publishExecuteResult","execution_count","executionCount","metadata","user_expressions","stack","message","publishExecuteError","ename","evalue","traceback","_a","_b","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","inputReply","BaseKernel","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","_parent","id","sendMessage","_id","_name","_sendMessage","Promise","emit","_busy","header","msg_type","_kernelInfo","_execute","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","parentHeader","parentHeaderValue","KernelMessage","channel","msgType","session","displayData","inputRequest","updateDisplayData","clearOutput","handleComm","type","buffers","parent","execution_state","kernelInfoRequest","historyMsg","history","_executeInput","executeMsg","push","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","IKernels","Token","IKernelSpecs"],"sourceRoot":""}
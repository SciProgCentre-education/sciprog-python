{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel-extension/lib/index.js"],"names":["JavaScriptKernel","options","super","this","_evalFunc","Function","_ready","PromiseDelegate","_iframe","document","createElement","style","visibility","position","top","onload","async","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","isDisposed","remove","dispose","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","publishExecuteResult","execution_count","executionCount","metadata","user_expressions","stack","message","publishExecuteError","ename","evalue","traceback","_a","_b","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","BaseKernel","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","_parent","id","sendMessage","_id","_name","_sendMessage","Promise","emit","_busy","header","msg_type","_kernelInfo","_execute","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","KernelMessage","channel","msgType","session","parentHeader","type","buffers","parent","execution_state","kernelInfoRequest","historyMsg","history","executeMsg","_executeInput","push","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","IKernels","Token","IKernelSpecs","MIME_TYPE","P5Kernel","_bootstrap","_inputs","_p5Ready","p5Url","ready","then","res","_magics","input","map","c","join","script","re","width","height","autoStart","requires","activate","app","kernelspecs","PageConfig","URLExt","location","origin","register","spec","display_name","language","argv","env","interrupt_mode","resources","create"],"mappings":"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","file":"7801.ad81239ba409f84cebdd.js","sourcesContent":["import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        try {\n            const result = this._eval(code);\n            this.publishExecuteResult({\n                execution_count: this.executionCount,\n                data: {\n                    'text/plain': result\n                },\n                metadata: {}\n            });\n            return {\n                status: 'ok',\n                execution_count: this.executionCount,\n                user_expressions: {}\n            };\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            this.publishExecuteError({\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            });\n            return {\n                status: 'error',\n                execution_count: this.executionCount,\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n        }\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter(v => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok'\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimick ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param content The execut result content.\n     */\n    publishExecuteResult(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param content The error content.\n     */\n    publishExecuteError(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param content The clear_output content.\n     */\n    clearOutput(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content,\n            metadata,\n            buffers\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        this._history.push([0, 0, content.code]);\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { JavaScriptKernel } from '@jupyterlite/javascript-kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The mimetype for mime bundle results\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class P5Kernel extends JavaScriptKernel {\n    /**\n     * Instantiate a new P5Kernel.\n     *\n     * @param options The instantiation options for a new P5Kernel.\n     */\n    constructor(options) {\n        super(options);\n        this._bootstrap = '';\n        this._inputs = [];\n        this._p5Ready = new PromiseDelegate();\n        const { p5Url } = options;\n        this._bootstrap = `\n      import('${p5Url}').then(() => {\n        // create the p5 global instance\n        window.__globalP5 = new p5();\n        return Promise.resolve();\n      })\n    `;\n        // wait for the parent IFrame to be ready\n        super.ready.then(() => {\n            this._eval(this._bootstrap);\n            this._p5Ready.resolve();\n        });\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._p5Ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'p5.js',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'p5js',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A p5.js kernel',\n            help_links: [\n                {\n                    text: 'p5.js Kernel',\n                    url: 'https://github.com/jupyterlite/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        if (code.startsWith('%')) {\n            const res = await this._magics(code);\n            if (res) {\n                this.publishExecuteResult(res);\n                return {\n                    status: 'ok',\n                    execution_count: this.executionCount,\n                    user_expressions: {}\n                };\n            }\n        }\n        const res = super.executeRequest(content);\n        this._inputs.push(code);\n        return res;\n    }\n    /**\n     * Handle magics coming from execute requests.\n     *\n     * @param code The code block to handle.\n     */\n    async _magics(code) {\n        var _a, _b;\n        if (code.startsWith('%show')) {\n            const input = this._inputs.map(c => `window.eval(\\`${c}\\`);`).join('\\n');\n            const script = `\n        ${this._bootstrap}.then(() => {\n          ${input}\n          window.__globalP5._start();\n        })\n      `;\n            // add metadata\n            const re = /^%show(?: (.+)\\s+(.+))?\\s*$/;\n            const matches = code.match(re);\n            const width = (_a = matches === null || matches === void 0 ? void 0 : matches[1]) !== null && _a !== void 0 ? _a : undefined;\n            const height = (_b = matches === null || matches === void 0 ? void 0 : matches[2]) !== null && _b !== void 0 ? _b : undefined;\n            return {\n                execution_count: this.executionCount,\n                data: {\n                    [MIME_TYPE]: [\n                        '<body style=\"overflow: hidden;\">',\n                        `<script>${script}</script>`,\n                        '</body>'\n                    ].join('\\n')\n                },\n                metadata: {\n                    [MIME_TYPE]: {\n                        width,\n                        height\n                    }\n                }\n            };\n        }\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { P5Kernel } from '@jupyterlite/p5-kernel';\n/**\n * The default CDN fallback for p5.js\n */\nconst P5_CDN_URL = 'https://cdn.jsdelivr.net/npm/p5@1.3.1/lib/p5.js';\n/**\n * A plugin to register the p5.js kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/p5-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('p5Url') || P5_CDN_URL;\n        const p5Url = URLExt.isLocal(url) ? URLExt.join(window.location.origin, url) : url;\n        kernelspecs.register({\n            spec: {\n                name: 'p5js',\n                display_name: 'p5.js',\n                language: 'javascript',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'p5.js',\n                    language: 'javascript',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/p5js.png'\n                }\n            },\n            create: async (options) => {\n                return new P5Kernel({\n                    ...options,\n                    p5Url\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}
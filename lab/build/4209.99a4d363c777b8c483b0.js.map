{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/inspector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/splitpanel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/raweditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/plugineditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/pluginlist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/settingeditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"names":["Private","InspectorConnector","DataConnector","editor","translator","super","this","_current","nullTranslator","_editor","_trans","load","request","Promise","resolve","current","window","setTimeout","undefined","errors","_validate","text","data","__","metadata","render","raw","settings","id","schema","version","registry","validator","validateData","composite","user","renderError","error","_a","keyword","params","additionalProperty","message","dataPath","map","join","SplitPanel","arguments","handleMoved","Signal","event","handleEvent","type","emit","ERROR_CLASS","RawEditor","options","orientation","renderer","defaultRenderer","spacing","_canRevert","_canSave","_commandsChanged","_settings","_toolbar","Toolbar","commands","editorFactory","_commands","defaults","_defaults","CodeEditorWrapper","model","CodeEditor","factory","value","mimeType","setOption","_user","config","lineNumbers","addClass","changed","connect","_onTextChanged","_inspector","rendermime","trans","connector","inspector","InspectorPanel","initialContent","handler","InspectionHandler","RenderMimeRegistry","initialFactories","standardRendererFactories","source","createInspector","_onSaveError","onSaveError","addWidget","defaultsEditor","userEditor","_b","plugin","disconnect","_onSettingsChanged","update","relativeSizes","sizes","setRelativeSizes","isDisposed","dispose","_updateToolbar","isDirty","save","then","catch","reason","msg","populateToolbar","refresh","removeClass","validate","annotatedDefaults","revert","widget","Widget","layout","BoxLayout","banner","bar","defaultTitle","node","innerText","insertItem","toolbar","addItem","forEach","name","item","CommandToolbarButton","userTitle","PluginEditor","_stateChanged","StackedLayout","_rawEditor","_onStateChanged","state","JSONExt","isHidden","isAttached","showDialog","title","body","buttons","Dialog","label","result","button","accept","Error","show","hide","stateChanged","console","PluginList","_changed","_scrollTop","_selection","_confirm","confirm","pluginChanged","querySelector","scrollTop","selection","_evtMousedown","addEventListener","removeEventListener","translation","populateList","ul","preventDefault","target","getAttribute","parentElement","getHint","key","hint","properties","default","items","Object","keys","plugins","sort","a","b","localeCompare","sortPlugins","filter","deprecated","editable","length","extensible","additionalProperties","_p","itemTitle","description","icon","iconClass","iconTitle","className","LabIcon","settingsIcon","classes","tag","stylesheet","DEFAULT_LAYOUT","container","SettingEditor","_fetching","_saving","_state","PanelLayout","panel","_panel","instructions","_instructions","list","_list","when","populateInstructionsNode","_when","Array","isArray","all","setStretch","canRevert","canSave","commandsChanged","onAfterAttach","_fetchState","_setState","onCloseRequest","promises","fetch","normalizeState","_saveState","requestAnimationFrame","_setLayout","parent","numberArray","every","x","jupyterIcon","elementPosition","height","width","saved","ISettingEditorTracker","Token"],"mappings":"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","file":"4209.99a4d363c777b8c483b0.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { InspectionHandler, InspectorPanel } from '@jupyterlab/inspector';\nimport { RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Create a raw editor inspector.\n */\nexport function createInspector(editor, rendermime, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const connector = new InspectorConnector(editor, translator);\n    const inspector = new InspectorPanel({\n        initialContent: trans.__('Any errors will be listed here'),\n        translator: translator\n    });\n    const handler = new InspectionHandler({\n        connector,\n        rendermime: rendermime ||\n            new RenderMimeRegistry({\n                initialFactories: standardRendererFactories,\n                translator: translator\n            })\n    });\n    inspector.addClass('jp-SettingsDebug');\n    inspector.source = handler;\n    handler.editor = editor.source;\n    return inspector;\n}\n/**\n * The data connector used to populate a code inspector.\n *\n * #### Notes\n * This data connector debounces fetch requests to throttle them at no more than\n * one request per 100ms. This means that using the connector to populate\n * multiple client objects can lead to missed fetch responses.\n */\nclass InspectorConnector extends DataConnector {\n    constructor(editor, translator) {\n        super();\n        this._current = 0;\n        this.translator = translator || nullTranslator;\n        this._editor = editor;\n        this._trans = this.translator.load('jupyterlab');\n    }\n    /**\n     * Fetch inspection requests.\n     */\n    fetch(request) {\n        return new Promise(resolve => {\n            // Debounce requests at a rate of 100ms.\n            const current = (this._current = window.setTimeout(() => {\n                if (current !== this._current) {\n                    return resolve(undefined);\n                }\n                const errors = this._validate(request.text);\n                if (!errors) {\n                    return resolve({\n                        data: { 'text/markdown': this._trans.__('No errors found') },\n                        metadata: {}\n                    });\n                }\n                resolve({ data: Private.render(errors), metadata: {} });\n            }, 100));\n        });\n    }\n    _validate(raw) {\n        const editor = this._editor;\n        if (!editor.settings) {\n            return null;\n        }\n        const { id, schema, version } = editor.settings;\n        const data = { composite: {}, user: {} };\n        const validator = editor.registry.validator;\n        return validator.validateData({ data, id, raw, schema, version }, false);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Render validation errors as an HTML string.\n     */\n    function render(errors) {\n        return { 'text/markdown': errors.map(renderError).join('') };\n    }\n    Private.render = render;\n    /**\n     * Render an individual validation error as a markdown string.\n     */\n    function renderError(error) {\n        var _a;\n        switch (error.keyword) {\n            case 'additionalProperties':\n                return `**\\`[additional property error]\\`**\n          \\`${(_a = error.params) === null || _a === void 0 ? void 0 : _a.additionalProperty}\\` is not a valid property`;\n            case 'syntax':\n                return `**\\`[syntax error]\\`** *${error.message}*`;\n            case 'type':\n                return `**\\`[type error]\\`**\n          \\`${error.dataPath}\\` ${error.message}`;\n            default:\n                return `**\\`[error]\\`** *${error.message}*`;\n        }\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=inspector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { SplitPanel as SPanel } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\n/**\n * A deprecated split panel that will be removed when the phosphor split panel\n * supports a handle moved signal. See https://github.com/phosphorjs/phosphor/issues/297.\n */\nexport class SplitPanel extends SPanel {\n    constructor() {\n        super(...arguments);\n        /**\n         * Emits when the split handle has moved.\n         */\n        this.handleMoved = new Signal(this);\n    }\n    handleEvent(event) {\n        super.handleEvent(event);\n        if (event.type === 'mouseup') {\n            this.handleMoved.emit(undefined);\n        }\n    }\n}\n//# sourceMappingURL=splitpanel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Toolbar, CommandToolbarButton } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, Widget } from '@lumino/widgets';\nimport { createInspector } from './inspector';\nimport { SplitPanel } from './splitpanel';\n/**\n * A class name added to all raw editors.\n */\nconst RAW_EDITOR_CLASS = 'jp-SettingsRawEditor';\n/**\n * A class name added to the user settings editor.\n */\nconst USER_CLASS = 'jp-SettingsRawEditor-user';\n/**\n * A class name added to the user editor when there are validation errors.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * A raw JSON settings editor.\n */\nexport class RawEditor extends SplitPanel {\n    /**\n     * Create a new plugin editor.\n     */\n    constructor(options) {\n        super({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        });\n        this._canRevert = false;\n        this._canSave = false;\n        this._commandsChanged = new Signal(this);\n        this._settings = null;\n        this._toolbar = new Toolbar();\n        const { commands, editorFactory, registry, translator } = options;\n        this.registry = registry;\n        this.translator = translator || nullTranslator;\n        this._commands = commands;\n        // Create read-only defaults editor.\n        const defaults = (this._defaults = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory\n        }));\n        defaults.editor.model.value.text = '';\n        defaults.editor.model.mimeType = 'text/javascript';\n        defaults.editor.setOption('readOnly', true);\n        // Create read-write user settings editor.\n        const user = (this._user = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory,\n            config: { lineNumbers: true }\n        }));\n        user.addClass(USER_CLASS);\n        user.editor.model.mimeType = 'text/javascript';\n        user.editor.model.value.changed.connect(this._onTextChanged, this);\n        // Create and set up an inspector.\n        this._inspector = createInspector(this, options.rendermime, this.translator);\n        this.addClass(RAW_EDITOR_CLASS);\n        // FIXME-TRANS: onSaveError must have an optional translator?\n        this._onSaveError = options.onSaveError;\n        this.addWidget(Private.defaultsEditor(defaults, this.translator));\n        this.addWidget(Private.userEditor(user, this._toolbar, this._inspector, this.translator));\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevert() {\n        return this._canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSave() {\n        return this._canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._commandsChanged;\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        var _a, _b;\n        return (_b = this._user.editor.model.value.text !== ((_a = this._settings) === null || _a === void 0 ? void 0 : _a.raw)) !== null && _b !== void 0 ? _b : '';\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (!settings && !this._settings) {\n            return;\n        }\n        const samePlugin = settings && this._settings && settings.plugin === this._settings.plugin;\n        if (samePlugin) {\n            return;\n        }\n        const defaults = this._defaults;\n        const user = this._user;\n        // Disconnect old settings change handler.\n        if (this._settings) {\n            this._settings.changed.disconnect(this._onSettingsChanged, this);\n        }\n        if (settings) {\n            this._settings = settings;\n            this._settings.changed.connect(this._onSettingsChanged, this);\n            this._onSettingsChanged();\n        }\n        else {\n            this._settings = null;\n            defaults.editor.model.value.text = '';\n            user.editor.model.value.text = '';\n        }\n        this.update();\n    }\n    /**\n     * Get the relative sizes of the two editor panels.\n     */\n    get sizes() {\n        return this.relativeSizes();\n    }\n    set sizes(sizes) {\n        this.setRelativeSizes(sizes);\n    }\n    /**\n     * The inspectable source editor for user input.\n     */\n    get source() {\n        return this._user.editor;\n    }\n    /**\n     * Dispose of the resources held by the raw editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._defaults.dispose();\n        this._user.dispose();\n    }\n    /**\n     * Revert the editor back to original settings.\n     */\n    revert() {\n        var _a, _b;\n        this._user.editor.model.value.text = (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.raw) !== null && _b !== void 0 ? _b : '';\n        this._updateToolbar(false, false);\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        if (!this.isDirty || !this._settings) {\n            return Promise.resolve(undefined);\n        }\n        const settings = this._settings;\n        const source = this._user.editor.model.value.text;\n        return settings\n            .save(source)\n            .then(() => {\n            this._updateToolbar(false, false);\n        })\n            .catch(reason => {\n            this._updateToolbar(true, false);\n            this._onSaveError(reason, this.translator);\n        });\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        Private.populateToolbar(this._commands, this._toolbar);\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        if (settings) {\n            defaults.editor.refresh();\n            user.editor.refresh();\n        }\n    }\n    /**\n     * Handle text changes in the underlying editor.\n     */\n    _onTextChanged() {\n        const raw = this._user.editor.model.value.text;\n        const settings = this._settings;\n        this.removeClass(ERROR_CLASS);\n        // If there are no settings loaded or there are no changes, bail.\n        if (!settings || settings.raw === raw) {\n            this._updateToolbar(false, false);\n            return;\n        }\n        const errors = settings.validate(raw);\n        if (errors) {\n            this.addClass(ERROR_CLASS);\n            this._updateToolbar(true, false);\n            return;\n        }\n        this._updateToolbar(true, true);\n    }\n    /**\n     * Handle updates to the settings.\n     */\n    _onSettingsChanged() {\n        var _a, _b;\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        defaults.editor.model.value.text = (_a = settings === null || settings === void 0 ? void 0 : settings.annotatedDefaults()) !== null && _a !== void 0 ? _a : '';\n        user.editor.model.value.text = (_b = settings === null || settings === void 0 ? void 0 : settings.raw) !== null && _b !== void 0 ? _b : '';\n    }\n    _updateToolbar(revert = this._canRevert, save = this._canSave) {\n        const commands = this._commands;\n        this._canRevert = revert;\n        this._canSave = save;\n        this._commandsChanged.emit([commands.revert, commands.save]);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns the wrapped setting defaults editor.\n     */\n    function defaultsEditor(editor, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        const bar = new Toolbar();\n        const defaultTitle = trans.__('System Defaults');\n        banner.node.innerText = defaultTitle;\n        bar.insertItem(0, 'banner', banner);\n        layout.addWidget(bar);\n        layout.addWidget(editor);\n        return widget;\n    }\n    Private.defaultsEditor = defaultsEditor;\n    /**\n     * Populate the raw editor toolbar.\n     */\n    function populateToolbar(commands, toolbar) {\n        const { registry, revert, save } = commands;\n        toolbar.addItem('spacer', Toolbar.createSpacerItem());\n        // Note the button order. The rationale here is that no matter what state\n        // the toolbar is in, the relative location of the revert button in the\n        // toolbar remains the same.\n        [revert, save].forEach(name => {\n            const item = new CommandToolbarButton({ commands: registry, id: name });\n            toolbar.addItem(name, item);\n        });\n    }\n    Private.populateToolbar = populateToolbar;\n    /**\n     * Returns the wrapped user overrides editor.\n     */\n    function userEditor(editor, toolbar, inspector, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const userTitle = trans.__('User Preferences');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        banner.node.innerText = userTitle;\n        toolbar.insertItem(0, 'banner', banner);\n        layout.addWidget(toolbar);\n        layout.addWidget(editor);\n        layout.addWidget(inspector);\n        return widget;\n    }\n    Private.userEditor = userEditor;\n})(Private || (Private = {}));\n//# sourceMappingURL=raweditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, StackedLayout } from '@lumino/widgets';\nimport { RawEditor } from './raweditor';\n/**\n * The class name added to all plugin editors.\n */\nconst PLUGIN_EDITOR_CLASS = 'jp-PluginEditor';\n/**\n * An individual plugin settings editor.\n */\nexport class PluginEditor extends Widget {\n    /**\n     * Create a new plugin editor.\n     *\n     * @param options - The plugin editor instantiation options.\n     */\n    constructor(options) {\n        super();\n        this._settings = null;\n        this._stateChanged = new Signal(this);\n        this.addClass(PLUGIN_EDITOR_CLASS);\n        const { commands, editorFactory, registry, rendermime, translator } = options;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // TODO: Remove this layout. We were using this before when we\n        // when we had a way to switch between the raw and table editor\n        // Now, the raw editor is the only child and probably could merged into\n        // this class directly in the future.\n        const layout = (this.layout = new StackedLayout());\n        const { onSaveError } = Private;\n        this.raw = this._rawEditor = new RawEditor({\n            commands,\n            editorFactory,\n            onSaveError,\n            registry,\n            rendermime,\n            translator\n        });\n        this._rawEditor.handleMoved.connect(this._onStateChanged, this);\n        layout.addWidget(this._rawEditor);\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        return this._rawEditor.isDirty;\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (this._settings === settings) {\n            return;\n        }\n        const raw = this._rawEditor;\n        this._settings = raw.settings = settings;\n        this.update();\n    }\n    /**\n     * The plugin editor layout state.\n     */\n    get state() {\n        const plugin = this._settings ? this._settings.id : '';\n        const { sizes } = this._rawEditor;\n        return { plugin, sizes };\n    }\n    set state(state) {\n        if (JSONExt.deepEqual(this.state, state)) {\n            return;\n        }\n        this._rawEditor.sizes = state.sizes;\n        this.update();\n    }\n    /**\n     * A signal that emits when editor layout state changes and needs to be saved.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * If the editor is in a dirty state, confirm that the user wants to leave.\n     */\n    confirm() {\n        if (this.isHidden || !this.isAttached || !this.isDirty) {\n            return Promise.resolve(undefined);\n        }\n        return showDialog({\n            title: this._trans.__('You have unsaved changes.'),\n            body: this._trans.__('Do you want to leave without saving?'),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.okButton({ label: this._trans.__('Ok') })\n            ]\n        }).then(result => {\n            if (!result.button.accept) {\n                throw new Error('User canceled.');\n            }\n        });\n    }\n    /**\n     * Dispose of the resources held by the plugin editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._rawEditor.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const raw = this._rawEditor;\n        const settings = this._settings;\n        if (!settings) {\n            this.hide();\n            return;\n        }\n        this.show();\n        raw.show();\n    }\n    /**\n     * Handle layout state changes that need to be saved.\n     */\n    _onStateChanged() {\n        this.stateChanged.emit(undefined);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle save errors.\n     */\n    function onSaveError(reason, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        console.error(`Saving setting editor value failed: ${reason.message}`);\n        void showDialog({\n            title: trans.__('Your changes were not saved.'),\n            body: reason.message,\n            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n        });\n    }\n    Private.onSaveError = onSaveError;\n})(Private || (Private = {}));\n//# sourceMappingURL=plugineditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, LabIcon, settingsIcon } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * A list of plugins with editable settings.\n */\nexport class PluginList extends Widget {\n    /**\n     * Create a new plugin list.\n     */\n    constructor(options) {\n        super();\n        this._changed = new Signal(this);\n        this._scrollTop = 0;\n        this._selection = '';\n        this.registry = options.registry;\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-PluginList');\n        this._confirm = options.confirm;\n        this.registry.pluginChanged.connect(() => {\n            this.update();\n        }, this);\n    }\n    /**\n     * A signal emitted when a list user interaction happens.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get scrollTop() {\n        var _a;\n        return (_a = this.node.querySelector('ul')) === null || _a === void 0 ? void 0 : _a.scrollTop;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get selection() {\n        return this._selection;\n    }\n    set selection(selection) {\n        if (this._selection === selection) {\n            return;\n        }\n        this._selection = selection;\n        this.update();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the plugin list's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        this.node.addEventListener('mousedown', this);\n        this.update();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        this.node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const { node, registry } = this;\n        const selection = this._selection;\n        const translation = this.translator;\n        Private.populateList(registry, selection, node, translation);\n        const ul = node.querySelector('ul');\n        if (ul && this._scrollTop !== undefined) {\n            ul.scrollTop = this._scrollTop;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the plugin list.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMousedown(event) {\n        event.preventDefault();\n        let target = event.target;\n        let id = target.getAttribute('data-id');\n        if (id === this._selection) {\n            return;\n        }\n        if (!id) {\n            while (!id && target !== this.node) {\n                target = target.parentElement;\n                id = target.getAttribute('data-id');\n            }\n        }\n        if (!id) {\n            return;\n        }\n        this._confirm()\n            .then(() => {\n            this._scrollTop = this.scrollTop;\n            this._selection = id;\n            this._changed.emit(undefined);\n            this.update();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_KEY = 'jupyter.lab.setting-icon';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_CLASS_KEY = 'jupyter.lab.setting-icon-class';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon label of a plugin.\n     */\n    const ICON_LABEL_KEY = 'jupyter.lab.setting-icon-label';\n    /**\n     * Check the plugin for a rendering hint's value.\n     *\n     * #### Notes\n     * The order of priority for overridden hints is as follows, from most\n     * important to least:\n     * 1. Data set by the end user in a settings file.\n     * 2. Data set by the plugin author as a schema default.\n     * 3. Data set by the plugin author as a top-level key of the schema.\n     */\n    function getHint(key, registry, plugin) {\n        // First, give priority to checking if the hint exists in the user data.\n        let hint = plugin.data.user[key];\n        // Second, check to see if the hint exists in composite data, which folds\n        // in default values from the schema.\n        if (!hint) {\n            hint = plugin.data.composite[key];\n        }\n        // Third, check to see if the plugin schema has defined the hint.\n        if (!hint) {\n            hint = plugin.schema[key];\n        }\n        // Finally, use the defaults from the registry schema.\n        if (!hint) {\n            const { properties } = registry.schema;\n            hint = properties && properties[key] && properties[key].default;\n        }\n        return typeof hint === 'string' ? hint : '';\n    }\n    /**\n     * Populate the plugin list.\n     */\n    function populateList(registry, selection, node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const plugins = sortPlugins(registry).filter(plugin => {\n            const { schema } = plugin;\n            const deprecated = schema['jupyter.lab.setting-deprecated'] === true;\n            const editable = Object.keys(schema.properties || {}).length > 0;\n            const extensible = schema.additionalProperties !== false;\n            return !deprecated && (editable || extensible);\n        });\n        const items = plugins.map(plugin => {\n            const { id, schema, version } = plugin;\n            const title = typeof schema.title === 'string'\n                ? trans._p('schema', schema.title)\n                : id;\n            const description = typeof schema.description === 'string'\n                ? trans._p('schema', schema.description)\n                : '';\n            const itemTitle = `${description}\\n${id}\\n${version}`;\n            const icon = getHint(ICON_KEY, registry, plugin);\n            const iconClass = getHint(ICON_CLASS_KEY, registry, plugin);\n            const iconTitle = getHint(ICON_LABEL_KEY, registry, plugin);\n            return (React.createElement(\"li\", { className: id === selection ? 'jp-mod-selected' : '', \"data-id\": id, key: id, title: itemTitle },\n                React.createElement(LabIcon.resolveReact, { icon: icon || (iconClass ? undefined : settingsIcon), iconClass: classes(iconClass, 'jp-Icon'), title: iconTitle, tag: \"span\", stylesheet: \"settingsEditor\" }),\n                React.createElement(\"span\", null, title)));\n        });\n        ReactDOM.unmountComponentAtNode(node);\n        ReactDOM.render(React.createElement(\"ul\", null, items), node);\n    }\n    Private.populateList = populateList;\n    /**\n     * Sort a list of plugins by title and ID.\n     */\n    function sortPlugins(registry) {\n        return Object.keys(registry.plugins)\n            .map(plugin => registry.plugins[plugin])\n            .sort((a, b) => {\n            return (a.schema.title || a.id).localeCompare(b.schema.title || b.id);\n        });\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=pluginlist.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { jupyterIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { PluginEditor } from './plugineditor';\nimport { PluginList } from './pluginlist';\nimport { SplitPanel } from './splitpanel';\n/**\n * The ratio panes in the setting editor.\n */\nconst DEFAULT_LAYOUT = {\n    sizes: [1, 3],\n    container: {\n        editor: 'raw',\n        plugin: '',\n        sizes: [1, 1]\n    }\n};\n/**\n * An interface for modifying and saving application settings.\n */\nexport class SettingEditor extends Widget {\n    /**\n     * Create a new setting editor.\n     */\n    constructor(options) {\n        super();\n        this._fetching = null;\n        this._saving = false;\n        this._state = JSONExt.deepCopy(DEFAULT_LAYOUT);\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-SettingEditor');\n        this.key = options.key;\n        this.state = options.state;\n        const { commands, editorFactory, rendermime } = options;\n        const layout = (this.layout = new PanelLayout());\n        const registry = (this.registry = options.registry);\n        const panel = (this._panel = new SplitPanel({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        }));\n        const instructions = (this._instructions = new Widget());\n        const editor = (this._editor = new PluginEditor({\n            commands,\n            editorFactory,\n            registry,\n            rendermime,\n            translator: this.translator\n        }));\n        const confirm = () => editor.confirm();\n        const list = (this._list = new PluginList({\n            confirm,\n            registry,\n            translator: this.translator\n        }));\n        const when = options.when;\n        instructions.addClass('jp-SettingEditorInstructions');\n        Private.populateInstructionsNode(instructions.node, this.translator);\n        if (when) {\n            this._when = Array.isArray(when) ? Promise.all(when) : when;\n        }\n        panel.addClass('jp-SettingEditor-main');\n        layout.addWidget(panel);\n        panel.addWidget(list);\n        panel.addWidget(instructions);\n        SplitPanel.setStretch(list, 0);\n        SplitPanel.setStretch(instructions, 1);\n        SplitPanel.setStretch(editor, 1);\n        editor.stateChanged.connect(this._onStateChanged, this);\n        list.changed.connect(this._onStateChanged, this);\n        panel.handleMoved.connect(this._onStateChanged, this);\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevertRaw() {\n        return this._editor.raw.canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSaveRaw() {\n        return this._editor.raw.canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._editor.raw.commandsChanged;\n    }\n    /**\n     * The currently loaded settings.\n     */\n    get settings() {\n        return this._editor.settings;\n    }\n    /**\n     * The inspectable raw user editor source for the currently loaded settings.\n     */\n    get source() {\n        return this._editor.raw.source;\n    }\n    /**\n     * Dispose of the resources held by the setting editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._editor.dispose();\n        this._instructions.dispose();\n        this._list.dispose();\n        this._panel.dispose();\n    }\n    /**\n     * Revert raw editor back to original settings.\n     */\n    revert() {\n        this._editor.raw.revert();\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        return this._editor.raw.save();\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._panel.hide();\n        this._fetchState()\n            .then(() => {\n            this._panel.show();\n            this._setState();\n        })\n            .catch(reason => {\n            console.error('Fetching setting editor state failed', reason);\n            this._panel.show();\n            this._setState();\n        });\n    }\n    /**\n     * Handle `'close-request'` messages.\n     */\n    onCloseRequest(msg) {\n        this._editor\n            .confirm()\n            .then(() => {\n            super.onCloseRequest(msg);\n            this.dispose();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n    /**\n     * Get the state of the panel.\n     */\n    _fetchState() {\n        if (this._fetching) {\n            return this._fetching;\n        }\n        const { key, state } = this;\n        const promises = [state.fetch(key), this._when];\n        return (this._fetching = Promise.all(promises).then(([value]) => {\n            this._fetching = null;\n            if (this._saving) {\n                return;\n            }\n            this._state = Private.normalizeState(value, this._state);\n        }));\n    }\n    /**\n     * Handle root level layout state changes.\n     */\n    async _onStateChanged() {\n        this._state.sizes = this._panel.relativeSizes();\n        this._state.container = this._editor.state;\n        this._state.container.plugin = this._list.selection;\n        try {\n            await this._saveState();\n        }\n        catch (error) {\n            console.error('Saving setting editor state failed', error);\n        }\n        this._setState();\n    }\n    /**\n     * Set the state of the setting editor.\n     */\n    async _saveState() {\n        const { key, state } = this;\n        const value = this._state;\n        this._saving = true;\n        try {\n            await state.save(key, value);\n            this._saving = false;\n        }\n        catch (error) {\n            this._saving = false;\n            throw error;\n        }\n    }\n    /**\n     * Set the layout sizes.\n     */\n    _setLayout() {\n        const editor = this._editor;\n        const panel = this._panel;\n        const state = this._state;\n        editor.state = state.container;\n        // Allow the message queue (which includes fit requests that might disrupt\n        // setting relative sizes) to clear before setting sizes.\n        requestAnimationFrame(() => {\n            panel.setRelativeSizes(state.sizes);\n        });\n    }\n    /**\n     * Set the presets of the setting editor.\n     */\n    _setState() {\n        const editor = this._editor;\n        const list = this._list;\n        const panel = this._panel;\n        const { container } = this._state;\n        if (!container.plugin) {\n            editor.settings = null;\n            list.selection = '';\n            this._setLayout();\n            return;\n        }\n        if (editor.settings && editor.settings.id === container.plugin) {\n            this._setLayout();\n            return;\n        }\n        const instructions = this._instructions;\n        this.registry\n            .load(container.plugin)\n            .then(settings => {\n            if (instructions.isAttached) {\n                instructions.parent = null;\n            }\n            if (!editor.isAttached) {\n                panel.addWidget(editor);\n            }\n            editor.settings = settings;\n            list.selection = container.plugin;\n            this._setLayout();\n        })\n            .catch(reason => {\n            console.error(`Loading ${container.plugin} settings failed.`, reason);\n            list.selection = this._state.container.plugin = '';\n            editor.settings = null;\n            this._setLayout();\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Populate the instructions text node.\n     */\n    function populateInstructionsNode(node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        ReactDOM.render(React.createElement(React.Fragment, null,\n            React.createElement(\"h2\", null,\n                React.createElement(jupyterIcon.react, { className: \"jp-SettingEditorInstructions-icon\", tag: \"span\", elementPosition: \"center\", height: \"auto\", width: \"60px\" }),\n                React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-title\" }, \"Settings\")),\n            React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-text\" }, trans.__('Select a plugin from the list to view and edit its preferences.'))), node);\n    }\n    Private.populateInstructionsNode = populateInstructionsNode;\n    /**\n     * Return a normalized restored layout state that defaults to the presets.\n     */\n    function normalizeState(saved, current) {\n        if (!saved) {\n            return JSONExt.deepCopy(DEFAULT_LAYOUT);\n        }\n        if (!('sizes' in saved) || !numberArray(saved.sizes)) {\n            saved.sizes = JSONExt.deepCopy(DEFAULT_LAYOUT.sizes);\n        }\n        if (!('container' in saved)) {\n            saved.container = JSONExt.deepCopy(DEFAULT_LAYOUT.container);\n            return saved;\n        }\n        const container = 'container' in saved &&\n            saved.container &&\n            typeof saved.container === 'object'\n            ? saved.container\n            : {};\n        saved.container = {\n            plugin: typeof container.plugin === 'string'\n                ? container.plugin\n                : DEFAULT_LAYOUT.container.plugin,\n            sizes: numberArray(container.sizes)\n                ? container.sizes\n                : JSONExt.deepCopy(DEFAULT_LAYOUT.container.sizes)\n        };\n        return saved;\n    }\n    Private.normalizeState = normalizeState;\n    /**\n     * Tests whether an array consists exclusively of numbers.\n     */\n    function numberArray(value) {\n        return Array.isArray(value) && value.every(x => typeof x === 'number');\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=settingeditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}
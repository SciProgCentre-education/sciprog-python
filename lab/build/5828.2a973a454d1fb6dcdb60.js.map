{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/property-inspector/lib/token.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/property-inspector/lib/index.js"],"names":["IPropertyInspectorProvider","Token","PropertyInspectorProvider","Widget","super","this","_tracker","FocusTracker","_inspectors","Map","addClass","currentChanged","connect","_onCurrentChanged","widget","has","Error","inspector","Private","PropertyInspector","disposed","_onWidgetDisposed","set","onAction","_onInspectorAction","add","currentWidget","current","setContent","get","content","sender","dispose","delete","action","owner","remove","showPanel","SideBarPropertyInspectorProvider","labshell","placeholder","translator","_labshell","nullTranslator","_trans","load","layout","SingletonLayout","_placeholder","node","document","createElement","textContent","__","className","appendChild","_onShellCurrentChanged","removeClass","removeWidget","activateById","id","currentShell","contains","refresh","_isDisposed","_content","_owner","_onAction","Signal","emit","ReactWidget"],"mappings":"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","file":"5828.2a973a454d1fb6dcdb60.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The property inspector provider token.\n */\nexport const IPropertyInspectorProvider = new Token('@jupyterlab/property-inspector:IPropertyInspectorProvider');\n//# sourceMappingURL=token.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module property-inspector\n */\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, FocusTracker, SingletonLayout } from '@lumino/widgets';\nimport { IPropertyInspectorProvider } from './token';\nexport { IPropertyInspectorProvider };\n/**\n * The implementation of the PropertyInspector.\n */\nclass PropertyInspectorProvider extends Widget {\n    /**\n     * Construct a new Property Inspector.\n     */\n    constructor() {\n        super();\n        this._tracker = new FocusTracker();\n        this._inspectors = new Map();\n        this.addClass('jp-PropertyInspector');\n        this._tracker = new FocusTracker();\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n    }\n    /**\n     * Register a widget in the property inspector provider.\n     *\n     * @param widget The owner widget to register.\n     */\n    register(widget) {\n        if (this._inspectors.has(widget)) {\n            throw new Error('Widget is already registered');\n        }\n        const inspector = new Private.PropertyInspector(widget);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n        this._inspectors.set(widget, inspector);\n        inspector.onAction.connect(this._onInspectorAction, this);\n        this._tracker.add(widget);\n        return inspector;\n    }\n    /**\n     * The current widget being tracked by the inspector.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Refresh the content for the current widget.\n     */\n    refresh() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const inspector = this._inspectors.get(current);\n        if (inspector) {\n            this.setContent(inspector.content);\n        }\n    }\n    /**\n     * Handle the disposal of a widget.\n     */\n    _onWidgetDisposed(sender) {\n        const inspector = this._inspectors.get(sender);\n        if (inspector) {\n            inspector.dispose();\n            this._inspectors.delete(sender);\n        }\n    }\n    /**\n     * Handle inspector actions.\n     */\n    _onInspectorAction(sender, action) {\n        const owner = sender.owner;\n        const current = this._tracker.currentWidget;\n        switch (action) {\n            case 'content':\n                if (current === owner) {\n                    this.setContent(sender.content);\n                }\n                break;\n            case 'dispose':\n                if (owner) {\n                    this._tracker.remove(owner);\n                    this._inspectors.delete(owner);\n                }\n                break;\n            case 'show-panel':\n                if (current === owner) {\n                    this.showPanel();\n                }\n                break;\n            default:\n                throw new Error('Unsupported inspector action');\n        }\n    }\n    /**\n     * Handle a change to the current widget in the tracker.\n     */\n    _onCurrentChanged() {\n        const current = this._tracker.currentWidget;\n        if (current) {\n            const inspector = this._inspectors.get(current);\n            const content = inspector.content;\n            this.setContent(content);\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A class that adds a property inspector provider to the\n * JupyterLab sidebar.\n */\nexport class SideBarPropertyInspectorProvider extends PropertyInspectorProvider {\n    /**\n     * Construct a new Side Bar Property Inspector.\n     */\n    constructor(labshell, placeholder, translator) {\n        super();\n        this._labshell = labshell;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        const layout = (this.layout = new SingletonLayout());\n        if (placeholder) {\n            this._placeholder = placeholder;\n        }\n        else {\n            const node = document.createElement('div');\n            const content = document.createElement('div');\n            content.textContent = this._trans.__('No properties to inspect.');\n            content.className = 'jp-PropertyInspector-placeholderContent';\n            node.appendChild(content);\n            this._placeholder = new Widget({ node });\n            this._placeholder.addClass('jp-PropertyInspector-placeholder');\n        }\n        layout.widget = this._placeholder;\n        labshell.currentChanged.connect(this._onShellCurrentChanged, this);\n        this._onShellCurrentChanged();\n    }\n    /**\n     * Set the content of the sidebar panel.\n     */\n    setContent(content) {\n        const layout = this.layout;\n        if (layout.widget) {\n            layout.widget.removeClass('jp-PropertyInspector-content');\n            layout.removeWidget(layout.widget);\n        }\n        if (!content) {\n            content = this._placeholder;\n        }\n        content.addClass('jp-PropertyInspector-content');\n        layout.widget = content;\n    }\n    /**\n     * Show the sidebar panel.\n     */\n    showPanel() {\n        this._labshell.activateById(this.id);\n    }\n    /**\n     * Handle the case when the current widget is not in our tracker.\n     */\n    _onShellCurrentChanged() {\n        const current = this.currentWidget;\n        if (!current) {\n            this.setContent(null);\n            return;\n        }\n        const currentShell = this._labshell.currentWidget;\n        if (currentShell === null || currentShell === void 0 ? void 0 : currentShell.node.contains(current.node)) {\n            this.refresh();\n        }\n        else {\n            this.setContent(null);\n        }\n    }\n}\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An implementation of the property inspector used by the\n     * property inspector provider.\n     */\n    class PropertyInspector {\n        /**\n         * Construct a new property inspector.\n         */\n        constructor(owner) {\n            this._isDisposed = false;\n            this._content = null;\n            this._owner = null;\n            this._onAction = new Signal(this);\n            this._owner = owner;\n        }\n        /**\n         * The owner widget for the property inspector.\n         */\n        get owner() {\n            return this._owner;\n        }\n        /**\n         * The current content for the property inspector.\n         */\n        get content() {\n            return this._content;\n        }\n        /**\n         * Whether the property inspector is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * A signal used for actions related to the property inspector.\n         */\n        get onAction() {\n            return this._onAction;\n        }\n        /**\n         * Show the property inspector panel.\n         */\n        showPanel() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._onAction.emit('show-panel');\n        }\n        /**\n         * Render the property inspector content.\n         */\n        render(widget) {\n            if (this._isDisposed) {\n                return;\n            }\n            if (widget instanceof Widget) {\n                this._content = widget;\n            }\n            else {\n                this._content = ReactWidget.create(widget);\n            }\n            this._onAction.emit('content');\n        }\n        /**\n         * Dispose of the property inspector.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._content = null;\n            this._owner = null;\n            Signal.clearData(this);\n        }\n    }\n    Private.PropertyInspector = PropertyInspector;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
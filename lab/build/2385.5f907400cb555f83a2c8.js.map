{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/search.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"names":["BREADCRUMB_HOME_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","options","super","this","translator","nullTranslator","_trans","load","_model","model","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","node","appendChild","Crumb","Home","refreshed","connect","update","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","msg","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","localPath","manager","services","contents","path","updateCrumbs","button","target","classList","contains","index","ArrayExt","value","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","parentElement","mimeData","hasData","ElementExt","clientX","clientY","Current","add","dropTarget","DOMUtils","remove","dropAction","proposedAction","PathExt","promises","oldPaths","getData","oldPath","localOldPath","name","newPath","push","renameFile","Promise","all","err","breadcrumbs","separators","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","join","title","Parent","textContent","parent","home","folderIcon","className","tag","PageConfig","stylesheet","ellipsis","ellipsesIcon","document","createElement","current","items","i","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","MODIFIED_COLUMN_HIDDEN","SELECTED_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","_hiddenColumns","Set","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","filter","ArrayIterator","state","sort","_doRename","_copy","resolve","undefined","basePath","each","rename","copy","removeClass","then","_p","message","_n","result","showDialog","body","buttons","Dialog","label","isDisposed","accept","_delete","map","selectedItems","toArray","download","paths","sessions","session","shutdown","id","keepExisting","selected","keys","_selectItem","contentNode","prefix","toLowerCase","substr","hitTestNodes","focus","refresh","Error","MessageLoop","_evtMousedown","_evtMouseup","_evtMousemove","_evtKeydown","_evtDblClick","_evtNativeDrop","_evtScroll","content","sortState","nodes","pop","createItemNode","forEach","ft","registry","getFileTypeForModel","updateItemNode","setAttribute","_a","kernel","specs","spec","kernelspecs","display_name","width","getBoundingClientRect","toggleClass","visible","delete","innerHTML","header","handleHeaderClick","scrollLeft","blur","clearTimeout","handleFileSelect","ctrlKey","pressX","pressY","metaKey","shiftKey","clearSelectedItems","_focusSelectedFile","data","dx","Math","abs","dy","_startDrag","emit","openOrReveal","keyCode","altKey","handleOpen","selectPrevious","selectNext","window","setTimeout","selectByPrefix","_b","_c","files","dataTransfer","webkitGetAsEntry","isDirectory","console","log","upload","selectedPaths","source","find","dragImage","createDragImage","Drag","MimeData","supportedActions","setData","withContent","async","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","promise","prevWidget","ref","mode","start","action","_handleMultiSelect","text","nearestIndex","indexOf","deleteFile","row","nameNode","getNameNode","original","doRename","newName","isValidFileName","selectItemByName","existing","isVisible","sender","args","newValue","basename","Renderer","tabIndex","hiddenColumns","trans","createHeaderItemNode","narrow","modified","has","call","updateCaret","modifiedIcon","nameIcon","icon","fileType","DocumentRegistry","iconClass","iconContainer","LabIcon","classes","container","hoverText","size","formatFileSize","dirname","created","Time","Date","last_modified","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","h","VirtualDOM","modText","modTitle","count","cloneNode","iconLabel","edit","replaceChild","lastIndexOf","setSelectionRange","reject","onblur","onkeydown","selectionStart","selectionEnd","a","b","t1","t2","valA","getTime","valB","localeCompare","bytes","decimalPoint","k","dm","sizes","floor","parseFloat","pow","toFixed","String","float","caretDownIcon","caretUpIcon","element","Uploader","ToolbarButton","fileUploadIcon","onClick","_input","click","tooltip","translateToolTip","_onInputChanged","pending","Array","prototype","file","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FilterBox","props","setFilter","useState","forceRefresh","useEffect","listing","InputGroup","rightIcon","placeholder","onChange","e","useFuzzyFilter","score","query","Infinity","rgx","rgxMatch","exec","fuzzySearch","x","FilenameSearcher","ReactWidget","FILTERBOX_CLASS","FileBrowser","_showLastModifiedColumn","_useFuzzyFilter","connectionFailure","_onConnectionFailure","crumbs","toolbar","Toolbar","_directoryPending","newFolder","newFolderIcon","createNewDirectory","uploader","refresher","refreshIcon","addItem","createDirListing","_filenameSearcher","layout","PanelLayout","addWidget","restore","_navigateToCurrentDirectory","setColumnVisibility","warn","removeWidget","cut","paste","newUntitled","_filePending","ext","duplicate","shutdownKernels","modelForClick","ServerConnection","response","status","IFileBrowserFactory","Token","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","_pending","_pendingPath","_refreshed","_sessions","_state","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","driveName","rootPath","mimetype","format","refreshInterval","onFileChanged","runningChanged","onRunningChanged","_unloadEventListener","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","max","standby","tick","resolvePath","oldValue","handleContents","save","running","url","getDownloadUrl","href","populate","ready","fetch","serverVersion","supportsChunked","largeFile","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadInner","blob","chunk","reader","FileReader","readAsDataURL","onload","onerror","uploadIndex","finalModel","progress","end","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","FilterFileBrowserModel","_filter","FileDialog","getOpenFiles","dialogOptions","focusNodeSelector","host","OpenDialog","launch","getExistingDirectory","assign","_browser","createFilteredFileBrowser","FileUploadComponent","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browser","browserModel","_tracker","currentChanged","complete","disconnect","VDomModel","browse","uploads","idx","val","stateChanged","_browserModel","oldBrowserModel","uploadChanged"],"mappings":"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","file":"2385.5f907400cb555f83a2c8.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt } from '@lumino/algorithm';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, folderIcon } from '@jupyterlab/ui-components';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_HOME_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, localPath);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_HOME_CLASS)) {\n                const index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                this._model\n                    .cd(BREAD_CRUMB_PATHS[index])\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, path) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the home node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        node.appendChild(separators[0]);\n        const parts = path.split('/');\n        if (parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (path) {\n            if (parts.length >= 2) {\n                breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                node.appendChild(breadcrumbs[Crumb.Parent]);\n                const parent = parts.slice(0, parts.length - 1).join('/');\n                breadcrumbs[Crumb.Parent].title = parent;\n                node.appendChild(separators[2]);\n            }\n            breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n            node.appendChild(breadcrumbs[Crumb.Current]);\n            breadcrumbs[Crumb.Current].title = path;\n            node.appendChild(separators[3]);\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = folderIcon.element({\n            className: BREADCRUMB_HOME_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        return [home, ellipsis, parent, current];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, ArrayIterator, StringExt, each, filter, find, toArray } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { VirtualDOM, h } from '@lumino/virtualdom';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the narrow column header cell.\n */\nconst NARROW_ID_CLASS = 'jp-id-narrow';\n/**\n * The class name added to the modified column header cell and modified item cell when hidden.\n */\nconst MODIFIED_COLUMN_HIDDEN = 'jp-LastModified-hidden';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added for a decending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this.selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this._hiddenColumns = new Set();\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        this._renderer.populateHeaderNode(headerNode, this.translator, this._hiddenColumns);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this.selection[item.path]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return new ArrayIterator(this._sortedItems);\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        each(this._clipboard, path => {\n            if (this._isCut) {\n                const parts = path.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        });\n        // Remove any cut modifiers.\n        each(this._items, item => {\n            item.classList.remove(CUT_CLASS);\n        });\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this.selection[item.path]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ]\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        each(this.selectedItems(), item => {\n            if (item.type !== 'directory') {\n                promises.push(this._model.manager.copy(item.path, basePath));\n            }\n        });\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(toArray(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = toArray(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this.selection[items[index].path];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        const items = this._sortedItems;\n        return (toArray(filter(items, item => item.name === name && this.selection[item.path])).length !== 0);\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this.selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus the selected item.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name, focus = false) {\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false, focus);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this._evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this._evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode(this._hiddenColumns);\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        // Remove extra classes from the nodes.\n        nodes.forEach(item => {\n            item.classList.remove(SELECTED_CLASS);\n            item.classList.remove(RUNNING_CLASS);\n            item.classList.remove(CUT_CLASS);\n        });\n        // Add extra classes to item nodes based on widget state.\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            renderer.updateItemNode(node, item, ft, this.translator, this._hiddenColumns);\n            if (this.selection[item.path]) {\n                node.classList.add(SELECTED_CLASS);\n                if (this._isCut && this._model.path === this._prevPath) {\n                    node.classList.add(CUT_CLASS);\n                }\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this.selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        each(this._model.sessions(), session => {\n            var _a;\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : 'unknown'; // FIXME-TRANS: Is this localizable?\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        });\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this.toggleClass('jp-DirListing-narrow', width < 250);\n    }\n    setColumnVisibility(name, visible) {\n        if (visible) {\n            this._hiddenColumns.delete(name);\n        }\n        else {\n            this._hiddenColumns.add(name);\n        }\n        this.headerNode.innerHTML = '';\n        this._renderer.populateHeaderNode(this.headerNode, this.translator, this._hiddenColumns);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        if (header.contains(target)) {\n            const state = this.renderer.handleHeaderClick(header, event);\n            if (state) {\n                this.sort(state);\n            }\n            return;\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            return;\n        }\n        this.handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this.selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Re-focus the selected file. This is needed because nodes corresponding\n        // to files selected in mousedown handler will not retain the focus\n        // as mousedown event is always followed by a blur/focus event.\n        if (event.button === 0) {\n            this._focusSelectedFile();\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    _evtKeydown(event) {\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                const selected = Object.keys(this.selection);\n                const path = selected[0];\n                const items = this._sortedItems;\n                const i = ArrayExt.findFirstIndex(items, value => value.path === path);\n                if (i === -1) {\n                    return;\n                }\n                const item = this._sortedItems[i];\n                this.handleOpen(item);\n                break;\n            }\n            case 38: // Up arrow\n                this.selectPrevious(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 40: // Down arrow\n                this.selectNext(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (!this._inRename && event.key !== undefined && event.key.length === 1) {\n            if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                return;\n            }\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    _evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this.handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    _evtNativeDrop(event) {\n        var _a, _b, _c;\n        const files = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n        const length = (_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.items.length;\n        if (!length) {\n            return;\n        }\n        for (let i = 0; i < length; i++) {\n            let entry = (_c = event.dataTransfer) === null || _c === void 0 ? void 0 : _c.items[i].webkitGetAsEntry();\n            if (entry.isDirectory) {\n                console.log('currently not supporting drag + drop for folders');\n                void showDialog({\n                    title: this._trans.__('Error Uploading Folder'),\n                    body: this._trans.__('Drag and Drop is currently not supported for folders'),\n                    buttons: [Dialog.cancelButton({ label: this._trans.__('Close') })]\n                });\n            }\n        }\n        event.preventDefault();\n        for (let i = 0; i < files.length; i++) {\n            void this._model.upload(files[i]);\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this.selection[item.path]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedPaths = Object.keys(this.selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedPaths = [item.path];\n            selectedItems = [item];\n        }\n        else {\n            const path = selectedPaths[0];\n            item = find(items, value => value.path === path);\n            selectedItems = toArray(this.selectedItems());\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedPaths.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        this._drag.mimeData.setData(CONTENTS_MIME, selectedPaths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = selectedPaths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const path = items[index].path;\n        const selected = Object.keys(this.selection);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) || (!IS_MAC && event.ctrlKey)) {\n            if (this.selection[path]) {\n                delete this.selection[path];\n            }\n            else {\n                this.selection[path] = true;\n            }\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(selected, index);\n            // Handle a 'soft' selection\n        }\n        else if (path in this.selection && selected.length > 1) {\n            this._softSelection = path;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            return this._selectItem(index, false);\n        }\n        this.update();\n    }\n    /**\n     * (Re-)focus on the selected file.\n     *\n     * If index is not given, it will be inferred from the current selection;\n     * providing index saves on the iteration time.\n     */\n    _focusSelectedFile(index) {\n        if (typeof index === 'undefined') {\n            const selected = Object.keys(this.selection);\n            if (selected.length > 1) {\n                // Multiselect - do not focus on any single file\n                return;\n            }\n            index = ArrayExt.findFirstIndex(this._sortedItems, value => value.path === selected[0]);\n        }\n        if (index === -1) {\n            return;\n        }\n        // Focus on text to make shortcuts works\n        const node = this._items[index];\n        const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        if (text) {\n            text.focus();\n        }\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(selected, index) {\n        // Find the \"nearest selected\".\n        const items = this._sortedItems;\n        let nearestIndex = -1;\n        for (let i = 0; i < this._items.length; i++) {\n            if (i === index) {\n                continue;\n            }\n            const path = items[i].path;\n            if (selected.indexOf(path) !== -1) {\n                if (nearestIndex === -1) {\n                    nearestIndex = i;\n                }\n                else {\n                    if (Math.abs(index - i) < Math.abs(nearestIndex - i)) {\n                        nearestIndex = i;\n                    }\n                }\n            }\n        }\n        // Default to the first element (and fill down).\n        if (nearestIndex === -1) {\n            nearestIndex = 0;\n        }\n        // Select the rows between the current and the nearest selected.\n        for (let i = 0; i < this._items.length; i++) {\n            if ((nearestIndex >= i && index <= i) ||\n                (nearestIndex <= i && index >= i)) {\n                this.selection[items[i].path] = true;\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        each(this.selectedItems(), item => {\n            this._clipboard.push(item.path);\n        });\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    _doRename() {\n        this._inRename = true;\n        const items = this._sortedItems;\n        const path = Object.keys(this.selection)[0];\n        const index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        this._editNode.value = original;\n        this._selectItem(index, false);\n        return Private.doRename(nameNode, this._editNode, original).then(newName => {\n            this.node.focus();\n            if (!newName || newName === original) {\n                this._inRename = false;\n                return original;\n            }\n            if (!isValidFileName(newName)) {\n                void showErrorMessage(this._trans.__('showErrorMessage', 'Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n                this._inRename = false;\n                return original;\n            }\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            const promise = renameFile(manager, oldPath, newPath);\n            return promise\n                .catch(error => {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                this._inRename = false;\n                return original;\n            })\n                .then(() => {\n                if (this.isDisposed) {\n                    this._inRename = false;\n                    throw new Error('File browser is disposed.');\n                }\n                if (this._inRename) {\n                    // No need to catch because `newName` will always exit.\n                    void this.selectItemByName(newName);\n                }\n                this._inRename = false;\n                return newName;\n            });\n        });\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting, focus = true) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const path = items[index].path;\n        this.selection[path] = true;\n        if (!keepExisting && focus) {\n            this._focusSelectedFile(index);\n        }\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this.selection);\n        this.clearSelectedItems();\n        each(this._model.items(), item => {\n            const path = item.path;\n            if (existing.indexOf(path) !== -1) {\n                this.selection[path] = true;\n            }\n        });\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            node.tabIndex = 0;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const name = this.createHeaderItemNode(trans.__('Name'));\n            const narrow = document.createElement('div');\n            const modified = this.createHeaderItemNode(trans.__('Last Modified'));\n            name.classList.add(NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            modified.classList.add(MODIFIED_ID_CLASS);\n            narrow.classList.add(NARROW_ID_CLASS);\n            narrow.textContent = '...';\n            node.appendChild(name);\n            node.appendChild(narrow);\n            node.appendChild(modified);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            if (name.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                if (name.classList.contains(SELECTED_CLASS)) {\n                    if (!name.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        name.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'down');\n                    }\n                    else {\n                        name.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'up');\n                    }\n                }\n                else {\n                    name.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(nameIcon, 'right', 'up');\n                }\n                name.classList.add(SELECTED_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(modifiedIcon, 'left');\n                return state;\n            }\n            if (modified.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                state.key = 'last_modified';\n                if (modified.classList.contains(SELECTED_CLASS)) {\n                    if (!modified.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        modified.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'down');\n                    }\n                    else {\n                        modified.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    modified.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(modifiedIcon, 'left', 'up');\n                }\n                modified.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                return state;\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode(hiddenColumns) {\n            var _a;\n            const node = document.createElement('li');\n            const icon = document.createElement('span');\n            const text = document.createElement('span');\n            const modified = document.createElement('span');\n            icon.className = ITEM_ICON_CLASS;\n            text.className = ITEM_TEXT_CLASS;\n            modified.className = ITEM_MODIFIED_CLASS;\n            node.appendChild(icon);\n            node.appendChild(text);\n            node.appendChild(modified);\n            // Make the text note focusable so that it receives keyboard events;\n            // text node was specifically chosen to receive shortcuts because\n            // text element gets substituted with input area during file name edits\n            // which conveniently deactivate irrelevant shortcuts.\n            text.tabIndex = 0;\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            return node;\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator, hiddenColumns) {\n            var _a;\n            translator = translator || nullTranslator;\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            if ((_a = hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has) === null || _a === void 0 ? void 0 : _a.call(hiddenColumns, 'last_modified')) {\n                modified.classList.add(MODIFIED_COLUMN_HIDDEN);\n            }\n            else {\n                modified.classList.remove(MODIFIED_COLUMN_HIDDEN);\n            }\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            if (text) {\n                const indices = !model.indices ? [] : model.indices;\n                let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            let modText = '';\n            let modTitle = '';\n            if (model.last_modified) {\n                modText = Time.formatHuman(new Date(model.last_modified));\n                modTitle = Time.format(new Date(model.last_modified), 'lll');\n            }\n            modified.textContent = modText;\n            modified.title = modTitle;\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const modified = DOMUtils.findElement(dragImage, ITEM_MODIFIED_CLASS);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            dragImage.removeChild(modified);\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function doRename(text, edit, original) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise((resolve, reject) => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.value = original;\n                        edit.blur();\n                        break;\n                    case 38: // Up arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = 0;\n                        }\n                        break;\n                    case 40: // Down arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = edit.value.length;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.doRename = doRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state) {\n        const copy = toArray(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        if (state.key === 'last_modified') {\n            // Sort by last modified (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                const valA = new Date(a.last_modified).getTime();\n                const valB = new Date(b.last_modified).getTime();\n                return t1 - t2 || (valA - valB) * reverse;\n            });\n        }\n        else {\n            // Sort by name (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                return t1 - t2 || b.name.localeCompare(a.name) * reverse;\n            });\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 Bytes';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem',\n                float\n            });\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ToolbarButton, showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport React, { useState, useEffect } from 'react';\nimport { StringExt } from '@lumino/algorithm';\nimport { InputGroup } from '@jupyterlab/ui-components';\nimport { ReactWidget } from '@jupyterlab/apputils';\n/**\n * Perform a fuzzy search on a single item.\n */\nfunction fuzzySearch(source, query) {\n    // Set up the match score and indices array.\n    let score = Infinity;\n    let indices = null;\n    // The regex for search word boundaries\n    const rgx = /\\b\\w/g;\n    let continueSearch = true;\n    // Search the source by word boundary.\n    while (continueSearch) {\n        // Find the next word boundary in the source.\n        let rgxMatch = rgx.exec(source);\n        // Break if there is no more source context.\n        if (!rgxMatch) {\n            break;\n        }\n        // Run the string match on the relevant substring.\n        let match = StringExt.matchSumOfDeltas(source, query, rgxMatch.index);\n        // Break if there is no match.\n        if (!match) {\n            break;\n        }\n        // Update the match if the score is better.\n        if (match && match.score <= score) {\n            score = match.score;\n            indices = match.indices;\n        }\n    }\n    // Bail if there was no match.\n    if (!indices || score === Infinity) {\n        return null;\n    }\n    // Handle a split match.\n    return {\n        score,\n        indices\n    };\n}\nconst FilterBox = (props) => {\n    const [filter, setFilter] = useState('');\n    if (props.forceRefresh) {\n        useEffect(() => {\n            props.listing.model.setFilter((item) => {\n                return true;\n            });\n        }, []);\n    }\n    /**\n     * Handler for search input changes.\n     */\n    const handleChange = (e) => {\n        const target = e.target;\n        setFilter(target.value);\n        props.listing.model.setFilter((item) => {\n            if (props.useFuzzyFilter) {\n                // Run the fuzzy search for the item and query.\n                const name = item.name.toLowerCase();\n                const query = target.value.toLowerCase();\n                let score = fuzzySearch(name, query);\n                // Ignore the item if it is not a match.\n                if (!score) {\n                    item.indices = [];\n                    return false;\n                }\n                item.indices = score.indices;\n                return true;\n            }\n            const i = item.name.indexOf(target.value);\n            if (i === -1) {\n                item.indices = [];\n                return false;\n            }\n            item.indices = [...Array(target.value.length).keys()].map(x => x + i);\n            return true;\n        });\n    };\n    return (React.createElement(InputGroup, { type: \"text\", rightIcon: \"ui-components:search\", placeholder: props.placeholder, onChange: handleChange, value: filter }));\n};\n/**\n * A widget which hosts a input textbox to filter on file names.\n */\nexport const FilenameSearcher = (props) => {\n    return ReactWidget.create(React.createElement(FilterBox, { listing: props.listing, useFuzzyFilter: props.useFuzzyFilter, placeholder: props.placeholder, forceRefresh: props.forceRefresh }));\n};\n//# sourceMappingURL=search.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage, Toolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\nimport { Uploader } from './upload';\nimport { FilenameSearcher } from './search';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends Widget {\n    /**\n     * Construct a new file browser.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this._showLastModifiedColumn = true;\n        this._useFuzzyFilter = true;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.id = options.id;\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        const translator = this.translator;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this.translator = options.translator || nullTranslator;\n        this._manager = model.manager;\n        this._trans = this.translator.load('jupyterlab');\n        this.crumbs = new BreadCrumbs({ model, translator });\n        this.toolbar = new Toolbar();\n        // a11y\n        this.toolbar.node.setAttribute('role', 'navigation');\n        this.toolbar.node.setAttribute('aria-label', this._trans.__('file browser'));\n        this._directoryPending = false;\n        const newFolder = new ToolbarButton({\n            icon: newFolderIcon,\n            onClick: () => {\n                this.createNewDirectory();\n            },\n            tooltip: this._trans.__('New Folder')\n        });\n        const uploader = new Uploader({ model, translator: this.translator });\n        const refresher = new ToolbarButton({\n            icon: refreshIcon,\n            onClick: () => {\n                void model.refresh();\n            },\n            tooltip: this._trans.__('Refresh File List')\n        });\n        this.toolbar.addItem('newFolder', newFolder);\n        this.toolbar.addItem('upload', uploader);\n        this.toolbar.addItem('refresher', refresher);\n        this.listing = this.createDirListing({\n            model,\n            renderer,\n            translator: this.translator\n        });\n        this._filenameSearcher = FilenameSearcher({\n            listing: this.listing,\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name')\n        });\n        this.crumbs.addClass(CRUMBS_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.listing.addClass(LISTING_CLASS);\n        this.layout = new PanelLayout();\n        this.layout.addWidget(this.toolbar);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to show the last modified column\n     */\n    get showLastModifiedColumn() {\n        return this._showLastModifiedColumn;\n    }\n    set showLastModifiedColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('last_modified', value);\n            this._showLastModifiedColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to use fuzzy filtering on file names.\n     */\n    set useFuzzyFilter(value) {\n        this._useFuzzyFilter = value;\n        this._filenameSearcher = FilenameSearcher({\n            listing: this.listing,\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name'),\n            forceRefresh: true\n        });\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this._filenameSearcher.id = 'filename-searcher';\n        this.layout.removeWidget(this._filenameSearcher);\n        this.layout.removeWidget(this.crumbs);\n        this.layout.removeWidget(this.listing);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this.crumbs);\n        this.layout.addWidget(this.listing);\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this.listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this.listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this.listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this.listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this.listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this.listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this.listing.paste();\n    }\n    /**\n     * Create a new directory\n     */\n    createNewDirectory() {\n        if (this._directoryPending === true) {\n            return;\n        }\n        this._directoryPending = true;\n        // TODO: We should provide a hook into when the\n        // directory is done being created. This probably\n        // means storing a pendingDirectory promise and\n        // returning that if there is already a directory\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'directory'\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._directoryPending = false;\n        })\n            .catch(err => {\n            this._directoryPending = false;\n        });\n    }\n    /**\n     * Create a new file\n     */\n    createNewFile(options) {\n        if (this._filePending === true) {\n            return;\n        }\n        this._filePending = true;\n        // TODO: We should provide a hook into when the\n        // file is done being created. This probably\n        // means storing a pendingFile promise and\n        // returning that if there is already a file\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'file',\n            ext: options.ext\n        })\n            .then(async (model) => {\n            await this.listing.selectItemByName(model.name);\n            await this.rename();\n            this._filePending = false;\n        })\n            .catch(err => {\n            this._filePending = false;\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this.listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this.listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this.listing.download();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this.listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this.listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this.listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this.listing.modelForClick(event);\n    }\n    /**\n     * Create the underlying DirListing instance.\n     *\n     * @param options - The DirListing constructor options.\n     *\n     * @returns The created DirListing instance.\n     */\n    createDirListing(options) {\n        return new DirListing(options);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The path tracker token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { PathExt, PageConfig } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { ArrayIterator, each, find, ArrayExt, filter } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        this._model = {\n            path: this.rootPath,\n            name: PathExt.basename(this.rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this.onFileChanged, this);\n        services.sessions.runningChanged.connect(this.onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * Get the root path\n     */\n    get rootPath() {\n        return this._driveName ? this._driveName + ':' : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return new ArrayIterator(this._uploads);\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return new ArrayIterator(this._items);\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return new ArrayIterator(this._sessions);\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path - The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(newValue = '.') {\n        if (newValue !== '.') {\n            newValue = this.manager.services.contents.resolvePath(this._model.path, newValue);\n        }\n        else {\n            newValue = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (newValue === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = newValue;\n        if (oldValue !== newValue) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(newValue, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== newValue) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path: newValue });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue\n                });\n            }\n            this.onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response && error.response.status === 404) {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (find(this._items, i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked) {\n        // Gather the file model parameters.\n        let path = this._model.path;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const value = oldValue && oldValue.path && PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue && newValue.path && PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        each(models, model => {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        });\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this.translator = options.translator || nullTranslator;\n        this._filter = options.filter ? options.filter : model => true;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), (value, index) => {\n            if (value.type === 'directory') {\n                return true;\n            }\n            else {\n                return this._filter(value);\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { toArray } from '@lumino/algorithm';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: new OpenDialog(options.manager, options.filter, translator)\n        };\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles(Object.assign(Object.assign({}, options), { filter: model => false }));\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator) {\n        super();\n        translator = translator || nullTranslator;\n        this.addClass(OPEN_DIALOG_CLASS);\n        this._browser = Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator);\n        // Build the sub widgets\n        const layout = new PanelLayout();\n        layout.addWidget(this._browser);\n        // Set Widget content\n        this.layout = layout;\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = toArray(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = (id, manager, filter, options = {}, translator) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { VDomRenderer, VDomModel } from '@jupyterlab/apputils';\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeAt(this._items, idx);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"sourceRoot":""}
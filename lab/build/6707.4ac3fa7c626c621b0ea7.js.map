{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console-extension/lib/foreign.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console-extension/lib/index.js"],"names":["id","requires","IConsoleTracker","ISettingRegistry","ITranslator","optional","ICommandPalette","activate","app","tracker","settingRegistry","translator","palette","trans","load","shell","widgetAdded","connect","sender","widget","console","handler","ForeignHandler","sessionContext","parent","Private","foreignHandlerProperty","set","get","then","composite","showAllKernelActivity","enabled","disposed","dispose","commands","category","__","toggleShowAllActivity","addCommand","label","args","execute","current","currentWidget","activateById","getCurrent","isToggled","_a","isEnabled","addItem","command","isPalette","contextMenu","selector","autoStart","CommandIDs","AttachedProperty","name","create","clear","runUnforced","runForced","linebreak","interrupt","restart","closeAndShutdown","open","inject","changeKernel","enterToExecute","shiftEnterToExecute","interactionMode","replaceSelection","provides","ConsolePanel","IEditorServices","IRenderMimeRegistry","ILayoutRestorer","IFileBrowserFactory","IMainMenu","ILauncher","ILabStatus","ISessionContextDialogs","async","contentFactory","editorServices","rendermime","restorer","browserFactory","mainMenu","launcher","status","sessionDialogs","manager","serviceManager","sessionContextDialogs","WidgetTracker","namespace","createConsole","options","ready","panel","Object","assign","mimeTypeService","setBusy","undefined","node","dataset","jpInteractionMode","add","propertyChanged","save","ref","mode","insertMode","restore","path","kernelPreference","UUID","when","disposables","onSpecsChanged","specs","kernelspecs","DisposableSet","baseUrl","PageConfig","rank","default","Infinity","spec","kernelIconUrl","resources","index","indexOf","URLExt","slice","isLauncher","metadata","kernel","JSONExt","specsChanged","pluginId","updateSettings","forEach","pluginChanged","plugin","find","value","session","sessions","running","item","Promise","reject","_b","_c","_d","display_name","icon","consoleIcon","basePath","defaultBrowser","model","insertLinebreak","text","showDialog","title","body","buttons","Dialog","result","button","accept","shutdown","selectKernel","fileMenu","newMenu","addGroup","closeAndCleaners","closeAndCleanupLabel","n","closeAndCleanup","kernelMenu","kernelUsers","restartKernelAndClearLabel","interruptKernel","resolve","restartKernel","restartKernelAndClear","restarted","shutdownKernel","runMenu","codeRunners","runLabel","run","editMenu","clearers","clearCurrentLabel","clearCurrent","runShortcutTitles","notebook","terminal","reason","error","message","executeMenu","Menu","settingsMenu","type","submenu","helpMenu","getKernel","editorFactory","factoryService","newInlineEditor"],"mappings":"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","file":"6707.4ac3fa7c626c621b0ea7.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { IConsoleTracker, ForeignHandler } from '@jupyterlab/console';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { AttachedProperty } from '@lumino/properties';\n/**\n * The console widget tracker provider.\n */\nexport const foreign = {\n    id: '@jupyterlab/console-extension:foreign',\n    requires: [IConsoleTracker, ISettingRegistry, ITranslator],\n    optional: [ICommandPalette],\n    activate: activateForeign,\n    autoStart: true\n};\nexport default foreign;\nfunction activateForeign(app, tracker, settingRegistry, translator, palette) {\n    const trans = translator.load('jupyterlab');\n    const { shell } = app;\n    tracker.widgetAdded.connect((sender, widget) => {\n        const console = widget.console;\n        const handler = new ForeignHandler({\n            sessionContext: console.sessionContext,\n            parent: console\n        });\n        Private.foreignHandlerProperty.set(console, handler);\n        // Property showAllKernelActivity configures foreign handler enabled on start.\n        void settingRegistry\n            .get('@jupyterlab/console-extension:tracker', 'showAllKernelActivity')\n            .then(({ composite }) => {\n            const showAllKernelActivity = composite;\n            handler.enabled = showAllKernelActivity;\n        });\n        console.disposed.connect(() => {\n            handler.dispose();\n        });\n    });\n    const { commands } = app;\n    const category = trans.__('Console');\n    const toggleShowAllActivity = 'console:toggle-show-all-kernel-activity';\n    // Get the current widget and activate unless the args specify otherwise.\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            shell.activateById(widget.id);\n        }\n        return widget;\n    }\n    commands.addCommand(toggleShowAllActivity, {\n        label: args => trans.__('Show All Kernel Activity'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const handler = Private.foreignHandlerProperty.get(current.console);\n            if (handler) {\n                handler.enabled = !handler.enabled;\n            }\n        },\n        isToggled: () => {\n            var _a;\n            return tracker.currentWidget !== null &&\n                !!((_a = Private.foreignHandlerProperty.get(tracker.currentWidget.console)) === null || _a === void 0 ? void 0 : _a.enabled);\n        },\n        isEnabled: () => tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget\n    });\n    if (palette) {\n        palette.addItem({\n            command: toggleShowAllActivity,\n            category,\n            args: { isPalette: true }\n        });\n    }\n    app.contextMenu.addItem({\n        command: toggleShowAllActivity,\n        selector: '.jp-CodeConsole'\n    });\n}\n/*\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a console's foreign handler.\n     */\n    Private.foreignHandlerProperty = new AttachedProperty({\n        name: 'foreignHandler',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=foreign.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module console-extension\n */\nimport { ILabStatus, ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ISessionContextDialogs, ICommandPalette, sessionContextDialogs, showDialog, WidgetTracker } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { ConsolePanel, IConsoleTracker } from '@jupyterlab/console';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { consoleIcon } from '@jupyterlab/ui-components';\nimport { find } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { Menu } from '@lumino/widgets';\nimport foreign from './foreign';\n/**\n * The command IDs used by the console plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'console:create';\n    CommandIDs.clear = 'console:clear';\n    CommandIDs.runUnforced = 'console:run-unforced';\n    CommandIDs.runForced = 'console:run-forced';\n    CommandIDs.linebreak = 'console:linebreak';\n    CommandIDs.interrupt = 'console:interrupt-kernel';\n    CommandIDs.restart = 'console:restart-kernel';\n    CommandIDs.closeAndShutdown = 'console:close-and-shutdown';\n    CommandIDs.open = 'console:open';\n    CommandIDs.inject = 'console:inject';\n    CommandIDs.changeKernel = 'console:change-kernel';\n    CommandIDs.enterToExecute = 'console:enter-to-execute';\n    CommandIDs.shiftEnterToExecute = 'console:shift-enter-to-execute';\n    CommandIDs.interactionMode = 'console:interaction-mode';\n    CommandIDs.replaceSelection = 'console:replace-selection';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The console widget tracker provider.\n */\nconst tracker = {\n    id: '@jupyterlab/console-extension:tracker',\n    provides: IConsoleTracker,\n    requires: [\n        ConsolePanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        ILayoutRestorer,\n        IFileBrowserFactory,\n        IMainMenu,\n        ICommandPalette,\n        ILauncher,\n        ILabStatus,\n        ISessionContextDialogs\n    ],\n    activate: activateConsole,\n    autoStart: true\n};\n/**\n * The console widget content factory.\n */\nconst factory = {\n    id: '@jupyterlab/console-extension:factory',\n    provides: ConsolePanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new ConsolePanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * Export the plugins as the default.\n */\nconst plugins = [factory, tracker, foreign];\nexport default plugins;\n/**\n * Activate the console extension.\n */\nasync function activateConsole(app, contentFactory, editorServices, rendermime, settingRegistry, translator, restorer, browserFactory, mainMenu, palette, launcher, status, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const manager = app.serviceManager;\n    const { commands, shell } = app;\n    const category = trans.__('Console');\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    // Create a widget tracker for all console panels.\n    const tracker = new WidgetTracker({\n        namespace: 'console'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: CommandIDs.create,\n            args: widget => {\n                const { path, name, kernelPreference } = widget.console.sessionContext;\n                return {\n                    path,\n                    name,\n                    kernelPreference: Object.assign({}, kernelPreference)\n                };\n            },\n            name: widget => { var _a; return (_a = widget.console.sessionContext.path) !== null && _a !== void 0 ? _a : UUID.uuid4(); },\n            when: manager.ready\n        });\n    }\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void manager.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = manager.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                const baseUrl = PageConfig.getBaseUrl();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    if (kernelIconUrl) {\n                        const index = kernelIconUrl.indexOf('kernelspecs');\n                        kernelIconUrl = URLExt.join(baseUrl, kernelIconUrl.slice(index));\n                    }\n                    disposables.add(launcher.add({\n                        command: CommandIDs.create,\n                        args: { isLauncher: true, kernelPreference: { name } },\n                        category: trans.__('Console'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            manager.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    /**\n     * Create a console for a given path.\n     */\n    async function createConsole(options) {\n        var _a;\n        await manager.ready;\n        const panel = new ConsolePanel(Object.assign({ manager,\n            contentFactory, mimeTypeService: editorServices.mimeTypeService, rendermime,\n            translator, setBusy: (_a = (status && (() => status.setBusy()))) !== null && _a !== void 0 ? _a : undefined }, options));\n        const interactionMode = (await settingRegistry.get('@jupyterlab/console-extension:tracker', 'interactionMode')).composite;\n        panel.console.node.dataset.jpInteractionMode = interactionMode;\n        // Add the console panel to the tracker. We want the panel to show up before\n        // any kernel selection dialog, so we do not await panel.session.ready;\n        await tracker.add(panel);\n        panel.sessionContext.propertyChanged.connect(() => {\n            void tracker.save(panel);\n        });\n        shell.add(panel, 'main', {\n            ref: options.ref,\n            mode: options.insertMode,\n            activate: options.activate !== false\n        });\n        return panel;\n    }\n    const pluginId = '@jupyterlab/console-extension:tracker';\n    let interactionMode;\n    async function updateSettings() {\n        interactionMode = (await settingRegistry.get(pluginId, 'interactionMode'))\n            .composite;\n        tracker.forEach(widget => {\n            widget.console.node.dataset.jpInteractionMode = interactionMode;\n        });\n    }\n    settingRegistry.pluginChanged.connect((sender, plugin) => {\n        if (plugin === pluginId) {\n            void updateSettings();\n        }\n    });\n    await updateSettings();\n    /**\n     * Whether there is an active console.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    let command = CommandIDs.open;\n    commands.addCommand(command, {\n        execute: (args) => {\n            const path = args['path'];\n            const widget = tracker.find(value => {\n                var _a;\n                return ((_a = value.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === path;\n            });\n            if (widget) {\n                if (args.activate !== false) {\n                    shell.activateById(widget.id);\n                }\n                return widget;\n            }\n            else {\n                return manager.ready.then(() => {\n                    const model = find(manager.sessions.running(), item => {\n                        return item.path === path;\n                    });\n                    if (model) {\n                        return createConsole(args);\n                    }\n                    return Promise.reject(`No running kernel session for path: ${path}`);\n                });\n            }\n        }\n    });\n    command = CommandIDs.create;\n    commands.addCommand(command, {\n        label: args => {\n            var _a, _b, _c, _d;\n            if (args['isPalette']) {\n                return trans.__('New Console');\n            }\n            else if (args['isLauncher'] && args['kernelPreference']) {\n                const kernelPreference = args['kernelPreference'];\n                // TODO: Lumino command functions should probably be allowed to return undefined?\n                return ((_d = (_c = (_b = (_a = manager.kernelspecs) === null || _a === void 0 ? void 0 : _a.specs) === null || _b === void 0 ? void 0 : _b.kernelspecs[kernelPreference.name || '']) === null || _c === void 0 ? void 0 : _c.display_name) !== null && _d !== void 0 ? _d : '');\n            }\n            return trans.__('Console');\n        },\n        icon: args => (args['isPalette'] ? undefined : consoleIcon),\n        execute: args => {\n            var _a;\n            const basePath = (_a = (args['basePath'] ||\n                args['cwd'] || (browserFactory === null || browserFactory === void 0 ? void 0 : browserFactory.defaultBrowser.model.path))) !== null && _a !== void 0 ? _a : '';\n            return createConsole(Object.assign({ basePath }, args));\n        }\n    });\n    // Get the current widget and activate unless the args specify otherwise.\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            shell.activateById(widget.id);\n        }\n        return widget !== null && widget !== void 0 ? widget : null;\n    }\n    commands.addCommand(CommandIDs.clear, {\n        label: trans.__('Clear Console Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            current.console.clear();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runUnforced, {\n        label: trans.__('Run Cell (unforced)'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return current.console.execute();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runForced, {\n        label: trans.__('Run Cell (forced)'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return current.console.execute(true);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.linebreak, {\n        label: trans.__('Insert Line Break'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            current.console.insertLinebreak();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Console'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const text = args['text'] || '';\n            current.console.replaceSelection(text);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return sessionDialogs.restart(current.console.sessionContext, translator);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return showDialog({\n                title: trans.__('Shut down the console?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', current.title.label),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.console.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                        return true;\n                    });\n                }\n                else {\n                    return false;\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.inject, {\n        execute: args => {\n            const path = args['path'];\n            tracker.find(widget => {\n                var _a;\n                if (((_a = widget.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === path) {\n                    if (args['activate'] !== false) {\n                        shell.activateById(widget.id);\n                    }\n                    void widget.console.inject(args['code'], args['metadata']);\n                    return true;\n                }\n                return false;\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            return sessionDialogs.selectKernel(current.console.sessionContext, translator);\n        },\n        isEnabled\n    });\n    if (palette) {\n        // Add command palette items\n        [\n            CommandIDs.create,\n            CommandIDs.linebreak,\n            CommandIDs.clear,\n            CommandIDs.runUnforced,\n            CommandIDs.runForced,\n            CommandIDs.restart,\n            CommandIDs.interrupt,\n            CommandIDs.changeKernel,\n            CommandIDs.closeAndShutdown\n        ].forEach(command => {\n            palette.addItem({ command, category, args: { isPalette: true } });\n        });\n    }\n    if (mainMenu) {\n        // Add a console creator to the File menu\n        mainMenu.fileMenu.newMenu.addGroup([{ command: CommandIDs.create }], 0);\n        // Add a close and shutdown command to the file menu.\n        mainMenu.fileMenu.closeAndCleaners.add({\n            tracker,\n            closeAndCleanupLabel: (n) => trans.__('Shutdown Console'),\n            closeAndCleanup: (current) => {\n                return showDialog({\n                    title: trans.__('Shut down the Console?'),\n                    body: trans.__('Are you sure you want to close \"%1\"?', current.title.label),\n                    buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n                }).then(result => {\n                    if (result.button.accept) {\n                        return current.console.sessionContext.shutdown().then(() => {\n                            current.dispose();\n                        });\n                    }\n                    else {\n                        return void 0;\n                    }\n                });\n            }\n        });\n        // Add a kernel user to the Kernel menu\n        mainMenu.kernelMenu.kernelUsers.add({\n            tracker,\n            restartKernelAndClearLabel: n => trans.__('Restart Kernel and Clear Console'),\n            interruptKernel: current => {\n                var _a;\n                const kernel = (_a = current.console.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n                if (kernel) {\n                    return kernel.interrupt();\n                }\n                return Promise.resolve(void 0);\n            },\n            restartKernel: current => sessionDialogs.restart(current.console.sessionContext, translator),\n            restartKernelAndClear: current => {\n                return sessionDialogs\n                    .restart(current.console.sessionContext)\n                    .then(restarted => {\n                    if (restarted) {\n                        current.console.clear();\n                    }\n                    return restarted;\n                });\n            },\n            changeKernel: current => sessionDialogs.selectKernel(current.console.sessionContext, translator),\n            shutdownKernel: current => current.console.sessionContext.shutdown()\n        });\n        // Add a code runner to the Run menu.\n        mainMenu.runMenu.codeRunners.add({\n            tracker,\n            runLabel: (n) => trans.__('Run Cell'),\n            run: current => current.console.execute(true)\n        });\n        // Add a clearer to the edit menu\n        mainMenu.editMenu.clearers.add({\n            tracker,\n            clearCurrentLabel: (n) => trans.__('Clear Console Cell'),\n            clearCurrent: (current) => {\n                return current.console.clear();\n            }\n        });\n    }\n    // For backwards compatibility and clarity, we explicitly label the run\n    // keystroke with the actual effected change, rather than the generic\n    // \"notebook\" or \"terminal\" interaction mode. When this interaction mode\n    // affects more than just the run keystroke, we can make this menu title more\n    // generic.\n    const runShortcutTitles = {\n        notebook: trans.__('Execute with Shift+Enter'),\n        terminal: trans.__('Execute with Enter')\n    };\n    // Add the execute keystroke setting submenu.\n    commands.addCommand(CommandIDs.interactionMode, {\n        label: args => runShortcutTitles[args['interactionMode']] || '',\n        execute: async (args) => {\n            const key = 'keyMap';\n            try {\n                await settingRegistry.set(pluginId, 'interactionMode', args['interactionMode']);\n            }\n            catch (reason) {\n                console.error(`Failed to set ${pluginId}:${key} - ${reason.message}`);\n            }\n        },\n        isToggled: args => args['interactionMode'] === interactionMode\n    });\n    const executeMenu = new Menu({ commands });\n    executeMenu.title.label = trans.__('Console Run Keystroke');\n    ['terminal', 'notebook'].forEach(name => executeMenu.addItem({\n        command: CommandIDs.interactionMode,\n        args: { interactionMode: name }\n    }));\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([\n            {\n                type: 'submenu',\n                submenu: executeMenu\n            }\n        ], 10);\n        // Add kernel information to the application help menu.\n        mainMenu.helpMenu.kernelUsers.add({\n            tracker,\n            getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n        });\n    }\n    app.contextMenu.addItem({\n        command: CommandIDs.clear,\n        selector: '.jp-CodeConsole-content'\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.restart,\n        selector: '.jp-CodeConsole'\n    });\n    return tracker;\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/yprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/mock.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docprovider/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/environment.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/conditions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/map.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/mutex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/storage.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/string.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/process/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js"],"names":["messageHandlers","encoder","decoder","provider","emitSynced","messageType","syncMessageType","sync","doc","synced","awareness","Array","from","getStates","keys","decoding","y","permissionDeniedHandler","reason","console","warn","url","readMessage","buf","messageHandler","error","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","onmessage","event","wsLastMessageReceived","time","Uint8Array","data","send","onclose","filter","client","clientID","emit","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","super","length","slice","encodedParams","object","val","key","encodeURIComponent","join","this","mutex","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","update","origin","on","_awarenessUpdateHandler","added","updated","removed","changedClients","concat","window","addEventListener","_checkInterval","close","messageReconnectTimeout","state","clearInterval","disconnect","off","destroy","encoderSync","encoderState","encoderAwarenessQuery","Map","disconnectBc","connectBc","WebSocketProviderWithLocks","options","guid","ymodel","ydoc","_currentLockRequest","_initialContentRequest","timestamp","lockRequest","resolve","initialContent","byteLength","initialContentRequest","_isInitialized","_onConnectionStatus","bind","promise","reject","Promise","_resolve","_reject","_sendMessage","intervalID","_finally","then","lock","message","once","acquireLock","requestInitialContent","putInitializedState","releaseLock","ProviderMock","IDocumentProviderFactory","Token","channels","BC","BroadcastChannel","room","e","newValue","getChannel","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","c","postMessage","isNode","process","release","test","name","isBrowser","navigator","platform","args","computeParams","undefined","map","pargs","argv","currParamName","i","parg","set","push","location","search","split","kv","value","string","getParam","defaultVal","get","getVariable","v","toUpperCase","storage","has","hasParam","create","copy","m","r","k","setIfUndefined","createT","res","any","createMutex","token","g","_localStorage","usePolyfill","localStorage","varStorage","onChange","eventHandler","fromCharCode","String","trimLeftRegex","fromCodePoint","fromCamelCaseRegex","fromCamelCase","s","separator","replace","trimLeft","match","toLowerCase","utf8TextEncoder","TextEncoder","encodeUtf8","str","encode","encodedString","unescape","len","codePointAt","utf8TextDecoder","TextDecoder","fatal","ignoreBOM","decode","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","arguments","prototype","apply","title","browser","env","version","versions","addListener","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Awareness","states","meta","now","outdatedTimeout","lastUpdated","setLocalState","remove","clientid","removeAwarenessStates","currLocalMeta","clock","prevState","filteredUpdated","field","clients","curMeta","encodeAwarenessUpdate","JSON","stringify","applyAwarenessUpdate","parse","clientMeta","currClock","messageYjsSyncStep1","messageYjsSyncStep2","writeSyncStep1","sv","writeSyncStep2","encodedStateVector","readSyncStep2","transactionOrigin","writeUpdate","readUpdate","readSyncMessage","readSyncStep1"],"mappings":"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","file":"605.b4c1985b74d0370fa79d.js","sourcesContent":["/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n      })\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as Y from 'yjs';\nimport { WebsocketProvider } from 'y-websocket';\nimport * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\n/**\n * A class to provide Yjs synchronization over WebSocket.\n */\nexport class WebSocketProviderWithLocks extends WebsocketProvider {\n    /**\n     * Construct a new WebSocketProviderWithLocks\n     *\n     * @param options The instantiation options for a WebSocketProviderWithLocks\n     */\n    constructor(options) {\n        super(options.url, options.guid, options.ymodel.ydoc, {\n            awareness: options.ymodel.awareness\n        });\n        this._currentLockRequest = null;\n        this._initialContentRequest = null;\n        // Message handler that confirms when a lock has been acquired\n        this.messageHandlers[127] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // acquired lock\n            const timestamp = decoding.readUint32(decoder);\n            const lockRequest = this._currentLockRequest;\n            this._currentLockRequest = null;\n            if (lockRequest) {\n                lockRequest.resolve(timestamp);\n            }\n        };\n        // Message handler that receives the initial content\n        this.messageHandlers[125] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // received initial content\n            const initialContent = decoding.readTailAsUint8Array(decoder);\n            // Apply data from server\n            if (initialContent.byteLength > 0) {\n                setTimeout(() => {\n                    Y.applyUpdate(this.doc, initialContent);\n                }, 0);\n            }\n            const initialContentRequest = this._initialContentRequest;\n            this._initialContentRequest = null;\n            if (initialContentRequest) {\n                initialContentRequest.resolve(initialContent.byteLength > 0);\n            }\n        };\n        this._isInitialized = false;\n        this._onConnectionStatus = this._onConnectionStatus.bind(this);\n        this.on('status', this._onConnectionStatus);\n    }\n    /**\n     * Resolves to true if the initial content has been initialized on the server. false otherwise.\n     */\n    requestInitialContent() {\n        if (this._initialContentRequest) {\n            return this._initialContentRequest.promise;\n        }\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._initialContentRequest = { promise, resolve, reject };\n        this._sendMessage(new Uint8Array([125]));\n        // Resolve with true if the server doesn't respond for some reason.\n        // In case of a connection problem, we don't want the user to re-initialize the window.\n        // Instead wait for y-websocket to connect to the server.\n        // @todo maybe we should reload instead..\n        setTimeout(() => resolve(false), 1000);\n        return promise;\n    }\n    /**\n     * Put the initialized state.\n     */\n    putInitializedState() {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 124);\n        encoding.writeUint8Array(encoder, Y.encodeStateAsUpdate(this.doc));\n        this._sendMessage(encoding.toUint8Array(encoder));\n        this._isInitialized = true;\n    }\n    /**\n     * Acquire a lock.\n     * Returns a Promise that resolves to the lock number.\n     */\n    acquireLock() {\n        if (this._currentLockRequest) {\n            return this._currentLockRequest.promise;\n        }\n        this._sendMessage(new Uint8Array([127]));\n        // try to acquire lock in regular interval\n        const intervalID = setInterval(() => {\n            if (this.wsconnected) {\n                // try to acquire lock\n                this._sendMessage(new Uint8Array([127]));\n            }\n        }, 500);\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._currentLockRequest = { promise, resolve, reject };\n        const _finally = () => {\n            clearInterval(intervalID);\n        };\n        promise.then(_finally, _finally);\n        return promise;\n    }\n    /**\n     * Release a lock.\n     *\n     * @param lock The lock to release.\n     */\n    releaseLock(lock) {\n        const encoder = encoding.createEncoder();\n        // reply with release lock\n        encoding.writeVarUint(encoder, 126);\n        encoding.writeUint32(encoder, lock);\n        // releasing lock\n        this._sendMessage(encoding.toUint8Array(encoder));\n    }\n    /**\n     * Send a new message to WebSocket server.\n     *\n     * @param message The message to send\n     */\n    _sendMessage(message) {\n        // send once connected\n        const send = () => {\n            setTimeout(() => {\n                if (this.wsconnected) {\n                    this.ws.send(message);\n                }\n                else {\n                    this.once('status', send);\n                }\n            }, 0);\n        };\n        send();\n    }\n    /**\n     * Handle a change to the connection status.\n     *\n     * @param status The connection status.\n     */\n    async _onConnectionStatus(status) {\n        if (this._isInitialized && status.status === 'connected') {\n            const lock = await this.acquireLock();\n            const contentIsInitialized = await this.requestInitialContent();\n            if (!contentIsInitialized) {\n                this.putInitializedState();\n            }\n            this.releaseLock(lock);\n        }\n    }\n}\n//# sourceMappingURL=yprovider.js.map","export class ProviderMock {\n    requestInitialContent() {\n        return Promise.resolve(false);\n    }\n    putInitializedState() {\n        /* nop */\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        /* nop */\n    }\n    destroy() {\n        /* nop */\n    }\n}\n//# sourceMappingURL=mock.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The default document provider token.\n */\nexport const IDocumentProviderFactory = new Token('@jupyterlab/docprovider:IDocumentProviderFactory');\n//# sourceMappingURL=tokens.js.map","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\n\n/* istanbul ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name)\n/* istanbul ignore next */\nexport const isBrowser = typeof window !== 'undefined' && !isNode\n/* istanbul ignore next */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* istanbul ignore next */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      /* istanbul ignore next */\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n    // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create()\n      // eslint-disable-next-line no-undef\n      ;(location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasParam = name => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* istanbul ignore next */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal\n// export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* istanbul ignore next */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null\n\n/* istanbul ignore next */\nexport const production = hasConf('production')\n","/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* istanbul ignore next */\nexport const undefinedToNull = v => v === undefined ? null : v\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/* global localStorage, addEventListener */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n\n/* istanbul ignore next */\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n","/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n"],"sourceRoot":""}
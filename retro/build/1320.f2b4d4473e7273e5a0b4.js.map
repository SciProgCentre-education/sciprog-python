{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager-extension/lib/index.js"],"names":["CommandIDs","clone","deleteFile","newUntitled","open","openBrowserTab","reload","rename","nameOnSave","del","restoreCheckpoint","save","saveAll","saveAs","download","toggleAutosave","toggleNameFileOnSave","showInFileBrowser","docManagerPluginId","docManagerPlugin","id","provides","IDocumentManager","requires","ISettingRegistry","ITranslator","optional","ILabStatus","ICommandPalette","ILabShell","IMainMenu","ISessionContextDialogs","IDocumentProviderFactory","activate","app","settingRegistry","translator","status","palette","labShell","mainMenu","sessionDialogs","docProviderFactory","_a","trans","load","manager","serviceManager","contexts","WeakSet","opener","widget","options","Private","title","dataset","Object","assign","type","isAttached","shell","add","activateById","context","docManager","contextForWidget","has","disposable","onStateChanged","sender","args","name","newValue","setDirty","dispose","ready","then","model","stateChanged","connect","dirty","disposed","handleContext","registry","docRegistry","when","restored","DocumentManager","setBusy","undefined","collaborative","commands","category","__","isEnabled","currentWidget","contextMenuWidget","pathRe","node","contextMenuHitTest","match","pathMatch","findWidget","addCommand","label","fileType","execute","mode","child","cloneWidget","t","renameDialog","path","nameOnSaveDialog","async","showDialog","body","buttons","Dialog","button","accept","contextMenu","addItem","command","selector","rank","addLabCommands","Error","errorTitle","ext","services","contents","catch","error","showErrorMessage","factory","kernel","get","content","openOrReveal","icon","mnemonic","caption","result","isDisposed","revert","listCheckpoints","checkpoints","length","lastCheckpoint","RevertConfirmWidget","readOnly","contentsModel","writable","createCheckpoint","err","message","some","map","widgets","w","c","_b","promises","paths","Set","each","push","Promise","all","isToggled","autosave","value","key","set","reason","console","nameFileOnSave","optionChanged","plugins","data","user","activateRequested","shouldNameFile","forEach","settingsMenu","addGroup","addCommands","onSettingsUpdated","settings","composite","notifyCommandChanged","autosaveInterval","defaultViewers","overrides","keys","ft","getFileType","getWidgetFactory","warn","fileTypes","setDefaultWidgetFactory","changed","transform","fetch","plugin","toArray","join","factories","widgetFactories","f","description","schema","JSONExt","properties","savingStatusPlugin","autoStart","IStatusBar","_","statusBar","saving","SavingStatus","currentChanged","registerStatusItem","item","align","isActive","activeStateChanged","pathStatusPlugin","PathStatus","downloadPlugin","fileMenu","openBrowserTabPlugin","getDownloadUrl","url","opened","window","location","href","Widget","checkpoint","super","createRevertConfirmNode","fts","getFileTypesForPath","displayName","document","createElement","confirmMessage","confirmText","createTextNode","cannotUndoText","textContent","appendChild","lastCheckpointMessage","lastCheckpointText","lastCheckpointDate","date","Date","last_modified","style","textAlign","Time"],"mappings":"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","file":"1320.f2b4d4473e7273e5a0b4.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module docmanager-extension\n */\nimport { ILabShell, ILabStatus } from '@jupyterlab/application';\nimport { showDialog, showErrorMessage, Dialog, ICommandPalette, ISessionContextDialogs } from '@jupyterlab/apputils';\nimport { Time } from '@jupyterlab/coreutils';\nimport { renameDialog, nameOnSaveDialog, DocumentManager, IDocumentManager, PathStatus, SavingStatus } from '@jupyterlab/docmanager';\nimport { IDocumentProviderFactory } from '@jupyterlab/docprovider';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { each, map, some, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The command IDs used by the document manager plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.clone = 'docmanager:clone';\n    CommandIDs.deleteFile = 'docmanager:delete-file';\n    CommandIDs.newUntitled = 'docmanager:new-untitled';\n    CommandIDs.open = 'docmanager:open';\n    CommandIDs.openBrowserTab = 'docmanager:open-browser-tab';\n    CommandIDs.reload = 'docmanager:reload';\n    CommandIDs.rename = 'docmanager:rename';\n    CommandIDs.nameOnSave = 'docmanager:name-on-save';\n    CommandIDs.del = 'docmanager:delete';\n    CommandIDs.restoreCheckpoint = 'docmanager:restore-checkpoint';\n    CommandIDs.save = 'docmanager:save';\n    CommandIDs.saveAll = 'docmanager:save-all';\n    CommandIDs.saveAs = 'docmanager:save-as';\n    CommandIDs.download = 'docmanager:download';\n    CommandIDs.toggleAutosave = 'docmanager:toggle-autosave';\n    CommandIDs.toggleNameFileOnSave = 'docmanager:toggle-name-file-on-save';\n    CommandIDs.showInFileBrowser = 'docmanager:show-in-file-browser';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The id of the document manager plugin.\n */\nconst docManagerPluginId = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The default document manager provider.\n */\nconst docManagerPlugin = {\n    id: docManagerPluginId,\n    provides: IDocumentManager,\n    requires: [ISettingRegistry, ITranslator],\n    optional: [\n        ILabStatus,\n        ICommandPalette,\n        ILabShell,\n        IMainMenu,\n        ISessionContextDialogs,\n        IDocumentProviderFactory\n    ],\n    activate: (app, settingRegistry, translator, status, palette, labShell, mainMenu, sessionDialogs, docProviderFactory) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const manager = app.serviceManager;\n        const contexts = new WeakSet();\n        const opener = {\n            open: (widget, options) => {\n                if (!widget.id) {\n                    widget.id = `document-manager-${++Private.id}`;\n                }\n                widget.title.dataset = Object.assign({ type: 'document-title' }, widget.title.dataset);\n                if (!widget.isAttached) {\n                    app.shell.add(widget, 'main', options || {});\n                }\n                app.shell.activateById(widget.id);\n                // Handle dirty state for open documents.\n                const context = docManager.contextForWidget(widget);\n                if (context && !contexts.has(context)) {\n                    if (status) {\n                        handleContext(status, context);\n                    }\n                    contexts.add(context);\n                }\n            }\n        };\n        const registry = app.docRegistry;\n        const when = app.restored.then(() => void 0);\n        const docManager = new DocumentManager({\n            registry,\n            manager,\n            opener,\n            when,\n            setBusy: (_a = (status && (() => status.setBusy()))) !== null && _a !== void 0 ? _a : undefined,\n            sessionDialogs: sessionDialogs || undefined,\n            translator,\n            collaborative: true,\n            docProviderFactory: docProviderFactory !== null && docProviderFactory !== void 0 ? docProviderFactory : undefined\n        });\n        // Register the file operations commands.\n        addCommands(app, docManager, opener, settingRegistry, translator, labShell, palette, mainMenu);\n        // Keep up to date with the settings registry.\n        const onSettingsUpdated = (settings) => {\n            // Handle whether to autosave\n            const autosave = settings.get('autosave').composite;\n            docManager.autosave =\n                autosave === true || autosave === false ? autosave : true;\n            app.commands.notifyCommandChanged(CommandIDs.toggleAutosave);\n            // Handle autosave interval\n            const autosaveInterval = settings.get('autosaveInterval').composite;\n            docManager.autosaveInterval = autosaveInterval || 120;\n            // Handle whether to prompt to name file on first save\n            const nameFileOnSave = settings.get('nameFileOnSave')\n                .composite;\n            if (docManager.nameFileOnSave != nameFileOnSave) {\n                docManager.nameFileOnSave = nameFileOnSave;\n                app.commands.notifyCommandChanged(CommandIDs.nameOnSave);\n            }\n            // Handle default widget factory overrides.\n            const defaultViewers = settings.get('defaultViewers').composite;\n            const overrides = {};\n            // Filter the defaultViewers and file types for existing ones.\n            Object.keys(defaultViewers).forEach(ft => {\n                if (!registry.getFileType(ft)) {\n                    console.warn(`File Type ${ft} not found`);\n                    return;\n                }\n                if (!registry.getWidgetFactory(defaultViewers[ft])) {\n                    console.warn(`Document viewer ${defaultViewers[ft]} not found`);\n                }\n                overrides[ft] = defaultViewers[ft];\n            });\n            // Set the default factory overrides. If not provided, this has the\n            // effect of unsetting any previous overrides.\n            each(registry.fileTypes(), ft => {\n                try {\n                    registry.setDefaultWidgetFactory(ft.name, overrides[ft.name]);\n                }\n                catch (_a) {\n                    console.warn(`Failed to set default viewer ${overrides[ft.name]} for file type ${ft.name}`);\n                }\n            });\n        };\n        // Fetch the initial state of the settings.\n        Promise.all([settingRegistry.load(docManagerPluginId), app.restored])\n            .then(([settings]) => {\n            settings.changed.connect(onSettingsUpdated);\n            onSettingsUpdated(settings);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n        // Register a fetch transformer for the settings registry,\n        // allowing us to dynamically populate a help string with the\n        // available document viewers and file types for the default\n        // viewer overrides.\n        settingRegistry.transform(docManagerPluginId, {\n            fetch: plugin => {\n                // Get the available file types.\n                const fileTypes = toArray(registry.fileTypes())\n                    .map(ft => ft.name)\n                    .join('    \\n');\n                // Get the available widget factories.\n                const factories = toArray(registry.widgetFactories())\n                    .map(f => f.name)\n                    .join('    \\n');\n                // Generate the help string.\n                const description = trans.__(`Overrides for the default viewers for file types.\nSpecify a mapping from file type name to document viewer name, for example:\n\ndefaultViewers: {\n  markdown: \"Markdown Preview\"\n}\n\nIf you specify non-existent file types or viewers, or if a viewer cannot\nopen a given file type, the override will not function.\n\nAvailable viewers:\n%1\n\nAvailable file types:\n%2`, factories, fileTypes);\n                const schema = JSONExt.deepCopy(plugin.schema);\n                schema.properties.defaultViewers.description = description;\n                return Object.assign(Object.assign({}, plugin), { schema });\n            }\n        });\n        // If the document registry gains or loses a factory or file type,\n        // regenerate the settings description with the available options.\n        registry.changed.connect(() => settingRegistry.reload(docManagerPluginId));\n        return docManager;\n    }\n};\n/**\n * A plugin for adding a saving status item to the status bar.\n */\nexport const savingStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:saving-status',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell, ITranslator],\n    optional: [IStatusBar],\n    activate: (_, docManager, labShell, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const saving = new SavingStatus({ docManager, translator });\n        // Keep the currently active widget synchronized.\n        saving.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            saving.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(savingStatusPlugin.id, {\n            item: saving,\n            align: 'middle',\n            isActive: () => true,\n            activeStateChanged: saving.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin providing a file path widget to the status bar.\n */\nexport const pathStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:path-status',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell],\n    optional: [IStatusBar],\n    activate: (_, docManager, labShell, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const path = new PathStatus({ docManager });\n        // Keep the file path widget up-to-date with the application active widget.\n        path.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            path.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(pathStatusPlugin.id, {\n            item: path,\n            align: 'right',\n            rank: 0,\n            isActive: () => true\n        });\n    }\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nexport const downloadPlugin = {\n    id: '@jupyterlab/docmanager-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, docManager, palette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        commands.addCommand(CommandIDs.download, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: () => {\n                // Checks that shell.currentWidget is valid:\n                if (isEnabled()) {\n                    const context = docManager.contextForWidget(shell.currentWidget);\n                    if (!context) {\n                        return showDialog({\n                            title: trans.__('Cannot Download'),\n                            body: trans.__('No context found for current widget!'),\n                            buttons: [Dialog.okButton({ label: trans.__('OK') })]\n                        });\n                    }\n                    return context.download();\n                }\n            }\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.download, category });\n        }\n        if (mainMenu) {\n            mainMenu.fileMenu.addGroup([{ command: CommandIDs.download }], 6);\n        }\n    }\n};\n/**\n * A plugin providing open-browser-tab commands.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable @jupyterlab/docmanager-extension:open-browser-tab\n *\n * Note: If disabling this, you may also want to disable:\n * @jupyterlab/filebrowser-extension:open-browser-tab\n */\nexport const openBrowserTabPlugin = {\n    id: '@jupyterlab/docmanager-extension:open-browser-tab',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    activate: (app, translator, docManager) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        commands.addCommand(CommandIDs.openBrowserTab, {\n            execute: args => {\n                const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n                if (!path) {\n                    return;\n                }\n                return docManager.services.contents.getDownloadUrl(path).then(url => {\n                    const opened = window.open();\n                    if (opened) {\n                        opened.opener = null;\n                        opened.location.href = url;\n                    }\n                    else {\n                        throw new Error('Failed to open new browser tab.');\n                    }\n                });\n            },\n            icon: args => args['icon'] || '',\n            label: () => trans.__('Open in New Browser Tab')\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    docManagerPlugin,\n    pathStatusPlugin,\n    savingStatusPlugin,\n    downloadPlugin,\n    openBrowserTabPlugin\n];\nexport default plugins;\n/* Widget to display the revert to checkpoint confirmation. */\nclass RevertConfirmWidget extends Widget {\n    /**\n     * Construct a new revert confirmation widget.\n     */\n    constructor(checkpoint, trans, fileType = 'notebook') {\n        super({\n            node: Private.createRevertConfirmNode(checkpoint, fileType, trans)\n        });\n    }\n}\n// Returns the file type for a widget.\nfunction fileType(widget, docManager) {\n    if (!widget) {\n        return 'File';\n    }\n    const context = docManager.contextForWidget(widget);\n    if (!context) {\n        return '';\n    }\n    const fts = docManager.registry.getFileTypesForPath(context.path);\n    return fts.length && fts[0].displayName ? fts[0].displayName : 'File';\n}\n/**\n * Add the file operations commands to the application's command registry.\n */\nfunction addCommands(app, docManager, opener, settingRegistry, translator, labShell, palette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const category = trans.__('File Operations');\n    const isEnabled = () => {\n        const { currentWidget } = shell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    const isWritable = () => {\n        const { currentWidget } = shell;\n        if (!currentWidget) {\n            return false;\n        }\n        const context = docManager.contextForWidget(currentWidget);\n        return !!(context &&\n            context.contentsModel &&\n            context.contentsModel.writable);\n    };\n    // If inside a rich application like JupyterLab, add additional functionality.\n    if (labShell) {\n        addLabCommands(app, docManager, labShell, opener, translator, palette);\n    }\n    commands.addCommand(CommandIDs.deleteFile, {\n        label: () => `Delete ${fileType(shell.currentWidget, docManager)}`,\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            if (!path) {\n                const command = CommandIDs.deleteFile;\n                throw new Error(`A non-empty path is required for ${command}.`);\n            }\n            return docManager.deleteFile(path);\n        }\n    });\n    commands.addCommand(CommandIDs.newUntitled, {\n        execute: args => {\n            // FIXME-TRANS: Localizing args['error']?\n            const errorTitle = args['error'] || trans.__('Error');\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const options = {\n                type: args['type'],\n                path\n            };\n            if (args['type'] === 'file') {\n                options.ext = args['ext'] || '.txt';\n            }\n            return docManager.services.contents\n                .newUntitled(options)\n                .catch(error => showErrorMessage(errorTitle, error));\n        },\n        label: args => args['label'] || `New ${args['type']}`\n    });\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const factory = args['factory'] || void 0;\n            const kernel = args === null || args === void 0 ? void 0 : args.kernel;\n            const options = args['options'] || void 0;\n            return docManager.services.contents\n                .get(path, { content: false })\n                .then(() => docManager.openOrReveal(path, factory, kernel, options));\n        },\n        icon: args => args['icon'] || '',\n        label: args => (args['label'] || args['factory']),\n        mnemonic: args => args['mnemonic'] || -1\n    });\n    commands.addCommand(CommandIDs.reload, {\n        label: () => trans.__('Reload %1 from Disk', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Reload contents from disk'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            const type = fileType(shell.currentWidget, docManager);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Reload'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            if (context.model.dirty) {\n                return showDialog({\n                    title: trans.__('Reload %1 from Disk', type),\n                    body: trans.__('Are you sure you want to reload the %1 from the disk?', type),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Reload') })\n                    ]\n                }).then(result => {\n                    if (result.button.accept && !context.isDisposed) {\n                        return context.revert();\n                    }\n                });\n            }\n            else {\n                if (!context.isDisposed) {\n                    return context.revert();\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.restoreCheckpoint, {\n        label: () => trans.__('Revert %1 to Checkpoint', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Revert contents to previous checkpoint'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Revert'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            return context.listCheckpoints().then(checkpoints => {\n                if (checkpoints.length < 1) {\n                    return;\n                }\n                const lastCheckpoint = checkpoints[checkpoints.length - 1];\n                if (!lastCheckpoint) {\n                    return;\n                }\n                const type = fileType(shell.currentWidget, docManager);\n                return showDialog({\n                    title: trans.__('Revert %1 to checkpoint', type),\n                    body: new RevertConfirmWidget(lastCheckpoint, trans, type),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Revert') })\n                    ]\n                }).then(result => {\n                    if (context.isDisposed) {\n                        return;\n                    }\n                    if (result.button.accept) {\n                        if (context.model.readOnly) {\n                            return context.revert();\n                        }\n                        return context.restoreCheckpoint().then(() => context.revert());\n                    }\n                });\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.save, {\n        label: () => trans.__('Save %1', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Save and create checkpoint'),\n        isEnabled: isWritable,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                    });\n                }\n                else {\n                    if (context.model.readOnly) {\n                        return showDialog({\n                            title: trans.__('Cannot Save'),\n                            body: trans.__('Document is read-only'),\n                            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                        });\n                    }\n                    return context\n                        .save(true)\n                        .then(() => context.createCheckpoint())\n                        .catch(err => {\n                        // If the save was canceled by user-action, do nothing.\n                        // FIXME-TRANS: Is this using the text on the button or?\n                        if (err.message === 'Cancel') {\n                            return;\n                        }\n                        throw err;\n                    });\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.saveAll, {\n        label: () => trans.__('Save All'),\n        caption: trans.__('Save all open documents'),\n        isEnabled: () => {\n            return some(map(shell.widgets('main'), w => docManager.contextForWidget(w)), c => { var _a, _b; return (_b = (_a = c === null || c === void 0 ? void 0 : c.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) !== null && _b !== void 0 ? _b : false; });\n        },\n        execute: () => {\n            const promises = [];\n            const paths = new Set(); // Cache so we don't double save files.\n            each(shell.widgets('main'), widget => {\n                const context = docManager.contextForWidget(widget);\n                if (context && !context.model.readOnly && !paths.has(context.path)) {\n                    paths.add(context.path);\n                    promises.push(context.save());\n                }\n            });\n            return Promise.all(promises);\n        }\n    });\n    commands.addCommand(CommandIDs.saveAs, {\n        label: () => trans.__('Save %1 As…', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Save with new path'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                    });\n                }\n                return context.saveAs();\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.toggleAutosave, {\n        label: trans.__('Autosave Documents'),\n        isToggled: () => docManager.autosave,\n        execute: () => {\n            const value = !docManager.autosave;\n            const key = 'autosave';\n            return settingRegistry\n                .set(docManagerPluginId, key, value)\n                .catch((reason) => {\n                console.error(`Failed to set ${docManagerPluginId}:${key} - ${reason.message}`);\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.toggleNameFileOnSave, {\n        label: trans.__('Name File on First Save'),\n        isToggled: () => docManager.nameFileOnSave,\n        execute: () => {\n            const value = !docManager.nameFileOnSave;\n            const key = 'nameFileOnSave';\n            return settingRegistry\n                .set(docManagerPluginId, key, value)\n                .catch((reason) => {\n                console.error(`Failed to set ${docManagerPluginId}:${key} - ${reason.message}`);\n            });\n        }\n    });\n    docManager.optionChanged.connect(() => {\n        var _a;\n        const key = 'nameFileOnSave';\n        const value = (_a = settingRegistry.plugins[docManagerPluginId]) === null || _a === void 0 ? void 0 : _a.data.user[key];\n        if (value == docManager.nameFileOnSave) {\n            void settingRegistry\n                .set(docManagerPluginId, key, !value)\n                .catch((reason) => {\n                console.error(`Failed to set ${docManagerPluginId}:${key} - ${reason.message}`);\n            });\n        }\n    });\n    docManager.activateRequested.connect((sender, args) => {\n        const widget = sender.findWidget(args);\n        if (widget && widget.shouldNameFile) {\n            widget.shouldNameFile.connect(() => {\n                if (sender.nameFileOnSave && widget == shell.currentWidget) {\n                    const context = sender.contextForWidget(widget);\n                    return nameOnSaveDialog(sender, context);\n                }\n            });\n        }\n    });\n    // .jp-mod-current added so that the console-creation command is only shown\n    // on the current document.\n    // Otherwise it will delegate to the wrong widget.\n    app.contextMenu.addItem({\n        command: 'filemenu:create-console',\n        selector: '[data-type=\"document-title\"].jp-mod-current',\n        rank: 6\n    });\n    if (palette) {\n        [\n            CommandIDs.reload,\n            CommandIDs.restoreCheckpoint,\n            CommandIDs.save,\n            CommandIDs.saveAs,\n            CommandIDs.toggleAutosave\n        ].forEach(command => {\n            palette.addItem({ command, category });\n        });\n    }\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([\n            { command: CommandIDs.toggleAutosave },\n            { command: CommandIDs.toggleNameFileOnSave }\n        ], 5);\n    }\n}\nfunction addLabCommands(app, docManager, labShell, opener, translator, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    // Returns the doc widget associated with the most recent contextmenu event.\n    const contextMenuWidget = () => {\n        var _a;\n        const pathRe = /[Pp]ath:\\s?(.*)\\n?/;\n        const test = (node) => { var _a; return !!((_a = node['title']) === null || _a === void 0 ? void 0 : _a.match(pathRe)); };\n        const node = app.contextMenuHitTest(test);\n        const pathMatch = node === null || node === void 0 ? void 0 : node['title'].match(pathRe);\n        return ((_a = (pathMatch && docManager.findWidget(pathMatch[1], null))) !== null && _a !== void 0 ? _a : \n        // Fall back to active doc widget if path cannot be obtained from event.\n        labShell.currentWidget);\n    };\n    // Returns `true` if the current widget has a document context.\n    const isEnabled = () => {\n        const { currentWidget } = labShell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    commands.addCommand(CommandIDs.clone, {\n        label: () => trans.__('New View for %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: args => {\n            const widget = contextMenuWidget();\n            const options = args['options'] || {\n                mode: 'split-right'\n            };\n            if (!widget) {\n                return;\n            }\n            // Clone the widget.\n            const child = docManager.cloneWidget(widget);\n            if (child) {\n                opener.open(child, options);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.rename, {\n        label: () => {\n            let t = fileType(contextMenuWidget(), docManager);\n            if (t) {\n                t = ' ' + t;\n            }\n            return trans.__('Rename%1…', t);\n        },\n        isEnabled,\n        execute: () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                return renameDialog(docManager, context.path);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.nameOnSave, {\n        label: () => trans.__('Rename %1…', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                return nameOnSaveDialog(docManager, context);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.del, {\n        label: () => trans.__('Delete %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: async () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                if (!context) {\n                    return;\n                }\n                const result = await showDialog({\n                    title: trans.__('Delete'),\n                    body: trans.__('Are you sure you want to delete %1', context.path),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Delete') })\n                    ]\n                });\n                if (result.button.accept) {\n                    await app.commands.execute('docmanager:delete-file', {\n                        path: context.path\n                    });\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.showInFileBrowser, {\n        label: () => trans.__('Show in File Browser'),\n        isEnabled,\n        execute: async () => {\n            const widget = contextMenuWidget();\n            const context = widget && docManager.contextForWidget(widget);\n            if (!context) {\n                return;\n            }\n            // 'activate' is needed if this command is selected in the \"open tabs\" sidebar\n            await commands.execute('filebrowser:activate', { path: context.path });\n            await commands.execute('filebrowser:go-to-path', { path: context.path });\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.rename,\n        selector: '[data-type=\"document-title\"]',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.del,\n        selector: '[data-type=\"document-title\"]',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.clone,\n        selector: '[data-type=\"document-title\"]',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.showInFileBrowser,\n        selector: '[data-type=\"document-title\"]',\n        rank: 4\n    });\n}\n/**\n * Handle dirty state for a context.\n */\nfunction handleContext(status, context) {\n    let disposable = null;\n    const onStateChanged = (sender, args) => {\n        if (args.name === 'dirty') {\n            if (args.newValue === true) {\n                if (!disposable) {\n                    disposable = status.setDirty();\n                }\n            }\n            else if (disposable) {\n                disposable.dispose();\n                disposable = null;\n            }\n        }\n    };\n    void context.ready.then(() => {\n        context.model.stateChanged.connect(onStateChanged);\n        if (context.model.dirty) {\n            disposable = status.setDirty();\n        }\n    });\n    context.disposed.connect(() => {\n        if (disposable) {\n            disposable.dispose();\n        }\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A counter for unique IDs.\n     */\n    Private.id = 0;\n    function createRevertConfirmNode(checkpoint, fileType, trans) {\n        const body = document.createElement('div');\n        const confirmMessage = document.createElement('p');\n        const confirmText = document.createTextNode(trans.__('Are you sure you want to revert the %1 to the latest checkpoint? ', fileType));\n        const cannotUndoText = document.createElement('strong');\n        cannotUndoText.textContent = trans.__('This cannot be undone.');\n        confirmMessage.appendChild(confirmText);\n        confirmMessage.appendChild(cannotUndoText);\n        const lastCheckpointMessage = document.createElement('p');\n        const lastCheckpointText = document.createTextNode(trans.__('The checkpoint was last updated at: '));\n        const lastCheckpointDate = document.createElement('p');\n        const date = new Date(checkpoint.last_modified);\n        lastCheckpointDate.style.textAlign = 'center';\n        lastCheckpointDate.textContent =\n            Time.format(date, 'dddd, MMMM Do YYYY, h:mm:ss a') +\n                ' (' +\n                Time.formatHuman(date) +\n                ')';\n        lastCheckpointMessage.appendChild(lastCheckpointText);\n        lastCheckpointMessage.appendChild(lastCheckpointDate);\n        body.appendChild(confirmMessage);\n        body.appendChild(lastCheckpointMessage);\n        return body;\n    }\n    Private.createRevertConfirmNode = createRevertConfirmNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
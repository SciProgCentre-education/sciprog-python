{"version":3,"file":"8383.0817c0f6f00bbe999104.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/actions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/default-toolbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/celllist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/modelfactory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/modestatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/notebooktools.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/tracker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/truststatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook/lib/widgetfactory.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Clipboard, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeCell, isCodeCellModel, isMarkdownCellModel, isRawCellModel, MarkdownCell } from '@jupyterlab/cells';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, each, findIndex, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport * as React from 'react';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\nexport class KernelError extends Error {\n    /**\n     * Construct the kernel error.\n     */\n    constructor(content) {\n        const errorContent = content;\n        const errorName = errorContent.ename;\n        const errorValue = errorContent.evalue;\n        super(`KernelReplyNotOK: ${errorName} ${errorValue}`);\n        this.errorName = errorName;\n        this.errorValue = errorValue;\n        this.traceback = errorContent.traceback;\n        Object.setPrototypeOf(this, KernelError.prototype);\n    }\n}\n/**\n * A collection of actions that run against notebooks.\n *\n * #### Notes\n * All of the actions are a no-op if there is no model on the notebook.\n * The actions set the widget `mode` to `'command'` unless otherwise specified.\n * The actions will preserve the selection on the notebook widget unless\n * otherwise specified.\n */\nexport class NotebookActions {\n    /**\n     * A signal that emits whenever a cell completes execution.\n     */\n    static get executed() {\n        return Private.executed;\n    }\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    static get executionScheduled() {\n        return Private.executionScheduled;\n    }\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    static get selectionExecuted() {\n        return Private.selectionExecuted;\n    }\n    /**\n     * A private constructor for the `NotebookActions` class.\n     *\n     * #### Notes\n     * This class can never be instantiated. Its static member `executed` will be\n     * merged with the `NotebookActions` namespace. The reason it exists as a\n     * standalone class is because at run time, the `Private.executed` variable\n     * does not yet exist, so it needs to be referenced via a getter.\n     */\n    constructor() {\n        // Intentionally empty.\n    }\n}\n/**\n * A namespace for `NotebookActions` static methods.\n */\n(function (NotebookActions) {\n    /**\n     * Split the active cell into two or more cells.\n     *\n     * @param notebook The target notebook widget.\n     *\n     * #### Notes\n     * It will preserve the existing mode.\n     * The last cell will be activated if no selection is found.\n     * If text was selected, the cell containing the selection will\n     * be activated.\n     * The existing selection will be cleared.\n     * The activated cell will have focus and the cursor will\n     * remain in the initial position.\n     * The leading whitespace in the second cell will be removed.\n     * If there is no content, two empty cells will be created.\n     * Both cells will have the same type as the original cell.\n     * This action can be undone.\n     */\n    function splitCell(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        const nbModel = notebook.model;\n        const index = notebook.activeCellIndex;\n        const child = notebook.widgets[index];\n        const editor = child.editor;\n        const selections = editor.getSelections();\n        const orig = child.model.value.text;\n        const offsets = [0];\n        let start = -1;\n        let end = -1;\n        for (let i = 0; i < selections.length; i++) {\n            // append start and end to handle selections\n            // cursors will have same start and end\n            start = editor.getOffsetAt(selections[i].start);\n            end = editor.getOffsetAt(selections[i].end);\n            if (start < end) {\n                offsets.push(start);\n                offsets.push(end);\n            }\n            else if (end < start) {\n                offsets.push(end);\n                offsets.push(start);\n            }\n            else {\n                offsets.push(start);\n            }\n        }\n        offsets.push(orig.length);\n        const clones = [];\n        for (let i = 0; i + 1 < offsets.length; i++) {\n            const clone = Private.cloneCell(nbModel, child.model);\n            clones.push(clone);\n        }\n        for (let i = 0; i < clones.length; i++) {\n            if (i !== clones.length - 1 && clones[i].type === 'code') {\n                clones[i].outputs.clear();\n            }\n            clones[i].value.text = orig\n                .slice(offsets[i], offsets[i + 1])\n                .replace(/^\\n+/, '')\n                .replace(/\\n+$/, '');\n        }\n        const cells = nbModel.cells;\n        cells.beginCompoundOperation();\n        for (let i = 0; i < clones.length; i++) {\n            if (i === 0) {\n                cells.set(index, clones[i]);\n            }\n            else {\n                cells.insert(index + i, clones[i]);\n            }\n        }\n        cells.endCompoundOperation();\n        // If there is a selection the selected cell will be activated\n        const activeCellDelta = start !== end ? 2 : 1;\n        notebook.activeCellIndex = index + clones.length - activeCellDelta;\n        const focusedEditor = notebook.activeCell.editor;\n        focusedEditor.focus();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.splitCell = splitCell;\n    /**\n     * Merge the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mergeAbove - If only one cell is selected, indicates whether to merge it\n     *    with the cell above (true) or below (false, default).\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * If only one cell is selected and `mergeAbove` is true, the above cell will be selected.\n     * If only one cell is selected and `mergeAbove` is false, the below cell will be selected.\n     * If the active cell is a code cell, its outputs will be cleared.\n     * This action can be undone.\n     * The final cell will have the same type as the active cell.\n     * If the active cell is a markdown cell, it will be unrendered.\n     */\n    function mergeCells(notebook, mergeAbove = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const toMerge = [];\n        const toDelete = [];\n        const model = notebook.model;\n        const cells = model.cells;\n        const primary = notebook.activeCell;\n        const active = notebook.activeCellIndex;\n        const attachments = {};\n        // Get the cells to merge.\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                toMerge.push(child.model.value.text);\n                if (index !== active) {\n                    toDelete.push(child.model);\n                }\n                // Collect attachments if the cell is a markdown cell or a raw cell\n                const model = child.model;\n                if (isRawCellModel(model) || isMarkdownCellModel(model)) {\n                    for (const key of model.attachments.keys) {\n                        attachments[key] = model.attachments.get(key).toJSON();\n                    }\n                }\n            }\n        });\n        // Check for only a single cell selected.\n        if (toMerge.length === 1) {\n            // Merge with the cell above when mergeAbove is true\n            if (mergeAbove === true) {\n                // Bail if it is the first cell.\n                if (active === 0) {\n                    return;\n                }\n                // Otherwise merge with the previous cell.\n                const cellModel = cells.get(active - 1);\n                toMerge.unshift(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n            else if (mergeAbove === false) {\n                // Bail if it is the last cell.\n                if (active === cells.length - 1) {\n                    return;\n                }\n                // Otherwise merge with the next cell.\n                const cellModel = cells.get(active + 1);\n                toMerge.push(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n        }\n        notebook.deselectAll();\n        // Create a new cell for the source to preserve history.\n        const newModel = Private.cloneCell(model, primary.model);\n        newModel.value.text = toMerge.join('\\n\\n');\n        if (isCodeCellModel(newModel)) {\n            newModel.outputs.clear();\n        }\n        else if (isMarkdownCellModel(newModel) || isRawCellModel(newModel)) {\n            newModel.attachments.fromJSON(attachments);\n        }\n        // Make the changes while preserving history.\n        cells.beginCompoundOperation();\n        cells.set(active, newModel);\n        toDelete.forEach(cell => {\n            cells.removeValue(cell);\n        });\n        cells.endCompoundOperation();\n        // If the original cell is a markdown cell, make sure\n        // the new cell is unrendered.\n        if (primary instanceof MarkdownCell) {\n            notebook.activeCell.rendered = false;\n        }\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.mergeCells = mergeCells;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.deleteCells(notebook);\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.deleteCells = deleteCells;\n    /**\n     * Insert a new code cell above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will the active cell.\n     */\n    function insertAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        const active = notebook.activeCellIndex;\n        model.cells.insert(active, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex = active;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertAbove = insertAbove;\n    /**\n     * Insert a new code cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will be the active cell.\n     */\n    function insertBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex++;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertBelow = insertBelow;\n    /**\n     * Move the selected cell(s) down.\n     *\n     * @param notebook = The target notebook widget.\n     */\n    function moveDown(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = cells.length - 2; i > -1; i--) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i + 1])) {\n                    cells.move(i, i + 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex++;\n                    }\n                    notebook.select(widgets[i + 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveDown = moveDown;\n    /**\n     * Move the selected cell(s) up.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function moveUp(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = 1; i < cells.length; i++) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i - 1])) {\n                    cells.move(i, i - 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex--;\n                    }\n                    notebook.select(widgets[i - 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveUp = moveUp;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.changeCellType(notebook, value);\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.changeCellType = changeCellType;\n    /**\n     * Run the selected cell(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The last selected cell will be activated, but not scrolled into view.\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     */\n    function run(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, false);\n        return promise;\n    }\n    NotebookActions.run = run;\n    /**\n     * Run the selected cell(s) and advance to the next cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * The cell after the last selected cell will be activated and scrolled into view.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * If the last selected cell is the last cell, a new code cell\n     * will be created in `'edit'` mode.  The new cell creation can be undone.\n     */\n    function runAndAdvance(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n            // Do not use push here, as we want an widget insertion\n            // to make sure no placeholder widget is rendered.\n            model.cells.insert(notebook.widgets.length, cell);\n            notebook.activeCellIndex++;\n            notebook.mode = 'edit';\n        }\n        else {\n            notebook.activeCellIndex++;\n        }\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndAdvance = runAndAdvance;\n    /**\n     * Run the selected cell(s) and insert a new code cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The widget mode will be set to `'edit'` after running.\n     * The existing selection will be cleared.\n     * The cell insert can be undone.\n     * The new cell will be scrolled into view.\n     */\n    function runAndInsert(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        notebook.activeCellIndex++;\n        notebook.mode = 'edit';\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndInsert = runAndInsert;\n    /**\n     * Run all of the cells in the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAll(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAll = runAll;\n    function renderAllMarkdown(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const previousIndex = notebook.activeCellIndex;\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach((child, index) => {\n            if (child.model.type === 'markdown') {\n                notebook.select(child);\n                // This is to make sure that the activeCell\n                // does not get executed\n                notebook.activeCellIndex = index;\n            }\n        });\n        if (notebook.activeCell.model.type !== 'markdown') {\n            return Promise.resolve(true);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex = previousIndex;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.renderAllMarkdown = renderAllMarkdown;\n    /**\n     * Run all of the cells before the currently active cell (exclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The currently active cell will remain selected.\n     */\n    function runAllAbove(notebook, sessionContext) {\n        const { activeCell, activeCellIndex, model } = notebook;\n        if (!model || !activeCell || activeCellIndex < 1) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex--;\n        notebook.deselectAll();\n        for (let i = 0; i < notebook.activeCellIndex; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex++;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllAbove = runAllAbove;\n    /**\n     * Run all of the cells after the currently active cell (inclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAllBelow(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        for (let i = notebook.activeCellIndex; i < notebook.widgets.length; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllBelow = runAllBelow;\n    /**\n     * Replaces the selection in the active cell of the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     * @param text - The text to replace the selection.\n     */\n    function replaceSelection(notebook, text) {\n        var _a, _b;\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        (_b = (_a = notebook.activeCell.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n    }\n    NotebookActions.replaceSelection = replaceSelection;\n    /**\n     * Select the above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the first cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        let possibleNextCellIndex = notebook.activeCellIndex - 1;\n        // find first non hidden cell above current cell\n        while (possibleNextCellIndex >= 0) {\n            const possibleNextCell = notebook.widgets[possibleNextCellIndex];\n            if (!possibleNextCell.inputHidden && !possibleNextCell.isHidden) {\n                break;\n            }\n            possibleNextCellIndex -= 1;\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCellIndex;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectAbove = selectAbove;\n    /**\n     * Select the cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the last cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        let maxCellIndex = notebook.widgets.length - 1;\n        // Find last non-hidden cell\n        while (notebook.widgets[maxCellIndex].isHidden ||\n            notebook.widgets[maxCellIndex].inputHidden) {\n            maxCellIndex -= 1;\n        }\n        if (notebook.activeCellIndex === maxCellIndex) {\n            return;\n        }\n        let possibleNextCellIndex = notebook.activeCellIndex + 1;\n        // find first non hidden cell below current cell\n        while (possibleNextCellIndex < maxCellIndex) {\n            let possibleNextCell = notebook.widgets[possibleNextCellIndex];\n            if (!possibleNextCell.inputHidden && !possibleNextCell.isHidden) {\n                break;\n            }\n            possibleNextCellIndex += 1;\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCellIndex;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectBelow = selectBelow;\n    /**\n     * Extend the selection to the cell above.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toTop - If true, denotes selection to extend to the top.\n     *\n     * #### Notes\n     * This is a no-op if the first cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionAbove(notebook, toTop = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toTop is true, if yes, selection is made to the top.\n        if (toTop) {\n            notebook.extendContiguousSelectionTo(0);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex - 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionAbove = extendSelectionAbove;\n    /**\n     * Extend the selection to the cell below.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toBottom - If true, denotes selection to extend to the bottom.\n     *\n     * #### Notes\n     * This is a no-op if the last cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionBelow(notebook, toBottom = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toBottom is true, if yes selection is made to the bottom.\n        if (toBottom) {\n            notebook.extendContiguousSelectionTo(notebook.widgets.length - 1);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex + 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionBelow = extendSelectionBelow;\n    /**\n     * Select all of the cells of the notebook.\n     *\n     * @param notebook - the target notebook widget.\n     */\n    function selectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n    }\n    NotebookActions.selectAll = selectAll;\n    /**\n     * Deselect all of the cells of the notebook.\n     *\n     * @param notebook - the target notebook widget.\n     */\n    function deselectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.deselectAll();\n    }\n    NotebookActions.deselectAll = deselectAll;\n    /**\n     * Copy the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function copy(notebook) {\n        Private.copyOrCut(notebook, false);\n    }\n    NotebookActions.copy = copy;\n    /**\n     * Cut the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This action can be undone.\n     * A new code cell is added if all cells are cut.\n     */\n    function cut(notebook) {\n        Private.copyOrCut(notebook, true);\n    }\n    NotebookActions.cut = cut;\n    /**\n     * Paste cells from the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mode - the mode of the paste operation: 'below' pastes cells\n     *   below the active cell, 'above' pastes cells above the active cell,\n     *   and 'replace' removes the currently selected cells and pastes cells\n     *   in their place.\n     *\n     * #### Notes\n     * The last pasted cell becomes the active cell.\n     * This is a no-op if there is no cell data on the clipboard.\n     * This action can be undone.\n     */\n    function paste(notebook, mode = 'below') {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const clipboard = Clipboard.getInstance();\n        if (!clipboard.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const values = clipboard.getData(JUPYTER_CELL_MIME);\n        const model = notebook.model;\n        notebook.mode = 'command';\n        const newCells = values.map(cell => {\n            switch (cell.cell_type) {\n                case 'code':\n                    return model.contentFactory.createCodeCell({ cell });\n                case 'markdown':\n                    return model.contentFactory.createMarkdownCell({ cell });\n                default:\n                    return model.contentFactory.createRawCell({ cell });\n            }\n        });\n        const cells = notebook.model.cells;\n        let index;\n        cells.beginCompoundOperation();\n        // Set the starting index of the paste operation depending upon the mode.\n        switch (mode) {\n            case 'below':\n                index = notebook.activeCellIndex;\n                break;\n            case 'above':\n                index = notebook.activeCellIndex - 1;\n                break;\n            case 'replace': {\n                // Find the cells to delete.\n                const toDelete = [];\n                notebook.widgets.forEach((child, index) => {\n                    const deletable = child.model.metadata.get('deletable') !== false;\n                    if (notebook.isSelectedOrActive(child) && deletable) {\n                        toDelete.push(index);\n                    }\n                });\n                // If cells are not deletable, we may not have anything to delete.\n                if (toDelete.length > 0) {\n                    // Delete the cells as one undo event.\n                    toDelete.reverse().forEach(i => {\n                        cells.remove(i);\n                    });\n                }\n                index = toDelete[0];\n                break;\n            }\n            default:\n                break;\n        }\n        newCells.forEach(cell => {\n            cells.insert(++index, cell);\n        });\n        cells.endCompoundOperation();\n        notebook.activeCellIndex += newCells.length;\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.paste = paste;\n    /**\n     * Undo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if if there are no cell actions to undo.\n     */\n    function undo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.undo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.undo = undo;\n    /**\n     * Redo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if there are no cell actions to redo.\n     */\n    function redo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.redo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.redo = redo;\n    /**\n     * Toggle the line number of all cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The original state is based on the state of the active cell.\n     * The `mode` of the widget will be preserved.\n     */\n    function toggleAllLineNumbers(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const config = notebook.editorConfig;\n        const lineNumbers = !(config.code.lineNumbers &&\n            config.markdown.lineNumbers &&\n            config.raw.lineNumbers);\n        const newConfig = {\n            code: Object.assign(Object.assign({}, config.code), { lineNumbers }),\n            markdown: Object.assign(Object.assign({}, config.markdown), { lineNumbers }),\n            raw: Object.assign(Object.assign({}, config.raw), { lineNumbers })\n        };\n        notebook.editorConfig = newConfig;\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.toggleAllLineNumbers = toggleAllLineNumbers;\n    /**\n     * Clear the code outputs of the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (notebook.isSelectedOrActive(child) && cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearOutputs = clearOutputs;\n    /**\n     * Clear all the code outputs on the widget.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearAllOutputs = clearAllOutputs;\n    /**\n     * Hide the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideCode = hideCode;\n    /**\n     * Show the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showCode = showCode;\n    /**\n     * Hide the code on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideAllCode = hideAllCode;\n    /**\n     * Show the code on all code cells.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function showAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllCode = showAllCode;\n    /**\n     * Hide the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideOutput = hideOutput;\n    /**\n     * Show the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showOutput = showOutput;\n    /**\n     * Hide the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideAllOutputs = hideAllOutputs;\n    /**\n     * Show the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllOutputs = showAllOutputs;\n    /**\n     * Enable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function enableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.enableOutputScrolling = enableOutputScrolling;\n    /**\n     * Disable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function disableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.disableOutputScrolling = disableOutputScrolling;\n    /**\n     * Go to the last cell that is run or current if it is running.\n     *\n     * Note: This requires execution timing to be toggled on or this will have\n     * no effect.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function selectLastRunCell(notebook) {\n        let latestTime = null;\n        let latestCellIdx = null;\n        notebook.widgets.forEach((cell, cellIndx) => {\n            if (cell.model.type === 'code') {\n                const execution = cell.model.metadata.get('execution');\n                if (execution &&\n                    JSONExt.isObject(execution) &&\n                    execution['iopub.status.busy'] !== undefined) {\n                    // The busy status is used as soon as a request is received:\n                    // https://jupyter-client.readthedocs.io/en/stable/messaging.html\n                    const timestamp = execution['iopub.status.busy'].toString();\n                    if (timestamp) {\n                        const startTime = new Date(timestamp);\n                        if (!latestTime || startTime >= latestTime) {\n                            latestTime = startTime;\n                            latestCellIdx = cellIndx;\n                        }\n                    }\n                }\n            }\n        });\n        if (latestCellIdx !== null) {\n            notebook.activeCellIndex = latestCellIdx;\n        }\n    }\n    NotebookActions.selectLastRunCell = selectLastRunCell;\n    /**\n     * Set the markdown header level.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param level - The header level.\n     *\n     * #### Notes\n     * All selected cells will be switched to markdown.\n     * The level will be clamped between 1 and 6.\n     * If there is an existing header, it will be replaced.\n     * There will always be one blank space after the header.\n     * The cells will be unrendered.\n     */\n    function setMarkdownHeader(notebook, level) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        level = Math.min(Math.max(level, 1), 6);\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                Private.setMarkdownHeader(cells.get(index), level);\n            }\n        });\n        Private.changeCellType(notebook, 'markdown');\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.setMarkdownHeader = setMarkdownHeader;\n    /**\n     * Collapse all cells in given notebook.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function collapseAll(notebook) {\n        for (const cell of notebook.widgets) {\n            if (NotebookActions.getHeadingInfo(cell).isHeading) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n                NotebookActions.setCellCollapse(cell, true);\n            }\n        }\n    }\n    NotebookActions.collapseAll = collapseAll;\n    /**\n     * Un-collapse all cells in given notebook.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function expandAllHeadings(notebook) {\n        for (const cell of notebook.widgets) {\n            if (NotebookActions.getHeadingInfo(cell).isHeading) {\n                NotebookActions.setHeadingCollapse(cell, false, notebook);\n                // similar to collapseAll.\n                NotebookActions.setCellCollapse(cell, false);\n            }\n        }\n    }\n    NotebookActions.expandAllHeadings = expandAllHeadings;\n    function findNearestParentHeader(cell, notebook) {\n        const index = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (index === -1) {\n            return;\n        }\n        // Finds the nearest header above the given cell. If the cell is a header itself, it does not return itself;\n        // this can be checked directly by calling functions.\n        if (index >= notebook.widgets.length) {\n            return;\n        }\n        let childHeaderInfo = getHeadingInfo(notebook.widgets[index]);\n        for (let cellN = index - 1; cellN >= 0; cellN--) {\n            if (cellN < notebook.widgets.length) {\n                let hInfo = getHeadingInfo(notebook.widgets[cellN]);\n                if (hInfo.isHeading &&\n                    hInfo.headingLevel < childHeaderInfo.headingLevel) {\n                    return notebook.widgets[cellN];\n                }\n            }\n        }\n        // else no parent header found.\n        return;\n    }\n    /**\n     * Finds the \"parent\" heading of the given cell and expands.\n     * Used for the case that a cell becomes active that is within a collapsed heading.\n     * @param cell - \"Child\" cell that has become the active cell\n     * @param notebook - The target notebook widget.\n     */\n    function expandParent(cell, notebook) {\n        let nearestParentCell = findNearestParentHeader(cell, notebook);\n        if (!nearestParentCell) {\n            return;\n        }\n        if (!getHeadingInfo(nearestParentCell).collapsed &&\n            !nearestParentCell.isHidden) {\n            return;\n        }\n        if (nearestParentCell.isHidden) {\n            expandParent(nearestParentCell, notebook);\n        }\n        if (getHeadingInfo(nearestParentCell).collapsed) {\n            setHeadingCollapse(nearestParentCell, false, notebook);\n        }\n    }\n    NotebookActions.expandParent = expandParent;\n    /**\n     * Finds the next heading that isn't a child of the given markdown heading.\n     * @param cell - \"Child\" cell that has become the active cell\n     * @param notebook - The target notebook widget.\n     */\n    function findNextParentHeading(cell, notebook) {\n        let index = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (index === -1) {\n            return -1;\n        }\n        let childHeaderInfo = getHeadingInfo(cell);\n        for (index = index + 1; index < notebook.widgets.length; index++) {\n            let hInfo = getHeadingInfo(notebook.widgets[index]);\n            if (hInfo.isHeading &&\n                hInfo.headingLevel <= childHeaderInfo.headingLevel) {\n                return index;\n            }\n        }\n        // else no parent header found. return the index of the last cell\n        return notebook.widgets.length;\n    }\n    NotebookActions.findNextParentHeading = findNextParentHeading;\n    /**\n     * Set the given cell and ** all \"child\" cells **\n     * to the given collapse / expand if cell is\n     * a markdown header.\n     *\n     * @param cell - The cell\n     * @param collapsing - Whether to collapse or expand the cell\n     * @param notebook - The target notebook widget.\n     */\n    function setHeadingCollapse(cell, collapsing, notebook) {\n        const which = findIndex(notebook.widgets, (possibleCell, index) => {\n            return cell.model.id === possibleCell.model.id;\n        });\n        if (which === -1) {\n            return -1;\n        }\n        if (!notebook.widgets.length) {\n            return which + 1;\n        }\n        let selectedHeadingInfo = NotebookActions.getHeadingInfo(cell);\n        if (cell.isHidden ||\n            !(cell instanceof MarkdownCell) ||\n            !selectedHeadingInfo.isHeading) {\n            // otherwise collapsing and uncollapsing already hidden stuff can\n            // cause some funny looking bugs.\n            return which + 1;\n        }\n        let localCollapsed = false;\n        let localCollapsedLevel = 0;\n        // iterate through all cells after the active cell.\n        let cellNum;\n        for (cellNum = which + 1; cellNum < notebook.widgets.length; cellNum++) {\n            let subCell = notebook.widgets[cellNum];\n            let subCellHeadingInfo = NotebookActions.getHeadingInfo(subCell);\n            if (subCellHeadingInfo.isHeading &&\n                subCellHeadingInfo.headingLevel <= selectedHeadingInfo.headingLevel) {\n                // then reached an equivalent or higher heading level than the\n                // original the end of the collapse.\n                cellNum -= 1;\n                break;\n            }\n            if (localCollapsed &&\n                subCellHeadingInfo.isHeading &&\n                subCellHeadingInfo.headingLevel <= localCollapsedLevel) {\n                // then reached the end of the local collapsed, so unset NotebookActions.\n                localCollapsed = false;\n            }\n            if (collapsing || localCollapsed) {\n                // then no extra handling is needed for further locally collapsed\n                // headings.\n                subCell.setHidden(true);\n                continue;\n            }\n            if (subCellHeadingInfo.collapsed && subCellHeadingInfo.isHeading) {\n                localCollapsed = true;\n                localCollapsedLevel = subCellHeadingInfo.headingLevel;\n                // but don't collapse the locally collapsed heading, so continue to\n                // expand the heading. This will get noticed in the next round.\n            }\n            subCell.setHidden(false);\n        }\n        if (cellNum === notebook.widgets.length) {\n            cell.numberChildNodes = cellNum - which - 1;\n        }\n        else {\n            cell.numberChildNodes = cellNum - which;\n        }\n        NotebookActions.setCellCollapse(cell, collapsing);\n        return cellNum + 1;\n    }\n    NotebookActions.setHeadingCollapse = setHeadingCollapse;\n    /**\n     * Toggles the collapse state of the active cell of the given notebook\n     * and ** all of its \"child\" cells ** if the cell is a heading.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function toggleCurrentHeadingCollapse(notebook) {\n        if (!notebook.activeCell || notebook.activeCellIndex === undefined) {\n            return;\n        }\n        let headingInfo = NotebookActions.getHeadingInfo(notebook.activeCell);\n        if (headingInfo.isHeading) {\n            // Then toggle!\n            NotebookActions.setHeadingCollapse(notebook.activeCell, !headingInfo.collapsed, notebook);\n        }\n        ElementExt.scrollIntoViewIfNeeded(notebook.node, notebook.activeCell.node);\n    }\n    NotebookActions.toggleCurrentHeadingCollapse = toggleCurrentHeadingCollapse;\n    /**\n     * If cell is a markdown heading, sets the headingCollapsed field,\n     * and otherwise hides the cell.\n     *\n     * @param cell - The cell to collapse / expand\n     * @param collapsing - Whether to collapse or expand the given cell\n     */\n    function setCellCollapse(cell, collapsing) {\n        if (cell instanceof MarkdownCell) {\n            cell.headingCollapsed = collapsing;\n        }\n        else {\n            cell.setHidden(collapsing);\n        }\n    }\n    NotebookActions.setCellCollapse = setCellCollapse;\n    /**\n     * If given cell is a markdown heading, returns the heading level.\n     * If given cell is not markdown, returns 7 (there are only 6 levels of markdown headings)\n     *\n     * @param cell - The target cell widget.\n     */\n    function getHeadingInfo(cell) {\n        if (!(cell instanceof MarkdownCell)) {\n            return { isHeading: false, headingLevel: 7 };\n        }\n        let level = cell.headingInfo.level;\n        let collapsed = cell.headingCollapsed;\n        return { isHeading: level > 0, headingLevel: level, collapsed: collapsed };\n    }\n    NotebookActions.getHeadingInfo = getHeadingInfo;\n    /**\n     * Trust the notebook after prompting the user.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @returns a promise that resolves when the transaction is finished.\n     *\n     * #### Notes\n     * No dialog will be presented if the notebook is already trusted.\n     */\n    function trust(notebook, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        if (!notebook.model) {\n            return Promise.resolve();\n        }\n        // Do nothing if already trusted.\n        const cells = toArray(notebook.model.cells);\n        const trusted = cells.every(cell => cell.trusted);\n        // FIXME\n        const trustMessage = (React.createElement(\"p\", null,\n            trans.__('A trusted Jupyter notebook may execute hidden malicious code when you open it.'),\n            React.createElement(\"br\", null),\n            trans.__('Selecting trust will re-render this notebook in a trusted state.'),\n            React.createElement(\"br\", null),\n            trans.__('For more information, see'),\n            ' ',\n            React.createElement(\"a\", { href: \"https://jupyter-server.readthedocs.io/en/stable/operators/security.html\", target: \"_blank\", rel: \"noopener noreferrer\" }, trans.__('the Jupyter security documentation'))));\n        if (trusted) {\n            return showDialog({\n                body: trans.__('Notebook is already trusted'),\n                buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n            }).then(() => undefined);\n        }\n        return showDialog({\n            body: trustMessage,\n            title: trans.__('Trust this notebook?'),\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: trans.__('Ok') })\n            ] // FIXME?\n        }).then(result => {\n            if (result.button.accept) {\n                cells.forEach(cell => {\n                    cell.trusted = true;\n                });\n            }\n        });\n    }\n    NotebookActions.trust = trust;\n})(NotebookActions || (NotebookActions = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A signal that emits whenever a cell completes execution.\n     */\n    Private.executed = new Signal({});\n    /**\n     * A signal that emits whenever a cell execution is scheduled.\n     */\n    Private.executionScheduled = new Signal({});\n    /**\n     * A signal that emits when one notebook's cells are all executed.\n     */\n    Private.selectionExecuted = new Signal({});\n    /**\n     * Get the state of a widget before running an action.\n     */\n    function getState(notebook) {\n        return {\n            wasFocused: notebook.node.contains(document.activeElement),\n            activeCell: notebook.activeCell\n        };\n    }\n    Private.getState = getState;\n    /**\n     * Handle the state of a widget after running an action.\n     */\n    function handleState(notebook, state, scrollIfNeeded = false) {\n        const { activeCell, node } = notebook;\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scrollIfNeeded && activeCell) {\n            ElementExt.scrollIntoViewIfNeeded(node, activeCell.node);\n        }\n    }\n    Private.handleState = handleState;\n    /**\n     * Handle the state of a widget after running a run action.\n     */\n    function handleRunState(notebook, state, scroll = false) {\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scroll && state.activeCell) {\n            // Scroll to the top of the previous active cell output.\n            const rect = state.activeCell.inputArea.node.getBoundingClientRect();\n            notebook.scrollToPosition(rect.bottom, 45);\n        }\n    }\n    Private.handleRunState = handleRunState;\n    /**\n     * Clone a cell model.\n     */\n    function cloneCell(model, cell) {\n        switch (cell.type) {\n            case 'code':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createCodeCell({ cell: cell.toJSON() });\n            case 'markdown':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createMarkdownCell({ cell: cell.toJSON() });\n            default:\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createRawCell({ cell: cell.toJSON() });\n        }\n    }\n    Private.cloneCell = cloneCell;\n    /**\n     * Run the selected cells.\n     */\n    function runSelected(notebook, sessionContext) {\n        notebook.mode = 'command';\n        let lastIndex = notebook.activeCellIndex;\n        const selected = notebook.widgets.filter((child, index) => {\n            const active = notebook.isSelectedOrActive(child);\n            if (active) {\n                lastIndex = index;\n            }\n            return active;\n        });\n        notebook.activeCellIndex = lastIndex;\n        notebook.deselectAll();\n        return Promise.all(selected.map(child => runCell(notebook, child, sessionContext)))\n            .then(results => {\n            if (notebook.isDisposed) {\n                return false;\n            }\n            Private.selectionExecuted.emit({\n                notebook,\n                lastCell: notebook.widgets[lastIndex]\n            });\n            // Post an update request.\n            notebook.update();\n            return results.every(result => result);\n        })\n            .catch(reason => {\n            if (reason.message.startsWith('KernelReplyNotOK')) {\n                selected.map(cell => {\n                    // Remove '*' prompt from cells that didn't execute\n                    if (cell.model.type === 'code' &&\n                        cell.model.executionCount == null) {\n                        cell.setPrompt('');\n                    }\n                });\n            }\n            else {\n                throw reason;\n            }\n            Private.selectionExecuted.emit({\n                notebook,\n                lastCell: notebook.widgets[lastIndex]\n            });\n            notebook.update();\n            return false;\n        });\n    }\n    Private.runSelected = runSelected;\n    /**\n     * Run a cell.\n     */\n    function runCell(notebook, cell, sessionContext, translator) {\n        var _a, _b, _c;\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        switch (cell.model.type) {\n            case 'markdown':\n                cell.rendered = true;\n                cell.inputHidden = false;\n                Private.executed.emit({ notebook, cell, success: true });\n                break;\n            case 'code':\n                if (sessionContext) {\n                    if (sessionContext.isTerminating) {\n                        void showDialog({\n                            title: trans.__('Kernel Terminating'),\n                            body: trans.__('The kernel for %1 appears to be terminating. You can not run any cell for now.', (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                        });\n                        break;\n                    }\n                    const deletedCells = (_c = (_b = notebook.model) === null || _b === void 0 ? void 0 : _b.deletedCells) !== null && _c !== void 0 ? _c : [];\n                    Private.executionScheduled.emit({ notebook, cell });\n                    return CodeCell.execute(cell, sessionContext, {\n                        deletedCells,\n                        recordTiming: notebook.notebookConfig.recordTiming\n                    })\n                        .then(reply => {\n                        deletedCells.splice(0, deletedCells.length);\n                        if (cell.isDisposed) {\n                            return false;\n                        }\n                        if (!reply) {\n                            return true;\n                        }\n                        if (reply.content.status === 'ok') {\n                            const content = reply.content;\n                            if (content.payload && content.payload.length) {\n                                handlePayload(content, notebook, cell);\n                            }\n                            return true;\n                        }\n                        else {\n                            throw new KernelError(reply.content);\n                        }\n                    })\n                        .catch(reason => {\n                        if (cell.isDisposed || reason.message.startsWith('Canceled')) {\n                            return false;\n                        }\n                        Private.executed.emit({ notebook, cell, success: false, error: reason });\n                        throw reason;\n                    })\n                        .then(ran => {\n                        if (ran) {\n                            Private.executed.emit({ notebook, cell, success: true });\n                        }\n                        return ran;\n                    });\n                }\n                cell.model.clearExecution();\n                break;\n            default:\n                break;\n        }\n        return Promise.resolve(true);\n    }\n    /**\n     * Handle payloads from an execute reply.\n     *\n     * #### Notes\n     * Payloads are deprecated and there are no official interfaces for them in\n     * the kernel type definitions.\n     * See [Payloads (DEPRECATED)](https://jupyter-client.readthedocs.io/en/latest/messaging.html#payloads-deprecated).\n     */\n    function handlePayload(content, notebook, cell) {\n        var _a;\n        const setNextInput = (_a = content.payload) === null || _a === void 0 ? void 0 : _a.filter(i => {\n            return i.source === 'set_next_input';\n        })[0];\n        if (!setNextInput) {\n            return;\n        }\n        const text = setNextInput.text;\n        const replace = setNextInput.replace;\n        if (replace) {\n            cell.model.value.text = text;\n            return;\n        }\n        // Create a new code cell and add as the next cell.\n        const newCell = notebook.model.contentFactory.createCodeCell({});\n        const cells = notebook.model.cells;\n        const index = ArrayExt.firstIndexOf(toArray(cells), cell.model);\n        newCell.value.text = text;\n        if (index === -1) {\n            cells.push(newCell);\n        }\n        else {\n            cells.insert(index + 1, newCell);\n        }\n    }\n    /**\n     * Copy or cut the selected cell data to the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param cut - Whether to copy or cut.\n     */\n    function copyOrCut(notebook, cut) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = getState(notebook);\n        const clipboard = Clipboard.getInstance();\n        notebook.mode = 'command';\n        clipboard.clear();\n        const data = notebook.widgets\n            .filter(cell => notebook.isSelectedOrActive(cell))\n            .map(cell => cell.model.toJSON())\n            .map(cellJSON => {\n            if (cellJSON.metadata.deletable !== undefined) {\n                delete cellJSON.metadata.deletable;\n            }\n            return cellJSON;\n        });\n        clipboard.setData(JUPYTER_CELL_MIME, data);\n        if (cut) {\n            deleteCells(notebook);\n        }\n        else {\n            notebook.deselectAll();\n        }\n        handleState(notebook, state);\n    }\n    Private.copyOrCut = copyOrCut;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        const model = notebook.model;\n        const cells = model.cells;\n        cells.beginCompoundOperation();\n        notebook.widgets.forEach((child, index) => {\n            if (!notebook.isSelectedOrActive(child)) {\n                return;\n            }\n            if (child.model.type !== value) {\n                const cell = child.model.toJSON();\n                let newCell;\n                switch (value) {\n                    case 'code':\n                        newCell = model.contentFactory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        newCell = model.contentFactory.createMarkdownCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                        break;\n                    default:\n                        newCell = model.contentFactory.createRawCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                }\n                cells.set(index, newCell);\n            }\n            if (value === 'markdown') {\n                // Fetch the new widget and unrender it.\n                child = notebook.widgets[index];\n                child.rendered = false;\n            }\n        });\n        cells.endCompoundOperation();\n        notebook.deselectAll();\n    }\n    Private.changeCellType = changeCellType;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * If the last cell is deleted, then the previous one will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        const model = notebook.model;\n        const cells = model.cells;\n        const toDelete = [];\n        notebook.mode = 'command';\n        // Find the cells to delete.\n        notebook.widgets.forEach((child, index) => {\n            const deletable = child.model.metadata.get('deletable') !== false;\n            if (notebook.isSelectedOrActive(child) && deletable) {\n                toDelete.push(index);\n                model.deletedCells.push(child.model.id);\n            }\n        });\n        // If cells are not deletable, we may not have anything to delete.\n        if (toDelete.length > 0) {\n            // Delete the cells as one undo event.\n            cells.beginCompoundOperation();\n            // Delete cells in reverse order to maintain the correct indices.\n            toDelete.reverse().forEach(index => {\n                cells.remove(index);\n            });\n            // Add a new cell if the notebook is empty. This is done\n            // within the compound operation to make the deletion of\n            // a notebook's last cell undoable.\n            if (!cells.length) {\n                cells.push(model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {}));\n            }\n            cells.endCompoundOperation();\n            // Select the *first* interior cell not deleted or the cell\n            // *after* the last selected cell.\n            // Note: The activeCellIndex is clamped to the available cells,\n            // so if the last cell is deleted the previous cell will be activated.\n            // The *first* index is the index of the last cell in the initial\n            // toDelete list due to the `reverse` operation above.\n            notebook.activeCellIndex = toDelete[0] - toDelete.length + 1;\n        }\n        // Deselect any remaining, undeletable cells. Do this even if we don't\n        // delete anything so that users are aware *something* happened.\n        notebook.deselectAll();\n    }\n    Private.deleteCells = deleteCells;\n    /**\n     * Set the markdown header level of a cell.\n     */\n    function setMarkdownHeader(cell, level) {\n        // Remove existing header or leading white space.\n        let source = cell.value.text;\n        const regex = /^(#+\\s*)|^(\\s*)/;\n        const newHeader = Array(level + 1).join('#') + ' ';\n        const matches = regex.exec(source);\n        if (matches) {\n            source = source.slice(matches[0].length);\n        }\n        cell.value.text = newHeader + source;\n    }\n    Private.setMarkdownHeader = setMarkdownHeader;\n})(Private || (Private = {}));\n//# sourceMappingURL=actions.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { addToolbarButtonClass, Dialog, ReactWidget, sessionContextDialogs, showDialog, Toolbar, ToolbarButton, ToolbarButtonComponent, UseSignal } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon, copyIcon, cutIcon, fastForwardIcon, HTMLSelect, pasteIcon, runIcon, saveIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { NotebookActions } from './actions';\n/**\n * The class name added to toolbar cell type dropdown wrapper.\n */\nconst TOOLBAR_CELLTYPE_CLASS = 'jp-Notebook-toolbarCellType';\n/**\n * The class name added to toolbar cell type dropdown.\n */\nconst TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';\n/**\n * A namespace for the default toolbar items.\n */\nexport var ToolbarItems;\n(function (ToolbarItems) {\n    /**\n     * Create save button toolbar item.\n     */\n    function createSaveButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        function onClick() {\n            if (panel.context.model.readOnly) {\n                return showDialog({\n                    title: trans.__('Cannot Save'),\n                    body: trans.__('Document is read-only'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            void panel.context.save().then(() => {\n                if (!panel.isDisposed) {\n                    return panel.context.createCheckpoint();\n                }\n            });\n        }\n        return addToolbarButtonClass(ReactWidget.create(React.createElement(UseSignal, { signal: panel.context.fileChanged }, () => (React.createElement(ToolbarButtonComponent, { icon: saveIcon, onClick: onClick, tooltip: trans.__('Save the notebook contents and create checkpoint'), enabled: !!(panel &&\n                panel.context &&\n                panel.context.contentsModel &&\n                panel.context.contentsModel.writable) })))));\n    }\n    ToolbarItems.createSaveButton = createSaveButton;\n    /**\n     * Create an insert toolbar item.\n     */\n    function createInsertButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                NotebookActions.insertBelow(panel.content);\n            },\n            tooltip: trans.__('Insert a cell below')\n        });\n    }\n    ToolbarItems.createInsertButton = createInsertButton;\n    /**\n     * Create a cut toolbar item.\n     */\n    function createCutButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: cutIcon,\n            onClick: () => {\n                NotebookActions.cut(panel.content);\n            },\n            tooltip: trans.__('Cut the selected cells')\n        });\n    }\n    ToolbarItems.createCutButton = createCutButton;\n    /**\n     * Create a copy toolbar item.\n     */\n    function createCopyButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: copyIcon,\n            onClick: () => {\n                NotebookActions.copy(panel.content);\n            },\n            tooltip: trans.__('Copy the selected cells')\n        });\n    }\n    ToolbarItems.createCopyButton = createCopyButton;\n    /**\n     * Create a paste toolbar item.\n     */\n    function createPasteButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: pasteIcon,\n            onClick: () => {\n                NotebookActions.paste(panel.content);\n            },\n            tooltip: trans.__('Paste cells from the clipboard')\n        });\n    }\n    ToolbarItems.createPasteButton = createPasteButton;\n    /**\n     * Create a run toolbar item.\n     */\n    function createRunButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: runIcon,\n            onClick: () => {\n                void NotebookActions.runAndAdvance(panel.content, panel.sessionContext);\n            },\n            tooltip: trans.__('Run the selected cells and advance')\n        });\n    }\n    ToolbarItems.createRunButton = createRunButton;\n    /**\n     * Create a restart run all toolbar item\n     */\n    function createRestartRunAllButton(panel, dialogs, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: fastForwardIcon,\n            onClick: () => {\n                void (dialogs !== null && dialogs !== void 0 ? dialogs : sessionContextDialogs)\n                    .restart(panel.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(panel.content, panel.sessionContext);\n                    }\n                    return restarted;\n                });\n            },\n            tooltip: trans.__('Restart the kernel, then re-run the whole notebook')\n        });\n    }\n    ToolbarItems.createRestartRunAllButton = createRestartRunAllButton;\n    /**\n     * Create a cell type switcher item.\n     *\n     * #### Notes\n     * It will display the type of the current active cell.\n     * If more than one cell is selected but are of different types,\n     * it will display `'-'`.\n     * When the user changes the cell type, it will change the\n     * cell types of the selected cells.\n     * It can handle a change to the context.\n     */\n    function createCellTypeItem(panel, translator) {\n        return new CellTypeSwitcher(panel.content, translator);\n    }\n    ToolbarItems.createCellTypeItem = createCellTypeItem;\n    /**\n     * Get the default toolbar items for panel\n     */\n    function getDefaultItems(panel, sessionDialogs, translator) {\n        return [\n            { name: 'save', widget: createSaveButton(panel, translator) },\n            { name: 'insert', widget: createInsertButton(panel, translator) },\n            { name: 'cut', widget: createCutButton(panel, translator) },\n            { name: 'copy', widget: createCopyButton(panel, translator) },\n            { name: 'paste', widget: createPasteButton(panel, translator) },\n            { name: 'run', widget: createRunButton(panel, translator) },\n            {\n                name: 'interrupt',\n                widget: Toolbar.createInterruptButton(panel.sessionContext, translator)\n            },\n            {\n                name: 'restart',\n                widget: Toolbar.createRestartButton(panel.sessionContext, sessionDialogs, translator)\n            },\n            {\n                name: 'restart-and-run',\n                widget: createRestartRunAllButton(panel, sessionDialogs, translator)\n            },\n            { name: 'cellType', widget: createCellTypeItem(panel, translator) },\n            { name: 'spacer', widget: Toolbar.createSpacerItem() },\n            {\n                name: 'kernelName',\n                widget: Toolbar.createKernelNameItem(panel.sessionContext, sessionDialogs, translator)\n            },\n            {\n                name: 'kernelStatus',\n                widget: Toolbar.createKernelStatusItem(panel.sessionContext, translator)\n            }\n        ];\n    }\n    ToolbarItems.getDefaultItems = getDefaultItems;\n})(ToolbarItems || (ToolbarItems = {}));\n/**\n * A toolbar widget that switches cell types.\n */\nexport class CellTypeSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     */\n    constructor(widget, translator) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            if (event.target.value !== '-') {\n                NotebookActions.changeCellType(this._notebook, event.target.value);\n                this._notebook.activate();\n            }\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._notebook.activate();\n            }\n        };\n        this._trans = (translator || nullTranslator).load('jupyterlab');\n        this.addClass(TOOLBAR_CELLTYPE_CLASS);\n        this._notebook = widget;\n        if (widget.model) {\n            this.update();\n        }\n        widget.activeCellChanged.connect(this.update, this);\n        // Follow a change in the selection.\n        widget.selectionChanged.connect(this.update, this);\n    }\n    render() {\n        let value = '-';\n        if (this._notebook.activeCell) {\n            value = this._notebook.activeCell.model.type;\n        }\n        for (const widget of this._notebook.widgets) {\n            if (this._notebook.isSelectedOrActive(widget)) {\n                if (widget.model.type !== value) {\n                    value = '-';\n                    break;\n                }\n            }\n        }\n        return (React.createElement(HTMLSelect, { className: TOOLBAR_CELLTYPE_DROPDOWN_CLASS, onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: value, \"aria-label\": this._trans.__('Cell type'), title: this._trans.__('Select the cell type') },\n            React.createElement(\"option\", { value: \"-\" }, \"-\"),\n            React.createElement(\"option\", { value: \"code\" }, this._trans.__('Code')),\n            React.createElement(\"option\", { value: \"markdown\" }, this._trans.__('Markdown')),\n            React.createElement(\"option\", { value: \"raw\" }, this._trans.__('Raw'))));\n    }\n}\n//# sourceMappingURL=default-toolbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport * as models from '@jupyterlab/shared-models';\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A cell list object that supports undo/redo.\n */\nexport class CellList {\n    /**\n     * Construct the cell list.\n     */\n    constructor(modelDB, factory, model) {\n        /**\n         * Prevents that the modeldb event handler is executed when the shared-model event handler is executed and vice-versa.\n         */\n        this._mutex = models.createMutex();\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._factory = factory;\n        this._cellOrder = modelDB.createList('cellOrder');\n        this._cellMap = new ObservableMap();\n        this._cellOrder.changed.connect(this._onOrderChanged, this);\n        this.nbmodel = model;\n        this.nbmodel.changed.connect(this.onSharedModelChanged, this);\n        this.changed.connect(this.onModelDBChanged, this);\n    }\n    onModelDBChanged(self, change) {\n        this._mutex(() => {\n            const nbmodel = this.nbmodel;\n            nbmodel.transact(() => {\n                if (change.type === 'set' || change.type === 'remove') {\n                    nbmodel.deleteCellRange(change.oldIndex, change.oldIndex + change.oldValues.length);\n                }\n                if (change.type === 'set' ||\n                    change.type === 'add' ||\n                    change.type === 'move') {\n                    const cells = change.newValues.map(cell => {\n                        return cell.sharedModel.clone();\n                    });\n                    let insertLocation = change.newIndex;\n                    if (change.type === 'move' && insertLocation > change.oldIndex) {\n                        insertLocation += change.oldValues.length;\n                    }\n                    nbmodel.insertCells(insertLocation, cells);\n                    change.newValues.forEach((cell, index) => {\n                        cell.switchSharedModel(cells[index], false);\n                    });\n                }\n                if (change.type === 'move') {\n                    let from = change.oldIndex;\n                    if (from >= change.newIndex) {\n                        from += change.oldValues.length;\n                    }\n                    nbmodel.deleteCellRange(from, from + change.oldValues.length);\n                }\n            });\n        });\n    }\n    onSharedModelChanged(self, change) {\n        this._mutex(() => {\n            var _a;\n            let currpos = 0;\n            (_a = change.cellsChange) === null || _a === void 0 ? void 0 : _a.forEach(delta => {\n                if (delta.insert != null) {\n                    const cells = delta.insert.map(nbcell => {\n                        const cell = this._factory.createCell(nbcell.cell_type, {});\n                        cell.switchSharedModel(nbcell, true);\n                        return cell;\n                    });\n                    this.insertAll(currpos, cells);\n                    currpos += delta.insert.length;\n                }\n                else if (delta.delete != null) {\n                    this.removeRange(currpos, currpos + delta.delete);\n                }\n                else if (delta.retain != null) {\n                    currpos += delta.retain;\n                }\n            });\n        });\n    }\n    /**\n     * A signal emitted when the cell list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Test whether the cell list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Test whether the list is empty.\n     *\n     * @returns `true` if the cell list is empty, `false` otherwise.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get isEmpty() {\n        return this._cellOrder.length === 0;\n    }\n    /**\n     * Get the length of the cell list.\n     *\n     * @return The number of cells in the cell list.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get length() {\n        return this._cellOrder.length;\n    }\n    /**\n     * Create an iterator over the cells in the cell list.\n     *\n     * @returns A new iterator starting at the front of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        const arr = [];\n        for (const id of toArray(this._cellOrder)) {\n            arr.push(this._cellMap.get(id));\n        }\n        return new ArrayIterator(arr);\n    }\n    /**\n     * Dispose of the resources held by the cell list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        // Clean up the cell map and cell order objects.\n        for (const cell of this._cellMap.values()) {\n            cell.dispose();\n        }\n        this._cellMap.dispose();\n        this._cellOrder.dispose();\n    }\n    /**\n     * Get the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The cell at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._cellMap.get(this._cellOrder.get(index));\n    }\n    /**\n     * Set the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    set(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.set(index, cell.id);\n    }\n    /**\n     * Add a cell to the back of the cell list.\n     *\n     * @param cell - The cell to add to the back of the cell list.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    push(cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        const num = this._cellOrder.push(cell.id);\n        return num;\n    }\n    /**\n     * Insert a cell into the cell list at a specific index.\n     *\n     * @param index - The index at which to insert the cell.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insert(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.insert(index, cell.id);\n    }\n    /**\n     * Remove the first occurrence of a cell from the cell list.\n     *\n     * @param cell - The cell of interest.\n     *\n     * @returns The index of the removed cell, or `-1` if the cell\n     *   is not contained in the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     */\n    removeValue(cell) {\n        const index = ArrayExt.findFirstIndex(toArray(this._cellOrder), id => this._cellMap.get(id) === cell);\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the cell at a specific index.\n     *\n     * @param index - The index of the cell of interest.\n     *\n     * @returns The cell at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const id = this._cellOrder.get(index);\n        this._cellOrder.remove(index);\n        const cell = this._cellMap.get(id);\n        return cell;\n    }\n    /**\n     * Remove all cells from the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        this._cellOrder.clear();\n    }\n    /**\n     * Move a cell from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        this._cellOrder.move(fromIndex, toIndex);\n    }\n    /**\n     * Push a set of cells to the back of the cell list.\n     *\n     * @param cells - An iterable or array-like set of cells to add.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    pushAll(cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            // Set the internal data structures.\n            this._cellMap.set(cell.id, cell);\n            this._cellOrder.push(cell.id);\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the cell list at the specified index.\n     *\n     * @param index - The index at which to insert the cells.\n     *\n     * @param cells - The cells to insert at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insertAll(index, cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            this._cellMap.set(cell.id, cell);\n            // @todo it looks like this compound operation shoult start before the `each` loop.\n            this._cellOrder.beginCompoundOperation();\n            this._cellOrder.insert(index++, cell.id);\n            this._cellOrder.endCompoundOperation();\n        });\n        return this.length;\n    }\n    /**\n     * Remove a range of items from the cell list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed cell and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        this._cellOrder.removeRange(startIndex, endIndex);\n        return this.length;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this.nbmodel.canRedo();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this.nbmodel.canUndo();\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._cellOrder.beginCompoundOperation(isUndoAble);\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._cellOrder.endCompoundOperation();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.nbmodel.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.nbmodel.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this.nbmodel.clearUndoHistory();\n    }\n    _onOrderChanged(order, change) {\n        if (change.type === 'add' || change.type === 'set') {\n            each(change.newValues, id => {\n                const existingCell = this._cellMap.get(id);\n                if (existingCell == null) {\n                    const cellDB = this._factory.modelDB;\n                    const cellType = cellDB.createValue(id + '.type');\n                    let cell;\n                    switch (cellType.get()) {\n                        case 'code':\n                            cell = this._factory.createCodeCell({ id: id });\n                            break;\n                        case 'markdown':\n                            cell = this._factory.createMarkdownCell({ id: id });\n                            break;\n                        default:\n                            cell = this._factory.createRawCell({ id: id });\n                            break;\n                    }\n                    this._cellMap.set(id, cell);\n                }\n                else if (!existingCell.sharedModel.isStandalone) {\n                    this._mutex(() => {\n                        // it does already exist, probably because it was deleted previously and we introduced it\n                        // copy it to a fresh codecell instance\n                        const cell = existingCell.toJSON();\n                        let freshCell = null;\n                        switch (cell.cell_type) {\n                            case 'code':\n                                freshCell = this._factory.createCodeCell({ cell });\n                                break;\n                            case 'markdown':\n                                freshCell = this._factory.createMarkdownCell({ cell });\n                                break;\n                            default:\n                                freshCell = this._factory.createRawCell({ cell });\n                                break;\n                        }\n                        this._cellMap.set(id, freshCell);\n                    });\n                }\n            });\n        }\n        const newValues = [];\n        const oldValues = [];\n        each(change.newValues, id => {\n            newValues.push(this._cellMap.get(id));\n        });\n        each(change.oldValues, id => {\n            oldValues.push(this._cellMap.get(id));\n        });\n        this._changed.emit({\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        });\n    }\n}\n//# sourceMappingURL=celllist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeCellModel, MarkdownCellModel, RawCellModel } from '@jupyterlab/cells';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ModelDB } from '@jupyterlab/observables';\nimport * as models from '@jupyterlab/shared-models';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { UUID } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { CellList } from './celllist';\n/**\n * An implementation of a notebook Model.\n */\nexport class NotebookModel {\n    /**\n     * Construct a new notebook model.\n     */\n    constructor(options = {}) {\n        /**\n         * The shared notebook model.\n         */\n        this.sharedModel = models.YNotebook.create();\n        this._dirty = false;\n        this._readOnly = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._nbformat = nbformat.MAJOR_VERSION;\n        this._nbformatMinor = nbformat.MINOR_VERSION;\n        this._isDisposed = false;\n        if (options.modelDB) {\n            this.modelDB = options.modelDB;\n        }\n        else {\n            this.modelDB = new ModelDB();\n        }\n        this._isInitialized = options.isInitialized === false ? false : true;\n        const factory = options.contentFactory || NotebookModel.defaultContentFactory;\n        this.contentFactory = factory.clone(this.modelDB.view('cells'));\n        this._cells = new CellList(this.modelDB, this.contentFactory, this.sharedModel);\n        this._trans = (options.translator || nullTranslator).load('jupyterlab');\n        this._cells.changed.connect(this._onCellsChanged, this);\n        // Handle initial metadata.\n        const metadata = this.modelDB.createMap('metadata');\n        if (!metadata.has('language_info')) {\n            const name = options.languagePreference || '';\n            metadata.set('language_info', { name });\n        }\n        this._ensureMetadata();\n        metadata.changed.connect(this.triggerContentChange, this);\n        this._deletedCells = [];\n        this.sharedModel.changed.connect(this._onStateChanged, this);\n    }\n    /**\n     * A signal emitted when the document content changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the document state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The dirty state of the document.\n     */\n    get dirty() {\n        return this._dirty;\n    }\n    set dirty(newValue) {\n        if (newValue === this._dirty) {\n            return;\n        }\n        const oldValue = this._dirty;\n        this._dirty = newValue;\n        this.triggerStateChange({ name: 'dirty', oldValue, newValue });\n    }\n    /**\n     * The read only state of the document.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(newValue) {\n        if (newValue === this._readOnly) {\n            return;\n        }\n        const oldValue = this._readOnly;\n        this._readOnly = newValue;\n        this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n    }\n    /**\n     * The metadata associated with the notebook.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the observable list of notebook cells.\n     */\n    get cells() {\n        return this._cells;\n    }\n    /**\n     * The major version number of the nbformat.\n     */\n    get nbformat() {\n        return this._nbformat;\n    }\n    /**\n     * The minor version number of the nbformat.\n     */\n    get nbformatMinor() {\n        return this._nbformatMinor;\n    }\n    /**\n     * The default kernel name of the document.\n     */\n    get defaultKernelName() {\n        const spec = this.metadata.get('kernelspec');\n        return spec ? spec.name : '';\n    }\n    /**\n     * A list of deleted cells for the notebook..\n     */\n    get deletedCells() {\n        return this._deletedCells;\n    }\n    /**\n     * If the model is initialized or not.\n     */\n    get isInitialized() {\n        return this._isInitialized;\n    }\n    /**\n     * The default kernel language of the document.\n     */\n    get defaultKernelLanguage() {\n        const info = this.metadata.get('language_info');\n        return info ? info.name : '';\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        const cells = this.cells;\n        this._cells = null;\n        cells.dispose();\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Serialize the model to a string.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n    /**\n     * Deserialize the model from a string.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromString(value) {\n        this.fromJSON(JSON.parse(value));\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        var _a, _b;\n        const cells = [];\n        for (let i = 0; i < ((_b = (_a = this.cells) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i++) {\n            const cell = this.cells.get(i).toJSON();\n            if (this._nbformat === 4 && this._nbformatMinor <= 4) {\n                // strip cell ids if we have notebook format 4.0-4.4\n                delete cell.id;\n            }\n            cells.push(cell);\n        }\n        this._ensureMetadata();\n        const metadata = this.sharedModel.getMetadata();\n        for (const key of this.metadata.keys()) {\n            metadata[key] = JSON.parse(JSON.stringify(this.metadata.get(key)));\n        }\n        return {\n            metadata,\n            nbformat_minor: this._nbformatMinor,\n            nbformat: this._nbformat,\n            cells\n        };\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromJSON(value) {\n        const cells = [];\n        const factory = this.contentFactory;\n        const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n        for (const cell of value.cells) {\n            const options = { cell };\n            if (useId) {\n                options.id = cell.id;\n            }\n            switch (cell.cell_type) {\n                case 'code':\n                    cells.push(factory.createCodeCell(options));\n                    break;\n                case 'markdown':\n                    cells.push(factory.createMarkdownCell(options));\n                    break;\n                case 'raw':\n                    cells.push(factory.createRawCell(options));\n                    break;\n                default:\n                    continue;\n            }\n        }\n        this.cells.beginCompoundOperation();\n        this.cells.clear();\n        this.cells.pushAll(cells);\n        this.cells.endCompoundOperation();\n        this.sharedModel.nbformat_minor =\n            nbformat.MINOR_VERSION;\n        this.sharedModel.nbformat = nbformat.MAJOR_VERSION;\n        const origNbformat = value.metadata.orig_nbformat;\n        if (value.nbformat !== this._nbformat) {\n            this.sharedModel.nbformat = value.nbformat;\n        }\n        if (value.nbformat_minor > this._nbformatMinor) {\n            this.sharedModel.nbformat_minor =\n                value.nbformat_minor;\n        }\n        // Alert the user if the format changes.\n        if (origNbformat !== undefined && this._nbformat !== origNbformat) {\n            const newer = this._nbformat > origNbformat;\n            let msg;\n            if (newer) {\n                msg = this._trans.__(`This notebook has been converted from an older notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (v%2) will be used.\n'Older versions of Jupyter may not be able to read the new format.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            else {\n                msg = this._trans.__(`This notebook has been converted from an newer notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (v%2) will be used.\nSome features of the original notebook may not be available.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            void showDialog({\n                title: this._trans.__('Notebook converted'),\n                body: msg,\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n        }\n        // Update the metadata.\n        this.metadata.clear();\n        const metadata = value.metadata;\n        for (const key in metadata) {\n            // orig_nbformat is not intended to be stored per spec.\n            if (key === 'orig_nbformat') {\n                continue;\n            }\n            this.metadata.set(key, metadata[key]);\n        }\n        this._ensureMetadata();\n        this.dirty = true;\n    }\n    /**\n     * Initialize the model with its current state.\n     *\n     * # Notes\n     * Adds an empty code cell if the model is empty\n     * and clears undo state.\n     */\n    initialize() {\n        if (!this.cells.length) {\n            const factory = this.contentFactory;\n            this.cells.push(factory.createCodeCell({}));\n        }\n        this._isInitialized = true;\n        this.cells.clearUndo();\n    }\n    /**\n     * Handle a change in the cells list.\n     */\n    _onCellsChanged(list, change) {\n        switch (change.type) {\n            case 'add':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            case 'remove':\n                break;\n            case 'set':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            default:\n                break;\n        }\n        this.triggerContentChange();\n    }\n    _onStateChanged(sender, changes) {\n        if (changes.stateChange) {\n            changes.stateChange.forEach(value => {\n                if (value.name === 'nbformat') {\n                    this._nbformat = value.newValue;\n                }\n                if (value.name === 'nbformatMinor') {\n                    this._nbformatMinor = value.newValue;\n                }\n                if (value.name === 'dirty') {\n                    this._dirty = value.newValue;\n                }\n                this.triggerStateChange(value);\n            });\n        }\n    }\n    /**\n     * Make sure we have the required metadata fields.\n     */\n    _ensureMetadata() {\n        const metadata = this.metadata;\n        if (!metadata.has('language_info')) {\n            metadata.set('language_info', { name: '' });\n        }\n        if (!metadata.has('kernelspec')) {\n            metadata.set('kernelspec', { name: '', display_name: '' });\n        }\n    }\n    /**\n     * Trigger a state change signal.\n     */\n    triggerStateChange(args) {\n        this._stateChanged.emit(args);\n    }\n    /**\n     * Trigger a content changed signal.\n     */\n    triggerContentChange() {\n        this._contentChanged.emit(void 0);\n        this.dirty = true;\n    }\n    /**\n     * Whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n}\n/**\n * The namespace for the `NotebookModel` class statics.\n */\n(function (NotebookModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create a new cell model factory.\n         */\n        constructor(options) {\n            this.codeCellContentFactory =\n                options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n            this.modelDB = options.modelDB;\n        }\n        /**\n         * Create a new cell by cell type.\n         *\n         * @param type:  the type of the cell to create.\n         *\n         * @param options: the cell creation options.\n         *\n         * #### Notes\n         * This method is intended to be a convenience method to programmatically\n         * call the other cell creation methods in the factory.\n         */\n        createCell(type, options) {\n            switch (type) {\n                case 'code':\n                    return this.createCodeCell(options);\n                case 'markdown':\n                    return this.createMarkdownCell(options);\n                case 'raw':\n                default:\n                    return this.createRawCell(options);\n            }\n        }\n        /**\n         * Create a new code cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new code cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         *   If the contentFactory is not provided, the instance\n         *   `codeCellContentFactory` will be used.\n         */\n        createCodeCell(options) {\n            if (options.contentFactory) {\n                options.contentFactory = this.codeCellContentFactory;\n            }\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new CodeCellModel(options);\n        }\n        /**\n         * Create a new markdown cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new markdown cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createMarkdownCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new MarkdownCellModel(options);\n        }\n        /**\n         * Create a new raw cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new raw cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createRawCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new RawCellModel(options);\n        }\n        /**\n         * Clone the content factory with a new IModelDB.\n         */\n        clone(modelDB) {\n            return new ContentFactory({\n                modelDB: modelDB,\n                codeCellContentFactory: this.codeCellContentFactory\n            });\n        }\n    }\n    NotebookModel.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    NotebookModel.defaultContentFactory = new ContentFactory({});\n})(NotebookModel || (NotebookModel = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { NotebookModel } from './model';\n/**\n * A model factory for notebooks.\n */\nexport class NotebookModelFactory {\n    /**\n     * Construct a new notebook model factory.\n     */\n    constructor(options) {\n        this._disposed = false;\n        const codeCellContentFactory = options.codeCellContentFactory;\n        this.contentFactory =\n            options.contentFactory ||\n                new NotebookModel.ContentFactory({ codeCellContentFactory });\n    }\n    /**\n     * The name of the model.\n     */\n    get name() {\n        return 'notebook';\n    }\n    /**\n     * The content type of the file.\n     */\n    get contentType() {\n        return 'notebook';\n    }\n    /**\n     * The format of the file.\n     */\n    get fileFormat() {\n        return 'json';\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the model factory.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Create a new model for a given path.\n     *\n     * @param languagePreference - An optional kernel language preference.\n     *\n     * @returns A new document model.\n     */\n    createNew(languagePreference, modelDB, isInitialized) {\n        const contentFactory = this.contentFactory;\n        return new NotebookModel({\n            languagePreference,\n            contentFactory,\n            modelDB,\n            isInitialized\n        });\n    }\n    /**\n     * Get the preferred kernel language given a path.\n     */\n    preferredLanguage(path) {\n        return '';\n    }\n}\n//# sourceMappingURL=modelfactory.js.map","import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport * as React from 'react';\n/**\n * A pure function for rendering a Command/Edit mode component.\n *\n * @param props: the props for rendering the component.\n *\n * @returns a tsx component for command/edit mode.\n */\nfunction CommandEditComponent(props) {\n    const trans = (props.translator || nullTranslator).load('jupyterlab');\n    return (React.createElement(TextItem, { source: trans.__('Mode: %1', props.modeNames[props.notebookMode]) }));\n}\n/**\n * StatusBar item to display which notebook mode user is in.\n */\nexport class CommandEditStatus extends VDomRenderer {\n    /**\n     * Construct a new CommandEdit status item.\n     */\n    constructor(translator) {\n        super(new CommandEditStatus.Model());\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._modeNames = {\n            command: this._trans.__('Command'),\n            edit: this._trans.__('Edit')\n        };\n    }\n    /**\n     * Render the CommandEdit status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = this._trans.__('Notebook is in %1 mode', this._modeNames[this.model.notebookMode]);\n        return (React.createElement(CommandEditComponent, { notebookMode: this.model.notebookMode, translator: this.translator, modeNames: this._modeNames }));\n    }\n}\n/**\n * A namespace for CommandEdit statics.\n */\n(function (CommandEditStatus) {\n    /**\n     * A VDomModel for the CommandEdit renderer.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * On a change to the notebook, update the mode.\n             */\n            this._onChanged = (_notebook) => {\n                const oldMode = this._notebookMode;\n                if (this._notebook) {\n                    this._notebookMode = _notebook.mode;\n                }\n                else {\n                    this._notebookMode = 'command';\n                }\n                this._triggerChange(oldMode, this._notebookMode);\n            };\n            this._notebookMode = 'command';\n            this._notebook = null;\n        }\n        /**\n         * The current mode of the current notebook.\n         */\n        get notebookMode() {\n            return this._notebookMode;\n        }\n        /**\n         * Set the current notebook for the model.\n         */\n        set notebook(notebook) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.stateChanged.disconnect(this._onChanged, this);\n                oldNotebook.activeCellChanged.disconnect(this._onChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onChanged, this);\n            }\n            const oldMode = this._notebookMode;\n            this._notebook = notebook;\n            if (this._notebook === null) {\n                this._notebookMode = 'command';\n            }\n            else {\n                this._notebookMode = this._notebook.mode;\n                this._notebook.stateChanged.connect(this._onChanged, this);\n                this._notebook.activeCellChanged.connect(this._onChanged, this);\n                this._notebook.modelContentChanged.connect(this._onChanged, this);\n            }\n            this._triggerChange(oldMode, this._notebookMode);\n        }\n        /**\n         * Trigger a state change for the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState !== newState) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    CommandEditStatus.Model = Model;\n})(CommandEditStatus || (CommandEditStatus = {}));\n//# sourceMappingURL=modestatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Collapse, Styling } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper, JSONEditor } from '@jupyterlab/codeeditor';\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, chain, each } from '@lumino/algorithm';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nclass RankedPanel extends Widget {\n    constructor() {\n        super();\n        this._items = [];\n        this.layout = new PanelLayout();\n        this.addClass('jp-RankedPanel');\n    }\n    addWidget(widget, rank) {\n        const rankItem = { widget, rank };\n        const index = ArrayExt.upperBound(this._items, rankItem, Private.itemCmp);\n        ArrayExt.insert(this._items, index, rankItem);\n        const layout = this.layout;\n        layout.insertWidget(index, widget);\n    }\n    /**\n     * Handle the removal of a child\n     *\n     */\n    onChildRemoved(msg) {\n        const index = ArrayExt.findFirstIndex(this._items, item => item.widget === msg.child);\n        if (index !== -1) {\n            ArrayExt.removeAt(this._items, index);\n        }\n    }\n}\n/**\n * A widget that provides metadata tools.\n */\nexport class NotebookTools extends Widget {\n    /**\n     * Construct a new NotebookTools object.\n     */\n    constructor(options) {\n        super();\n        this.addClass('jp-NotebookTools');\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._commonTools = new RankedPanel();\n        this._advancedTools = new RankedPanel();\n        this._advancedTools.title.label = this._trans.__('Advanced Tools');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(this._commonTools);\n        layout.addWidget(new Collapse({ widget: this._advancedTools }));\n        this._tracker = options.tracker;\n        this._tracker.currentChanged.connect(this._onActiveNotebookPanelChanged, this);\n        this._tracker.activeCellChanged.connect(this._onActiveCellChanged, this);\n        this._tracker.selectionChanged.connect(this._onSelectionChanged, this);\n        this._onActiveNotebookPanelChanged();\n        this._onActiveCellChanged();\n        this._onSelectionChanged();\n    }\n    /**\n     * The active cell widget.\n     */\n    get activeCell() {\n        return this._tracker.activeCell;\n    }\n    /**\n     * The currently selected cells.\n     */\n    get selectedCells() {\n        const panel = this._tracker.currentWidget;\n        if (!panel) {\n            return [];\n        }\n        const notebook = panel.content;\n        return notebook.widgets.filter(cell => notebook.isSelectedOrActive(cell));\n    }\n    /**\n     * The current notebook.\n     */\n    get activeNotebookPanel() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Add a cell tool item.\n     */\n    addItem(options) {\n        var _a;\n        const tool = options.tool;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        let section;\n        if (options.section === 'advanced') {\n            section = this._advancedTools;\n        }\n        else {\n            section = this._commonTools;\n        }\n        tool.addClass('jp-NotebookTools-tool');\n        section.addWidget(tool, rank);\n        // TODO: perhaps the necessary notebookTools functionality should be\n        // consolidated into a single object, rather than a broad reference to this.\n        tool.notebookTools = this;\n        // Trigger the tool to update its active notebook and cell.\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveNotebookPanelMessage);\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveCellMessage);\n    }\n    /**\n     * Handle a change to the notebook panel.\n     */\n    _onActiveNotebookPanelChanged() {\n        if (this._prevActiveNotebookModel &&\n            !this._prevActiveNotebookModel.isDisposed) {\n            this._prevActiveNotebookModel.metadata.changed.disconnect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        const activeNBModel = this.activeNotebookPanel && this.activeNotebookPanel.content\n            ? this.activeNotebookPanel.content.model\n            : null;\n        this._prevActiveNotebookModel = activeNBModel;\n        if (activeNBModel) {\n            activeNBModel.metadata.changed.connect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveNotebookPanelMessage);\n        });\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    _onActiveCellChanged() {\n        if (this._prevActiveCell && !this._prevActiveCell.isDisposed) {\n            this._prevActiveCell.metadata.changed.disconnect(this._onActiveCellMetadataChanged, this);\n        }\n        const activeCell = this.activeCell ? this.activeCell.model : null;\n        this._prevActiveCell = activeCell;\n        if (activeCell) {\n            activeCell.metadata.changed.connect(this._onActiveCellMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveCellMessage);\n        });\n    }\n    /**\n     * Handle a change in the selection.\n     */\n    _onSelectionChanged() {\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.SelectionMessage);\n        });\n    }\n    /**\n     * Handle a change in the active cell metadata.\n     */\n    _onActiveNotebookPanelMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activenotebookpanel-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    /**\n     * Handle a change in the notebook model metadata.\n     */\n    _onActiveCellMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activecell-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    _toolChildren() {\n        return chain(this._commonTools.children(), this._advancedTools.children());\n    }\n}\n/**\n * The namespace for NotebookTools class statics.\n */\n(function (NotebookTools) {\n    /**\n     * A singleton conflatable `'activenotebookpanel-changed'` message.\n     */\n    NotebookTools.ActiveNotebookPanelMessage = new ConflatableMessage('activenotebookpanel-changed');\n    /**\n     * A singleton conflatable `'activecell-changed'` message.\n     */\n    NotebookTools.ActiveCellMessage = new ConflatableMessage('activecell-changed');\n    /**\n     * A singleton conflatable `'selection-changed'` message.\n     */\n    NotebookTools.SelectionMessage = new ConflatableMessage('selection-changed');\n    /**\n     * The base notebook tool, meant to be subclassed.\n     */\n    class Tool extends Widget {\n        dispose() {\n            super.dispose();\n            if (this.notebookTools) {\n                this.notebookTools = null;\n            }\n        }\n        /**\n         * Process a message sent to the widget.\n         *\n         * @param msg - The message sent to the widget.\n         */\n        processMessage(msg) {\n            super.processMessage(msg);\n            switch (msg.type) {\n                case 'activenotebookpanel-changed':\n                    this.onActiveNotebookPanelChanged(msg);\n                    break;\n                case 'activecell-changed':\n                    this.onActiveCellChanged(msg);\n                    break;\n                case 'selection-changed':\n                    this.onSelectionChanged(msg);\n                    break;\n                case 'activecell-metadata-changed':\n                    this.onActiveCellMetadataChanged(msg);\n                    break;\n                case 'activenotebookpanel-metadata-changed':\n                    this.onActiveNotebookPanelMetadataChanged(msg);\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle a change to the notebook panel.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the selection.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onSelectionChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellMetadataChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            /* no-op */\n        }\n    }\n    NotebookTools.Tool = Tool;\n    /**\n     * A cell tool displaying the active cell contents.\n     */\n    class ActiveCellTool extends Tool {\n        /**\n         * Construct a new active cell tool.\n         */\n        constructor() {\n            super();\n            this._model = new CodeEditor.Model();\n            this.addClass('jp-ActiveCellTool');\n            this.addClass('jp-InputArea');\n            this.layout = new PanelLayout();\n        }\n        /**\n         * Dispose of the resources used by the tool.\n         */\n        dispose() {\n            if (this._model === null) {\n                return;\n            }\n            this._model.dispose();\n            this._model = null;\n            super.dispose();\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            const layout = this.layout;\n            const count = layout.widgets.length;\n            for (let i = 0; i < count; i++) {\n                layout.widgets[0].dispose();\n            }\n            if (this._cellModel && !this._cellModel.isDisposed) {\n                this._cellModel.value.changed.disconnect(this._onValueChanged, this);\n                this._cellModel.mimeTypeChanged.disconnect(this._onMimeTypeChanged, this);\n            }\n            if (!activeCell) {\n                const cell = new Widget();\n                cell.addClass('jp-InputArea-editor');\n                cell.addClass('jp-InputArea-editor');\n                layout.addWidget(cell);\n                this._cellModel = null;\n                return;\n            }\n            const promptNode = activeCell.promptNode\n                ? activeCell.promptNode.cloneNode(true)\n                : undefined;\n            const prompt = new Widget({ node: promptNode });\n            const factory = activeCell.contentFactory.editorFactory;\n            const cellModel = (this._cellModel = activeCell.model);\n            cellModel.value.changed.connect(this._onValueChanged, this);\n            cellModel.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n            this._model.value.text = cellModel.value.text.split('\\n')[0];\n            this._model.mimeType = cellModel.mimeType;\n            const model = this._model;\n            const editorWidget = new CodeEditorWrapper({ model, factory });\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.editor.setOption('readOnly', true);\n            layout.addWidget(prompt);\n            layout.addWidget(editorWidget);\n        }\n        /**\n         * Handle a change to the current editor value.\n         */\n        _onValueChanged() {\n            this._model.value.text = this._cellModel.value.text.split('\\n')[0];\n        }\n        /**\n         * Handle a change to the current editor mimetype.\n         */\n        _onMimeTypeChanged() {\n            this._model.mimeType = this._cellModel.mimeType;\n        }\n    }\n    NotebookTools.ActiveCellTool = ActiveCellTool;\n    /**\n     * A raw metadata editor.\n     */\n    class MetadataEditorTool extends Tool {\n        /**\n         * Construct a new raw metadata tool.\n         */\n        constructor(options) {\n            super();\n            const { editorFactory } = options;\n            this.addClass('jp-MetadataEditorTool');\n            const layout = (this.layout = new PanelLayout());\n            this.editor = new JSONEditor({\n                editorFactory\n            });\n            this.editor.title.label = options.label || 'Edit Metadata';\n            const titleNode = new Widget({ node: document.createElement('label') });\n            titleNode.node.textContent = options.label || 'Edit Metadata';\n            layout.addWidget(titleNode);\n            layout.addWidget(this.editor);\n        }\n    }\n    NotebookTools.MetadataEditorTool = MetadataEditorTool;\n    /**\n     * A notebook metadata editor\n     */\n    class NotebookMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Notebook Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the notebook.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the notebook metadata.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            var _a, _b;\n            const nb = this.notebookTools.activeNotebookPanel &&\n                this.notebookTools.activeNotebookPanel.content;\n            this.editor.source = (_b = (_a = nb === null || nb === void 0 ? void 0 : nb.model) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : null;\n        }\n    }\n    NotebookTools.NotebookMetadataEditorTool = NotebookMetadataEditorTool;\n    /**\n     * A cell metadata editor\n     */\n    class CellMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Cell Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the active cell metadata.\n         */\n        onActiveCellMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            const cell = this.notebookTools.activeCell;\n            this.editor.source = cell ? cell.model.metadata : null;\n        }\n    }\n    NotebookTools.CellMetadataEditorTool = CellMetadataEditorTool;\n    /**\n     * A cell tool that provides a selection for a given metadata key.\n     */\n    class KeySelector extends Tool {\n        /**\n         * Construct a new KeySelector.\n         */\n        constructor(options) {\n            // TODO: use react\n            super({ node: Private.createSelectorNode(options) });\n            /**\n             * Get the value for the data.\n             */\n            this._getValue = (cell) => {\n                let value = cell.model.metadata.get(this.key);\n                if (value === undefined) {\n                    value = this._default;\n                }\n                return value;\n            };\n            /**\n             * Set the value for the data.\n             */\n            this._setValue = (cell, value) => {\n                if (value === this._default) {\n                    cell.model.metadata.delete(this.key);\n                }\n                else {\n                    cell.model.metadata.set(this.key, value);\n                }\n            };\n            this._changeGuard = false;\n            this.addClass('jp-KeySelector');\n            this.key = options.key;\n            this._default = options.default;\n            this._validCellTypes = options.validCellTypes || [];\n            this._getter = options.getter || this._getValue;\n            this._setter = options.setter || this._setValue;\n        }\n        /**\n         * The select node for the widget.\n         */\n        get selectNode() {\n            return this.node.getElementsByTagName('select')[0];\n        }\n        /**\n         * Handle the DOM events for the widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notebook panel's node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'change':\n                    this.onValueChanged();\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            const node = this.selectNode;\n            node.addEventListener('change', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            const node = this.selectNode;\n            node.removeEventListener('change', this);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            const select = this.selectNode;\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell) {\n                select.disabled = true;\n                select.value = '';\n                return;\n            }\n            const cellType = activeCell.model.type;\n            if (this._validCellTypes.length &&\n                this._validCellTypes.indexOf(cellType) === -1) {\n                select.value = '';\n                select.disabled = true;\n                return;\n            }\n            select.disabled = false;\n            this._changeGuard = true;\n            const getter = this._getter;\n            select.value = JSON.stringify(getter(activeCell));\n            this._changeGuard = false;\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         */\n        onActiveCellMetadataChanged(msg) {\n            if (this._changeGuard) {\n                return;\n            }\n            const select = this.selectNode;\n            const cell = this.notebookTools.activeCell;\n            if (msg.args.key === this.key && cell) {\n                this._changeGuard = true;\n                const getter = this._getter;\n                select.value = JSON.stringify(getter(cell));\n                this._changeGuard = false;\n            }\n        }\n        /**\n         * Handle a change to the value.\n         */\n        onValueChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell || this._changeGuard) {\n                return;\n            }\n            this._changeGuard = true;\n            const select = this.selectNode;\n            const setter = this._setter;\n            setter(activeCell, JSON.parse(select.value));\n            this._changeGuard = false;\n        }\n    }\n    NotebookTools.KeySelector = KeySelector;\n    /**\n     * Create a slideshow selector.\n     */\n    function createSlideShowSelector(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        trans.__('');\n        const options = {\n            key: 'slideshow',\n            title: trans.__('Slide Type'),\n            optionValueArray: [\n                ['-', null],\n                [trans.__('Slide'), 'slide'],\n                [trans.__('Sub-Slide'), 'subslide'],\n                [trans.__('Fragment'), 'fragment'],\n                [trans.__('Skip'), 'skip'],\n                [trans.__('Notes'), 'notes']\n            ],\n            getter: cell => {\n                const value = cell.model.metadata.get('slideshow');\n                return value && value['slide_type'];\n            },\n            setter: (cell, value) => {\n                let data = cell.model.metadata.get('slideshow') || Object.create(null);\n                if (value === null) {\n                    // Make a shallow copy so we aren't modifying the original metadata.\n                    data = Object.assign({}, data);\n                    delete data.slide_type;\n                }\n                else {\n                    data = Object.assign(Object.assign({}, data), { slide_type: value });\n                }\n                if (Object.keys(data).length > 0) {\n                    cell.model.metadata.set('slideshow', data);\n                }\n                else {\n                    cell.model.metadata.delete('slideshow');\n                }\n            }\n        };\n        return new KeySelector(options);\n    }\n    NotebookTools.createSlideShowSelector = createSlideShowSelector;\n    /**\n     * Create an nbconvert selector.\n     */\n    function createNBConvertSelector(optionValueArray, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return new KeySelector({\n            key: 'raw_mimetype',\n            title: trans.__('Raw NBConvert Format'),\n            optionValueArray: optionValueArray,\n            validCellTypes: ['raw']\n        });\n    }\n    NotebookTools.createNBConvertSelector = createNBConvertSelector;\n})(NotebookTools || (NotebookTools = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A comparator function for widget rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Create the node for a KeySelector.\n     */\n    function createSelectorNode(options) {\n        const name = options.key;\n        const title = options.title || name[0].toLocaleUpperCase() + name.slice(1);\n        const optionNodes = [];\n        let value;\n        let option;\n        each(options.optionValueArray, item => {\n            option = item[0];\n            value = JSON.stringify(item[1]);\n            optionNodes.push(h.option({ value }, option));\n        });\n        const node = VirtualDOM.realize(h.div({}, h.label(title, h.select({}, optionNodes))));\n        Styling.styleNode(node);\n        return node;\n    }\n    Private.createSelectorNode = createSelectorNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=notebooktools.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Cell, CodeCell, MarkdownCell, RawCell } from '@jupyterlab/cells';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { ArrayExt, each, findIndex } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { NotebookActions } from './actions';\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n/**\n * The data attribute added to a widget that can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The data attribute added to a widget that can undo.\n */\nconst UNDOER = 'jpUndoer';\n/**\n * The class name added to notebook widgets.\n */\nconst NB_CLASS = 'jp-Notebook';\n/**\n * The class name added to notebook widget cells.\n */\nconst NB_CELL_CLASS = 'jp-Notebook-cell';\n/**\n * The class name added to a notebook in edit mode.\n */\nconst EDIT_CLASS = 'jp-mod-editMode';\n/**\n * The class name added to a notebook in command mode.\n */\nconst COMMAND_CLASS = 'jp-mod-commandMode';\n/**\n * The class name added to the active cell.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The class name added to selected cells.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to an active cell when there are other selected cells.\n */\nconst OTHER_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to unconfined images.\n */\nconst UNCONFINED_CLASS = 'jp-mod-unconfined';\n/**\n * The class name added to a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to a drop source.\n */\nconst DROP_SOURCE_CLASS = 'jp-mod-dropSource';\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class attached to the heading collapser button\n */\nconst HEADING_COLLAPSER_CLASS = 'jp-collapseHeadingButton';\nif (window.requestIdleCallback === undefined) {\n    // On Safari, requestIdleCallback is not available, so we use replacement functions for `idleCallbacks`\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API#falling_back_to_settimeout\n    window.requestIdleCallback = function (handler) {\n        let startTime = Date.now();\n        return setTimeout(function () {\n            handler({\n                didTimeout: false,\n                timeRemaining: function () {\n                    return Math.max(0, 50.0 - (Date.now() - startTime));\n                }\n            });\n        }, 1);\n    };\n    window.cancelIdleCallback = function (id) {\n        clearTimeout(id);\n    };\n}\n/**\n * A widget which renders static non-interactive notebooks.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class StaticNotebook extends Widget {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        super();\n        this._editorConfig = StaticNotebook.defaultEditorConfig;\n        this._notebookConfig = StaticNotebook.defaultNotebookConfig;\n        this._mimetype = 'text/plain';\n        this._model = null;\n        this._modelChanged = new Signal(this);\n        this._modelContentChanged = new Signal(this);\n        this._fullyRendered = new Signal(this);\n        this._placeholderCellRendered = new Signal(this);\n        this._renderedCellsCount = 0;\n        this.addClass(NB_CLASS);\n        this.node.dataset[KERNEL_USER] = 'true';\n        this.node.dataset[UNDOER] = 'true';\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.rendermime = options.rendermime;\n        this.layout = new Private.NotebookPanelLayout();\n        this.contentFactory =\n            options.contentFactory || StaticNotebook.defaultContentFactory;\n        this.editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this.notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._mimetypeService = options.mimeTypeService;\n        // Section for the virtual-notebook behavior.\n        this._toRenderMap = new Map();\n        this._cellsArray = new Array();\n        if ('IntersectionObserver' in window) {\n            this._observer = new IntersectionObserver((entries, observer) => {\n                entries.forEach(o => {\n                    if (o.isIntersecting) {\n                        observer.unobserve(o.target);\n                        const ci = this._toRenderMap.get(o.target.id);\n                        if (ci) {\n                            const { cell, index } = ci;\n                            this._renderPlaceholderCell(cell, index);\n                        }\n                    }\n                });\n            }, {\n                root: this.node,\n                threshold: 1,\n                rootMargin: `${this.notebookConfig.observedTopMargin} 0px ${this.notebookConfig.observedBottomMargin} 0px`\n            });\n        }\n    }\n    /**\n     * A signal emitted when the notebook is fully rendered.\n     */\n    get fullyRendered() {\n        return this._fullyRendered;\n    }\n    /**\n     * A signal emitted when the a placeholder cell is rendered.\n     */\n    get placeholderCellRendered() {\n        return this._placeholderCellRendered;\n    }\n    /**\n     * A signal emitted when the model of the notebook changes.\n     */\n    get modelChanged() {\n        return this._modelChanged;\n    }\n    /**\n     * A signal emitted when the model content changes.\n     *\n     * #### Notes\n     * This is a convenience signal that follows the current model.\n     */\n    get modelContentChanged() {\n        return this._modelContentChanged;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(newValue) {\n        newValue = newValue || null;\n        if (this._model === newValue) {\n            return;\n        }\n        const oldValue = this._model;\n        this._model = newValue;\n        if (oldValue && oldValue.modelDB.isCollaborative) {\n            void oldValue.modelDB.connected.then(() => {\n                oldValue.modelDB.collaborators.changed.disconnect(this._onCollaboratorsChanged, this);\n            });\n        }\n        if (newValue && newValue.modelDB.isCollaborative) {\n            void newValue.modelDB.connected.then(() => {\n                newValue.modelDB.collaborators.changed.connect(this._onCollaboratorsChanged, this);\n            });\n        }\n        // Trigger private, protected, and public changes.\n        this._onModelChanged(oldValue, newValue);\n        this.onModelChanged(oldValue, newValue);\n        this._modelChanged.emit(void 0);\n    }\n    /**\n     * Get the mimetype for code cells.\n     */\n    get codeMimetype() {\n        return this._mimetype;\n    }\n    /**\n     * A read-only sequence of the widgets in the notebook.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n        this._updateEditorConfig();\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n        this._updateNotebookConfig();\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle a new model.\n     *\n     * #### Notes\n     * This method is called after the model change has been handled\n     * internally and before the `modelChanged` signal is emitted.\n     * The default implementation is a no-op.\n     */\n    onModelChanged(oldValue, newValue) {\n        // No-op.\n    }\n    /**\n     * Handle changes to the notebook model content.\n     *\n     * #### Notes\n     * The default implementation emits the `modelContentChanged` signal.\n     */\n    onModelContentChanged(model, args) {\n        this._modelContentChanged.emit(void 0);\n    }\n    /**\n     * Handle changes to the notebook model metadata.\n     *\n     * #### Notes\n     * The default implementation updates the mimetypes of the code cells\n     * when the `language_info` metadata changes.\n     */\n    onMetadataChanged(sender, args) {\n        switch (args.key) {\n            case 'language_info':\n                this._updateMimetype();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     *\n     * The default implementation is a no-op\n     */\n    onCellInserted(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being moved.\n     *\n     * The default implementation is a no-op\n     */\n    onCellMoved(fromIndex, toIndex) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being removed.\n     *\n     * The default implementation is a no-op\n     */\n    onCellRemoved(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a new model on the widget.\n     */\n    _onModelChanged(oldValue, newValue) {\n        const layout = this.layout;\n        if (oldValue) {\n            oldValue.cells.changed.disconnect(this._onCellsChanged, this);\n            oldValue.metadata.changed.disconnect(this.onMetadataChanged, this);\n            oldValue.contentChanged.disconnect(this.onModelContentChanged, this);\n            // TODO: reuse existing cell widgets if possible. Remember to initially\n            // clear the history of each cell if we do this.\n            while (layout.widgets.length) {\n                this._removeCell(0);\n            }\n        }\n        if (!newValue) {\n            this._mimetype = 'text/plain';\n            return;\n        }\n        this._updateMimetype();\n        const cells = newValue.cells;\n        if (!cells.length && newValue.isInitialized) {\n            cells.push(newValue.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n        }\n        each(cells, (cell, i) => {\n            this._insertCell(i, cell, 'set');\n        });\n        cells.changed.connect(this._onCellsChanged, this);\n        newValue.contentChanged.connect(this.onModelContentChanged, this);\n        newValue.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Handle a change cells event.\n     */\n    _onCellsChanged(sender, args) {\n        let index = 0;\n        switch (args.type) {\n            case 'add':\n                index = args.newIndex;\n                // eslint-disable-next-line no-case-declarations\n                const insertType = args.oldIndex == -1 ? 'push' : 'insert';\n                each(args.newValues, value => {\n                    this._insertCell(index++, value, insertType);\n                });\n                break;\n            case 'move':\n                this._moveCell(args.oldIndex, args.newIndex);\n                break;\n            case 'remove':\n                each(args.oldValues, value => {\n                    this._removeCell(args.oldIndex);\n                });\n                // Add default cell if there are no cells remaining.\n                if (!sender.length) {\n                    const model = this.model;\n                    // Add the cell in a new context to avoid triggering another\n                    // cell changed event during the handling of this signal.\n                    requestAnimationFrame(() => {\n                        if (model && !model.isDisposed && !model.cells.length) {\n                            model.cells.push(model.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n                        }\n                    });\n                }\n                break;\n            case 'set':\n                // TODO: reuse existing widgets if possible.\n                index = args.newIndex;\n                each(args.newValues, value => {\n                    // Note: this ordering (insert then remove)\n                    // is important for getting the active cell\n                    // index for the editable notebook correct.\n                    this._insertCell(index, value, 'set');\n                    this._removeCell(index + 1);\n                    index++;\n                });\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Create a cell widget and insert into the notebook.\n     */\n    _insertCell(index, cell, insertType) {\n        let widget;\n        switch (cell.type) {\n            case 'code':\n                widget = this._createCodeCell(cell);\n                widget.model.mimeType = this._mimetype;\n                break;\n            case 'markdown':\n                widget = this._createMarkdownCell(cell);\n                if (cell.value.text === '') {\n                    widget.rendered = false;\n                }\n                break;\n            default:\n                widget = this._createRawCell(cell);\n        }\n        widget.addClass(NB_CELL_CLASS);\n        const layout = this.layout;\n        this._cellsArray.push(widget);\n        if (this._observer &&\n            insertType === 'push' &&\n            this._renderedCellsCount >=\n                this.notebookConfig.numberCellsToRenderDirectly &&\n            cell.type !== 'markdown') {\n            // We have an observer and we are have been asked to push (not to insert).\n            // and we are above the number of cells to render directly, then\n            // we will add a placeholder and let the intersection observer or the\n            // idle browser render those placeholder cells.\n            this._toRenderMap.set(widget.model.id, { index: index, cell: widget });\n            const placeholder = this._createPlaceholderCell(cell, index);\n            placeholder.node.id = widget.model.id;\n            layout.insertWidget(index, placeholder);\n            this.onCellInserted(index, placeholder);\n            this._fullyRendered.emit(false);\n            this._observer.observe(placeholder.node);\n        }\n        else {\n            // We have no intersection observer, or we insert, or we are below\n            // the number of cells to render directly, so we render directly.\n            layout.insertWidget(index, widget);\n            this._incrementRenderedCount();\n            this.onCellInserted(index, widget);\n        }\n        if (this._observer && this.notebookConfig.renderCellOnIdle) {\n            const renderPlaceholderCells = this._renderPlaceholderCells.bind(this);\n            window.requestIdleCallback(renderPlaceholderCells, {\n                timeout: 1000\n            });\n        }\n    }\n    _renderPlaceholderCells(deadline) {\n        if (this._renderedCellsCount < this._cellsArray.length &&\n            this._renderedCellsCount >=\n                this.notebookConfig.numberCellsToRenderDirectly) {\n            const ci = this._toRenderMap.entries().next();\n            this._renderPlaceholderCell(ci.value[1].cell, ci.value[1].index);\n        }\n    }\n    _renderPlaceholderCell(cell, index) {\n        const pl = this.layout;\n        pl.removeWidgetAt(index);\n        pl.insertWidget(index, cell);\n        this._toRenderMap.delete(cell.model.id);\n        this._incrementRenderedCount();\n        this.onCellInserted(index, cell);\n        this._placeholderCellRendered.emit(cell);\n    }\n    /**\n     * Create a code cell widget from a code cell model.\n     */\n    _createCodeCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.code;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false,\n            maxNumberOutputs: this.notebookConfig.maxNumberOutputs\n        };\n        const cell = this.contentFactory.createCodeCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        cell.syncScrolled = true;\n        return cell;\n    }\n    /**\n     * Create a markdown cell widget from a markdown cell model.\n     */\n    _createMarkdownCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.markdown;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false\n        };\n        const cell = this.contentFactory.createMarkdownCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Create a placeholder cell widget from a raw cell model.\n     */\n    _createPlaceholderCell(model, index) {\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.raw;\n        const options = {\n            editorConfig,\n            model,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: true\n        };\n        const cell = this.contentFactory.createRawCell(options, this);\n        cell.node.innerHTML = `\n      <div class=\"jp-Cell-Placeholder\">\n        <div class=\"jp-Cell-Placeholder-wrapper\">\n        </div>\n      </div>`;\n        cell.inputHidden = true;\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Create a raw cell widget from a raw cell model.\n     */\n    _createRawCell(model) {\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.raw;\n        const options = {\n            editorConfig,\n            model,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false\n        };\n        const cell = this.contentFactory.createRawCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Move a cell widget.\n     */\n    _moveCell(fromIndex, toIndex) {\n        const layout = this.layout;\n        layout.insertWidget(toIndex, layout.widgets[fromIndex]);\n        this.onCellMoved(fromIndex, toIndex);\n    }\n    /**\n     * Remove a cell widget.\n     */\n    _removeCell(index) {\n        const layout = this.layout;\n        const widget = layout.widgets[index];\n        widget.parent = null;\n        this.onCellRemoved(index, widget);\n        widget.dispose();\n    }\n    /**\n     * Update the mimetype of the notebook.\n     */\n    _updateMimetype() {\n        var _a;\n        const info = (_a = this._model) === null || _a === void 0 ? void 0 : _a.metadata.get('language_info');\n        if (!info) {\n            return;\n        }\n        this._mimetype = this._mimetypeService.getMimeTypeByLanguage(info);\n        each(this.widgets, widget => {\n            if (widget.model.type === 'code') {\n                widget.model.mimeType = this._mimetype;\n            }\n        });\n    }\n    /**\n     * Handle an update to the collaborators.\n     */\n    _onCollaboratorsChanged() {\n        var _a, _b, _c;\n        // If there are selections corresponding to non-collaborators,\n        // they are stale and should be removed.\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            for (const key of cell.model.selections.keys()) {\n                if (false === ((_c = (_b = (_a = this._model) === null || _a === void 0 ? void 0 : _a.modelDB) === null || _b === void 0 ? void 0 : _b.collaborators) === null || _c === void 0 ? void 0 : _c.has(key))) {\n                    cell.model.selections.delete(key);\n                }\n            }\n        }\n    }\n    /**\n     * Update editor settings for notebook cells.\n     */\n    _updateEditorConfig() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            let config;\n            switch (cell.model.type) {\n                case 'code':\n                    config = this._editorConfig.code;\n                    break;\n                case 'markdown':\n                    config = this._editorConfig.markdown;\n                    break;\n                default:\n                    config = this._editorConfig.raw;\n                    break;\n            }\n            let editorOptions = {};\n            Object.keys(config).forEach((key) => {\n                var _a;\n                editorOptions[key] = (_a = config[key]) !== null && _a !== void 0 ? _a : null;\n            });\n            cell.editor.setOptions(editorOptions);\n            cell.editor.refresh();\n        }\n    }\n    /**\n     * Apply updated notebook settings.\n     */\n    _updateNotebookConfig() {\n        // Apply scrollPastEnd setting.\n        this.toggleClass('jp-mod-scrollPastEnd', this._notebookConfig.scrollPastEnd);\n    }\n    _incrementRenderedCount() {\n        if (this._toRenderMap.size === 0) {\n            this._fullyRendered.emit(true);\n        }\n        this._renderedCellsCount++;\n    }\n}\n/**\n * The namespace for the `StaticNotebook` class statics.\n */\n(function (StaticNotebook) {\n    /**\n     * Default configuration options for cell editors.\n     */\n    StaticNotebook.defaultEditorConfig = {\n        code: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'off', matchBrackets: true, autoClosingBrackets: false }),\n        markdown: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false }),\n        raw: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false })\n    };\n    /**\n     * Default configuration options for notebooks.\n     */\n    StaticNotebook.defaultNotebookConfig = {\n        scrollPastEnd: true,\n        defaultCell: 'code',\n        recordTiming: false,\n        numberCellsToRenderDirectly: 20,\n        renderCellOnIdle: true,\n        observedTopMargin: '1000px',\n        observedBottomMargin: '1000px',\n        maxNumberOutputs: 50\n    };\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create a new code cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createCodeCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new CodeCell(options).initializeState();\n        }\n        /**\n         * Create a new markdown cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createMarkdownCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new MarkdownCell(options).initializeState();\n        }\n        /**\n         * Create a new raw cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createRawCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new RawCell(options).initializeState();\n        }\n    }\n    StaticNotebook.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the static notebook widget.\n     */\n    StaticNotebook.defaultContentFactory = new ContentFactory();\n})(StaticNotebook || (StaticNotebook = {}));\n/**\n * A notebook widget that supports interactivity.\n */\nexport class Notebook extends StaticNotebook {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        super(Private.processNotebookOptions(options));\n        this._activeCellIndex = -1;\n        this._activeCell = null;\n        this._mode = 'command';\n        this._drag = null;\n        this._fragment = '';\n        this._dragData = null;\n        this._mouseMode = null;\n        this._activeCellChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n        this._checkCacheOnNextResize = false;\n        this.node.tabIndex = 0; // Allow the widget to take focus.\n        // Allow the node to scroll while dragging items.\n        this.node.setAttribute('data-lm-dragscroll', 'true');\n    }\n    /**\n     * A signal emitted when the active cell changes.\n     *\n     * #### Notes\n     * This can be due to the active index changing or the\n     * cell at the active index changing.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the state of the notebook changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the selection state of the notebook changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * The interactivity mode of the notebook.\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(newValue) {\n        const activeCell = this.activeCell;\n        if (!activeCell) {\n            newValue = 'command';\n        }\n        if (newValue === this._mode) {\n            this._ensureFocus();\n            return;\n        }\n        // Post an update request.\n        this.update();\n        const oldValue = this._mode;\n        this._mode = newValue;\n        if (newValue === 'edit') {\n            // Edit mode deselects all cells.\n            each(this.widgets, widget => {\n                this.deselect(widget);\n            });\n            //  Edit mode unrenders an active markdown widget.\n            if (activeCell instanceof MarkdownCell) {\n                activeCell.rendered = false;\n            }\n            activeCell.inputHidden = false;\n        }\n        else {\n            // Focus on the notebook document, which blurs the active cell.\n            this.node.focus();\n        }\n        this._stateChanged.emit({ name: 'mode', oldValue, newValue });\n        this._ensureFocus();\n    }\n    /**\n     * The active cell index of the notebook.\n     *\n     * #### Notes\n     * The index will be clamped to the bounds of the notebook cells.\n     */\n    get activeCellIndex() {\n        if (!this.model) {\n            return -1;\n        }\n        return this.model.cells.length ? this._activeCellIndex : -1;\n    }\n    set activeCellIndex(newValue) {\n        const oldValue = this._activeCellIndex;\n        if (!this.model || !this.model.cells.length) {\n            newValue = -1;\n        }\n        else {\n            newValue = Math.max(newValue, 0);\n            newValue = Math.min(newValue, this.model.cells.length - 1);\n        }\n        this._activeCellIndex = newValue;\n        const cell = this.widgets[newValue];\n        if (cell !== this._activeCell) {\n            // Post an update request.\n            this.update();\n            this._activeCell = cell;\n            this._activeCellChanged.emit(cell);\n        }\n        if (this.mode === 'edit' && cell instanceof MarkdownCell) {\n            cell.rendered = false;\n        }\n        this._ensureFocus();\n        if (newValue === oldValue) {\n            return;\n        }\n        this._trimSelections();\n        this._stateChanged.emit({ name: 'activeCellIndex', oldValue, newValue });\n    }\n    /**\n     * Get the active cell widget.\n     *\n     * #### Notes\n     * This is a cell or `null` if there is no active cell.\n     */\n    get activeCell() {\n        return this._activeCell;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Select a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    select(widget) {\n        if (Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, true);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Deselect a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    deselect(widget) {\n        if (!Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, false);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Whether a cell is selected.\n     */\n    isSelected(widget) {\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Whether a cell is selected or is the active cell.\n     */\n    isSelectedOrActive(widget) {\n        if (widget === this._activeCell) {\n            return true;\n        }\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Deselect all of the cells.\n     */\n    deselectAll() {\n        let changed = false;\n        each(this.widgets, widget => {\n            if (Private.selectedProperty.get(widget)) {\n                changed = true;\n            }\n            Private.selectedProperty.set(widget, false);\n        });\n        if (changed) {\n            this._selectionChanged.emit(void 0);\n        }\n        // Make sure we have a valid active cell.\n        this.activeCellIndex = this.activeCellIndex; // eslint-disable-line\n        this.update();\n    }\n    /**\n     * Move the head of an existing contiguous selection to extend the selection.\n     *\n     * @param index - The new head of the existing selection.\n     *\n     * #### Notes\n     * If there is no existing selection, the active cell is considered an\n     * existing one-cell selection.\n     *\n     * If the new selection is a single cell, that cell becomes the active cell\n     * and all cells are deselected.\n     *\n     * There is no change if there are no cells (i.e., activeCellIndex is -1).\n     */\n    extendContiguousSelectionTo(index) {\n        let { head, anchor } = this.getContiguousSelection();\n        let i;\n        // Handle the case of no current selection.\n        if (anchor === null || head === null) {\n            if (index === this.activeCellIndex) {\n                // Already collapsed selection, nothing more to do.\n                return;\n            }\n            // We will start a new selection below.\n            head = this.activeCellIndex;\n            anchor = this.activeCellIndex;\n        }\n        // Move the active cell. We do this before the collapsing shortcut below.\n        this.activeCellIndex = index;\n        // Make sure the index is valid, according to the rules for setting and clipping the\n        // active cell index. This may change the index.\n        index = this.activeCellIndex;\n        // Collapse the selection if it is only the active cell.\n        if (index === anchor) {\n            this.deselectAll();\n            return;\n        }\n        let selectionChanged = false;\n        if (head < index) {\n            if (head < anchor) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between head and index except anchor.\n            for (i = head + 1; i < index; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        else if (index < head) {\n            if (anchor < head) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between index and head except anchor.\n            for (i = index + 1; i < head; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        // Anchor and index should *always* be selected.\n        if (!Private.selectedProperty.get(this.widgets[anchor])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[anchor], true);\n        if (!Private.selectedProperty.get(this.widgets[index])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[index], true);\n        if (selectionChanged) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Get the head and anchor of a contiguous cell selection.\n     *\n     * The head of a contiguous selection is always the active cell.\n     *\n     * If there are no cells selected, `{head: null, anchor: null}` is returned.\n     *\n     * Throws an error if the currently selected cells do not form a contiguous\n     * selection.\n     */\n    getContiguousSelection() {\n        const cells = this.widgets;\n        const first = ArrayExt.findFirstIndex(cells, c => this.isSelected(c));\n        // Return early if no cells are selected.\n        if (first === -1) {\n            return { head: null, anchor: null };\n        }\n        const last = ArrayExt.findLastIndex(cells, c => this.isSelected(c), -1, first);\n        // Check that the selection is contiguous.\n        for (let i = first; i <= last; i++) {\n            if (!this.isSelected(cells[i])) {\n                throw new Error('Selection not contiguous');\n            }\n        }\n        // Check that the active cell is one of the endpoints of the selection.\n        const activeIndex = this.activeCellIndex;\n        if (first !== activeIndex && last !== activeIndex) {\n            throw new Error('Active cell not at endpoint of selection');\n        }\n        // Determine the head and anchor of the selection.\n        if (first === activeIndex) {\n            return { head: first, anchor: last };\n        }\n        else {\n            return { head: last, anchor: first };\n        }\n    }\n    /**\n     * Scroll so that the given position is centered.\n     *\n     * @param position - The vertical position in the notebook widget.\n     *\n     * @param threshold - An optional threshold for the scroll (0-50, defaults to\n     * 25).\n     *\n     * #### Notes\n     * If the position is within the threshold percentage of the widget height,\n     * measured from the center of the widget, the scroll position will not be\n     * changed. A threshold of 0 means we will always scroll so the position is\n     * centered, and a threshold of 50 means scrolling only happens if position is\n     * outside the current window.\n     */\n    scrollToPosition(position, threshold = 25) {\n        const node = this.node;\n        const ar = node.getBoundingClientRect();\n        const delta = position - ar.top - ar.height / 2;\n        if (Math.abs(delta) > (ar.height * threshold) / 100) {\n            node.scrollTop += delta;\n        }\n    }\n    /**\n     * Scroll so that the given cell is in view. Selects and activates cell.\n     *\n     * @param cell - A cell in the notebook widget.\n     *\n     */\n    scrollToCell(cell) {\n        // use Phosphor to scroll\n        ElementExt.scrollIntoViewIfNeeded(this.node, cell.node);\n        // change selection and active cell:\n        this.deselectAll();\n        this.select(cell);\n        cell.activate();\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        // Wait all cells are rendered then set fragment and update.\n        void Promise.all(this.widgets.map(widget => widget.ready)).then(() => {\n            this._fragment = fragment;\n            this.update();\n        });\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (!this.model) {\n            return;\n        }\n        switch (event.type) {\n            case 'contextmenu':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtContextMenuCapture(event);\n                }\n                break;\n            case 'mousedown':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtMouseDownCapture(event);\n                }\n                else {\n                    this._evtMouseDown(event);\n                }\n                break;\n            case 'mouseup':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMouseup(event);\n                }\n                break;\n            case 'mousemove':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMousemove(event);\n                }\n                break;\n            case 'keydown':\n                this._ensureFocus(true);\n                break;\n            case 'dblclick':\n                this._evtDblClick(event);\n                break;\n            case 'focusin':\n                this._evtFocusIn(event);\n                break;\n            case 'focusout':\n                this._evtFocusOut(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('contextmenu', this, true);\n        node.addEventListener('mousedown', this, true);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('dblclick', this);\n        node.addEventListener('focusin', this);\n        node.addEventListener('focusout', this);\n        // Capture drag events for the notebook widget\n        // in order to preempt the drag/drop handlers in the\n        // code editor widgets, which can take text data.\n        node.addEventListener('lm-dragenter', this, true);\n        node.addEventListener('lm-dragleave', this, true);\n        node.addEventListener('lm-dragover', this, true);\n        node.addEventListener('lm-drop', this, true);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('contextmenu', this, true);\n        node.removeEventListener('mousedown', this, true);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('dblclick', this);\n        node.removeEventListener('focusin', this);\n        node.removeEventListener('focusout', this);\n        node.removeEventListener('lm-dragenter', this, true);\n        node.removeEventListener('lm-dragleave', this, true);\n        node.removeEventListener('lm-dragover', this, true);\n        node.removeEventListener('lm-drop', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        this._checkCacheOnNextResize = true;\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (!this._checkCacheOnNextResize) {\n            return super.onResize(msg);\n        }\n        this._checkCacheOnNextResize = false;\n        const cache = this._cellLayoutStateCache;\n        const width = parseInt(this.node.style.width, 10);\n        if (cache) {\n            if (width === cache.width) {\n                // Cache identical, do nothing\n                return;\n            }\n        }\n        // Update cache\n        this._cellLayoutStateCache = { width };\n        // Fallback:\n        for (const w of this.widgets) {\n            if (w instanceof Cell) {\n                w.editorWidget.update();\n            }\n        }\n    }\n    /**\n     * A message handler invoked on an `'before-hide'` message.\n     */\n    onBeforeHide(msg) {\n        // Update cache\n        const width = parseInt(this.node.style.width, 10);\n        this._cellLayoutStateCache = { width };\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        const activeCell = this.activeCell;\n        // Set the appropriate classes on the cells.\n        if (this.mode === 'edit') {\n            this.addClass(EDIT_CLASS);\n            this.removeClass(COMMAND_CLASS);\n        }\n        else {\n            this.addClass(COMMAND_CLASS);\n            this.removeClass(EDIT_CLASS);\n        }\n        if (activeCell) {\n            activeCell.addClass(ACTIVE_CLASS);\n        }\n        let count = 0;\n        each(this.widgets, widget => {\n            if (widget !== activeCell) {\n                widget.removeClass(ACTIVE_CLASS);\n            }\n            widget.removeClass(OTHER_SELECTED_CLASS);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(SELECTED_CLASS);\n                count++;\n            }\n            else {\n                widget.removeClass(SELECTED_CLASS);\n            }\n        });\n        if (count > 1) {\n            activeCell === null || activeCell === void 0 ? void 0 : activeCell.addClass(OTHER_SELECTED_CLASS);\n        }\n        if (this._fragment) {\n            let el;\n            try {\n                el = this.node.querySelector(this._fragment);\n            }\n            catch (error) {\n                console.warn('Unable to set URI fragment identifier', error);\n            }\n            if (el) {\n                el.scrollIntoView();\n            }\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     */\n    onCellInserted(index, cell) {\n        if (this.model && this.model.modelDB.isCollaborative) {\n            const modelDB = this.model.modelDB;\n            void modelDB.connected.then(() => {\n                if (!cell.isDisposed) {\n                    // Setup the selection style for collaborators.\n                    const localCollaborator = modelDB.collaborators.localCollaborator;\n                    cell.editor.uuid = localCollaborator.sessionId;\n                    cell.editor.selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), { color: localCollaborator.color });\n                }\n            });\n        }\n        cell.editor.edgeRequested.connect(this._onEdgeRequest, this);\n        // If the insertion happened above, increment the active cell\n        // index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex + 1\n                : this.activeCellIndex;\n    }\n    /**\n     * Handle a cell being moved.\n     */\n    onCellMoved(fromIndex, toIndex) {\n        const i = this.activeCellIndex;\n        if (fromIndex === i) {\n            this.activeCellIndex = toIndex;\n        }\n        else if (fromIndex < i && i <= toIndex) {\n            this.activeCellIndex--;\n        }\n        else if (toIndex <= i && i < fromIndex) {\n            this.activeCellIndex++;\n        }\n    }\n    /**\n     * Handle a cell being removed.\n     */\n    onCellRemoved(index, cell) {\n        // If the removal happened above, decrement the active\n        // cell index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex - 1\n                : this.activeCellIndex;\n        if (this.isSelected(cell)) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Handle a new model.\n     */\n    onModelChanged(oldValue, newValue) {\n        super.onModelChanged(oldValue, newValue);\n        // Try to set the active cell index to 0.\n        // It will be set to `-1` if there is no new model or the model is empty.\n        this.activeCellIndex = 0;\n    }\n    /**\n     * Handle edge request signals from cells.\n     */\n    _onEdgeRequest(editor, location) {\n        const prev = this.activeCellIndex;\n        if (location === 'top') {\n            this.activeCellIndex--;\n            // Move the cursor to the first position on the last line.\n            if (this.activeCellIndex < prev) {\n                const editor = this.activeCell.editor;\n                const lastLine = editor.lineCount - 1;\n                editor.setCursorPosition({ line: lastLine, column: 0 });\n            }\n        }\n        else if (location === 'bottom') {\n            this.activeCellIndex++;\n            // Move the cursor to the first character.\n            if (this.activeCellIndex > prev) {\n                const editor = this.activeCell.editor;\n                editor.setCursorPosition({ line: 0, column: 0 });\n            }\n        }\n        this.mode = 'edit';\n    }\n    /**\n     * Ensure that the notebook has proper focus.\n     */\n    _ensureFocus(force = false) {\n        const activeCell = this.activeCell;\n        if (this.mode === 'edit' && activeCell) {\n            if (!activeCell.editor.hasFocus()) {\n                activeCell.editor.focus();\n            }\n        }\n        if (force && !this.node.contains(document.activeElement)) {\n            this.node.focus();\n        }\n    }\n    /**\n     * Find the cell index containing the target html element.\n     *\n     * #### Notes\n     * Returns -1 if the cell is not found.\n     */\n    _findCell(node) {\n        // Trace up the DOM hierarchy to find the root cell node.\n        // Then find the corresponding child and select it.\n        let n = node;\n        while (n && n !== this.node) {\n            if (n.classList.contains(NB_CELL_CLASS)) {\n                const i = ArrayExt.findFirstIndex(this.widgets, widget => widget.node === n);\n                if (i !== -1) {\n                    return i;\n                }\n                break;\n            }\n            n = n.parentElement;\n        }\n        return -1;\n    }\n    /**\n     * Find the target of html mouse event and cell index containing this target.\n     *\n     * #### Notes\n     * Returned index is -1 if the cell is not found.\n     */\n    _findEventTargetAndCell(event) {\n        let target = event.target;\n        let index = this._findCell(target);\n        if (index === -1) {\n            // `event.target` sometimes gives an orphaned node in Firefox 57, which\n            // can have `null` anywhere in its parent line. If we fail to find a cell\n            // using `event.target`, try again using a target reconstructed from the\n            // position of the click event.\n            target = document.elementFromPoint(event.clientX, event.clientY);\n            index = this._findCell(target);\n        }\n        return [target, index];\n    }\n    /**\n     * Handle `contextmenu` event.\n     */\n    _evtContextMenuCapture(event) {\n        // Allow the event to propagate un-modified if the user\n        // is holding the shift-key (and probably requesting\n        // the native context menu).\n        if (event.shiftKey) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        if (widget && widget.editorWidget.node.contains(target)) {\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` event in the capture phase for the widget.\n     */\n    _evtMouseDownCapture(event) {\n        const { button, shiftKey } = event;\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        // On OS X, the context menu may be triggered with ctrl-left-click. In\n        // Firefox, ctrl-left-click gives an event with button 2, but in Chrome,\n        // ctrl-left-click gives an event with button 0 with the ctrl modifier.\n        if (button === 2 &&\n            !shiftKey &&\n            widget &&\n            widget.editorWidget.node.contains(target)) {\n            this.mode = 'command';\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        var _a;\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2)) {\n            return;\n        }\n        // Shift right-click gives the browser default behavior.\n        if (shiftKey && button === 2) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        let targetArea;\n        if (widget) {\n            if (widget.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (widget.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'notebook';\n        }\n        // Make sure we go to command mode if the click isn't in the cell editor If\n        // we do click in the cell editor, the editor handles the focus event to\n        // switch to edit mode.\n        if (targetArea !== 'input') {\n            this.mode = 'command';\n        }\n        if (targetArea === 'notebook') {\n            this.deselectAll();\n        }\n        else if (targetArea === 'prompt' || targetArea === 'cell') {\n            // We don't want to prevent the default selection behavior\n            // if there is currently text selected in an output.\n            const hasSelection = ((_a = window.getSelection()) !== null && _a !== void 0 ? _a : '').toString() !== '';\n            if (button === 0 && shiftKey && !hasSelection) {\n                // Prevent browser selecting text in prompt or output\n                event.preventDefault();\n                // Shift-click - extend selection\n                try {\n                    this.extendContiguousSelectionTo(index);\n                }\n                catch (e) {\n                    console.error(e);\n                    this.deselectAll();\n                    return;\n                }\n                // Enter selecting mode\n                this._mouseMode = 'select';\n                document.addEventListener('mouseup', this, true);\n                document.addEventListener('mousemove', this, true);\n            }\n            else if (button === 0 && !shiftKey) {\n                // Prepare to start a drag if we are on the drag region.\n                if (targetArea === 'prompt') {\n                    // Prepare for a drag start\n                    this._dragData = {\n                        pressX: event.clientX,\n                        pressY: event.clientY,\n                        index: index\n                    };\n                    // Enter possible drag mode\n                    this._mouseMode = 'couldDrag';\n                    document.addEventListener('mouseup', this, true);\n                    document.addEventListener('mousemove', this, true);\n                    event.preventDefault();\n                }\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n            }\n            else if (button === 2) {\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n                event.preventDefault();\n            }\n        }\n        else if (targetArea === 'input') {\n            if (button === 2 && !this.isSelectedOrActive(widget)) {\n                this.deselectAll();\n                this.activeCellIndex = index;\n            }\n        }\n        // If we didn't set focus above, make sure we get focus now.\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle the `'mouseup'` event on the document.\n     */\n    _evtDocumentMouseup(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Remove the event listeners we put on the document\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        if (this._mouseMode === 'couldDrag') {\n            // We didn't end up dragging if we are here, so treat it as a click event.\n            const [, index] = this._findEventTargetAndCell(event);\n            this.deselectAll();\n            this.activeCellIndex = index;\n        }\n        this._mouseMode = null;\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtDocumentMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // If in select mode, update the selection\n        switch (this._mouseMode) {\n            case 'select': {\n                const target = event.target;\n                const index = this._findCell(target);\n                if (index !== -1) {\n                    this.extendContiguousSelectionTo(index);\n                }\n                break;\n            }\n            case 'couldDrag': {\n                // Check for a drag initialization.\n                const data = this._dragData;\n                const dx = Math.abs(event.clientX - data.pressX);\n                const dy = Math.abs(event.clientY - data.pressY);\n                if (dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD) {\n                    this._mouseMode = null;\n                    this._startDrag(data.index, event.clientX, event.clientY);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Model presence should be checked before calling event handlers\n        const model = this.model;\n        const source = event.source;\n        if (source === this) {\n            // Handle the case where we are moving cells within\n            // the same notebook.\n            event.dropAction = 'move';\n            const toMove = event.mimeData.getData('internal:cells');\n            // For collapsed markdown headings with hidden \"child\" cells, move all\n            // child cells as well as the markdown heading.\n            const cell = toMove[toMove.length - 1];\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                const nextParent = NotebookActions.findNextParentHeading(cell, source);\n                if (nextParent > 0) {\n                    const index = findIndex(source.widgets, (possibleCell) => {\n                        return cell.model.id === possibleCell.model.id;\n                    });\n                    toMove.push(...source.widgets.slice(index + 1, nextParent));\n                }\n            }\n            // Compute the to/from indices for the move.\n            let fromIndex = ArrayExt.firstIndexOf(this.widgets, toMove[0]);\n            let toIndex = this._findCell(target);\n            // This check is needed for consistency with the view.\n            if (toIndex !== -1 && toIndex > fromIndex) {\n                toIndex -= 1;\n            }\n            else if (toIndex === -1) {\n                // If the drop is within the notebook but not on any cell,\n                // most often this means it is past the cell areas, so\n                // set it to move the cells to the end of the notebook.\n                toIndex = this.widgets.length - 1;\n            }\n            // Don't move if we are within the block of selected cells.\n            if (toIndex >= fromIndex && toIndex < fromIndex + toMove.length) {\n                return;\n            }\n            // Move the cells one by one\n            model.cells.beginCompoundOperation();\n            if (fromIndex < toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex, toIndex);\n                });\n            }\n            else if (fromIndex > toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex++, toIndex++);\n                });\n            }\n            model.cells.endCompoundOperation();\n        }\n        else {\n            // Handle the case where we are copying cells between\n            // notebooks.\n            event.dropAction = 'copy';\n            // Find the target cell and insert the copied cells.\n            let index = this._findCell(target);\n            if (index === -1) {\n                index = this.widgets.length;\n            }\n            const start = index;\n            const values = event.mimeData.getData(JUPYTER_CELL_MIME);\n            const factory = model.contentFactory;\n            // Insert the copies of the original cells.\n            model.cells.beginCompoundOperation();\n            each(values, (cell) => {\n                let value;\n                switch (cell.cell_type) {\n                    case 'code':\n                        value = factory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        value = factory.createMarkdownCell({ cell });\n                        break;\n                    default:\n                        value = factory.createRawCell({ cell });\n                        break;\n                }\n                model.cells.insert(index++, value);\n            });\n            model.cells.endCompoundOperation();\n            // Select the inserted cells.\n            this.deselectAll();\n            this.activeCellIndex = start;\n            this.extendContiguousSelectionTo(index - 1);\n        }\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        var _a;\n        const cells = this.model.cells;\n        const selected = [];\n        const toMove = [];\n        each(this.widgets, (widget, i) => {\n            const cell = cells.get(i);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(DROP_SOURCE_CLASS);\n                selected.push(cell.toJSON());\n                toMove.push(widget);\n            }\n        });\n        const activeCell = this.activeCell;\n        let dragImage = null;\n        let countString;\n        if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.type) === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            countString = ' ';\n            if (executionCount) {\n                countString = executionCount.toString();\n            }\n        }\n        else {\n            countString = '';\n        }\n        // Create the drag image.\n        dragImage = Private.createDragImage(selected.length, countString, (_a = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.value.text.split('\\n')[0].slice(0, 26)) !== null && _a !== void 0 ? _a : '');\n        // Set up the drag event.\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            supportedActions: 'copy-move',\n            proposedAction: 'copy',\n            source: this\n        });\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n        // Add mimeData for the fully reified cell widgets, for the\n        // case where the target is in the same notebook and we\n        // can just move the cells.\n        this._drag.mimeData.setData('internal:cells', toMove);\n        // Add mimeData for the text content of the selected cells,\n        // allowing for drag/drop into plain text fields.\n        const textContent = toMove.map(cell => cell.model.value.text).join('\\n');\n        this._drag.mimeData.setData('text/plain', textContent);\n        // Remove mousemove and mouseup listeners and start the drag.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        this._mouseMode = null;\n        void this._drag.start(clientX, clientY).then(action => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            each(toMove, widget => {\n                widget.removeClass(DROP_SOURCE_CLASS);\n            });\n        });\n    }\n    /**\n     * Handle `focus` events for the widget.\n     */\n    _evtFocusIn(event) {\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            // If the editor itself does not have focus, ensure command mode.\n            if (!widget.editorWidget.node.contains(target)) {\n                this.mode = 'command';\n            }\n            this.activeCellIndex = index;\n            // If the editor has focus, ensure edit mode.\n            const node = widget.editorWidget.node;\n            if (node.contains(target)) {\n                this.mode = 'edit';\n            }\n            this.activeCellIndex = index;\n        }\n        else {\n            // No cell has focus, ensure command mode.\n            this.mode = 'command';\n        }\n    }\n    /**\n     * Handle `focusout` events for the notebook.\n     */\n    _evtFocusOut(event) {\n        const relatedTarget = event.relatedTarget;\n        // Bail if the window is losing focus, to preserve edit mode. This test\n        // assumes that we explicitly focus things rather than calling blur()\n        if (!relatedTarget) {\n            return;\n        }\n        // Bail if the item gaining focus is another cell,\n        // and we should not be entering command mode.\n        const index = this._findCell(relatedTarget);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            if (widget.editorWidget.node.contains(relatedTarget)) {\n                return;\n            }\n        }\n        // Otherwise enter command mode if not already.\n        if (this.mode !== 'command') {\n            this.mode = 'command';\n            // Switching to command mode currently focuses the notebook element, so\n            // refocus the relatedTarget so the focus actually switches as intended.\n            if (relatedTarget) {\n                relatedTarget.focus();\n            }\n        }\n    }\n    /**\n     * Handle `dblclick` events for the widget.\n     */\n    _evtDblClick(event) {\n        const model = this.model;\n        if (!model) {\n            return;\n        }\n        this.deselectAll();\n        const [target, index] = this._findEventTargetAndCell(event);\n        if (event.target.classList.contains(HEADING_COLLAPSER_CLASS)) {\n            return;\n        }\n        if (index === -1) {\n            return;\n        }\n        this.activeCellIndex = index;\n        if (model.cells.get(index).type === 'markdown') {\n            const widget = this.widgets[index];\n            widget.rendered = false;\n        }\n        else if (target.localName === 'img') {\n            target.classList.toggle(UNCONFINED_CLASS);\n        }\n    }\n    /**\n     * Remove selections from inactive cells to avoid\n     * spurious cursors.\n     */\n    _trimSelections() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            if (i !== this._activeCellIndex) {\n                const cell = this.widgets[i];\n                cell.model.selections.delete(cell.editor.uuid);\n            }\n        }\n    }\n}\n/**\n * The namespace for the `Notebook` class statics.\n */\n(function (Notebook) {\n    /**\n     * The default implementation of a notebook content factory..\n     *\n     * #### Notes\n     * Override methods on this class to customize the default notebook factory\n     * methods that create notebook content.\n     */\n    class ContentFactory extends StaticNotebook.ContentFactory {\n    }\n    Notebook.ContentFactory = ContentFactory;\n    Notebook.defaultContentFactory = new ContentFactory();\n})(Notebook || (Notebook = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for the selected state of a cell.\n     */\n    Private.selectedProperty = new AttachedProperty({\n        name: 'selected',\n        create: () => false\n    });\n    /**\n     * A custom panel layout for the notebook.\n     */\n    class NotebookPanelLayout extends PanelLayout {\n        /**\n         * A message handler invoked on an `'update-request'` message.\n         *\n         * #### Notes\n         * This is a reimplementation of the base class method,\n         * and is a no-op.\n         */\n        onUpdateRequest(msg) {\n            // This is a no-op.\n        }\n    }\n    Private.NotebookPanelLayout = NotebookPanelLayout;\n    /**\n     * Create a cell drag image.\n     */\n    function createDragImage(count, promptNumber, cellContent) {\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    Private.createDragImage = createDragImage;\n    /**\n     * Process the `IOptions` passed to the notebook widget.\n     *\n     * #### Notes\n     * This defaults the content factory to that in the `Notebook` namespace.\n     */\n    function processNotebookOptions(options) {\n        if (options.contentFactory) {\n            return options;\n        }\n        else {\n            return {\n                rendermime: options.rendermime,\n                languagePreference: options.languagePreference,\n                contentFactory: Notebook.defaultContentFactory,\n                mimeTypeService: options.mimeTypeService\n            };\n        }\n    }\n    Private.processNotebookOptions = processNotebookOptions;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, Printing, showDialog } from '@jupyterlab/apputils';\nimport { isMarkdownCellModel } from '@jupyterlab/cells';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { each } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Notebook } from './widget';\n/**\n * The class name added to notebook panels.\n */\nconst NOTEBOOK_PANEL_CLASS = 'jp-NotebookPanel';\nconst NOTEBOOK_PANEL_TOOLBAR_CLASS = 'jp-NotebookPanel-toolbar';\nconst NOTEBOOK_PANEL_NOTEBOOK_CLASS = 'jp-NotebookPanel-notebook';\n/**\n * The class name to add when the document is loaded for the search box.\n */\nconst SEARCH_DOCUMENT_LOADED_CLASS = 'jp-DocumentSearch-document-loaded';\n/**\n * A widget that hosts a notebook toolbar and content area.\n *\n * #### Notes\n * The widget keeps the document metadata in sync with the current\n * kernel on the context.\n */\nexport class NotebookPanel extends DocumentWidget {\n    /**\n     * Construct a new notebook panel.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * Whether we are currently in a series of autorestarts we have already\n         * notified the user about.\n         */\n        this._autorestarting = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // Set up CSS classes\n        this.addClass(NOTEBOOK_PANEL_CLASS);\n        this.toolbar.addClass(NOTEBOOK_PANEL_TOOLBAR_CLASS);\n        this.content.addClass(NOTEBOOK_PANEL_NOTEBOOK_CLASS);\n        // Set up things related to the context\n        this.content.model = this.context.model;\n        this.context.sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n        this.context.sessionContext.statusChanged.connect(this._onSessionStatusChanged, this);\n        this.content.fullyRendered.connect(this._onFullyRendered, this);\n        this.context.saveState.connect(this._onSave, this);\n        void this.revealed.then(() => {\n            if (this.isDisposed) {\n                // this widget has already been disposed, bail\n                return;\n            }\n            // Set the document edit mode on initial open if it looks like a new document.\n            if (this.content.widgets.length === 1) {\n                const cellModel = this.content.widgets[0].model;\n                if (cellModel.type === 'code' && cellModel.value.text === '') {\n                    this.content.mode = 'edit';\n                }\n            }\n        });\n    }\n    _onSave(sender, state) {\n        if (state === 'started' && this.model) {\n            // Find markdown cells\n            const { cells } = this.model;\n            each(cells, cell => {\n                if (isMarkdownCellModel(cell)) {\n                    for (const key of cell.attachments.keys) {\n                        if (!cell.value.text.includes(key)) {\n                            cell.attachments.remove(key);\n                        }\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * The session context used by the panel.\n     */\n    get sessionContext() {\n        return this.context.sessionContext;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this.content.model;\n    }\n    /**\n     * Update the options for the current notebook panel.\n     *\n     * @param config new options to set\n     */\n    setConfig(config) {\n        this.content.editorConfig = config.editorConfig;\n        this.content.notebookConfig = config.notebookConfig;\n        // Update kernel shutdown behavior\n        const kernelPreference = this.context.sessionContext.kernelPreference;\n        this.context.sessionContext.kernelPreference = Object.assign(Object.assign({}, kernelPreference), { shutdownOnDispose: config.kernelShutdown });\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        void this.context.ready.then(() => {\n            this.content.setFragment(fragment);\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n    }\n    /**\n     * Prints the notebook by converting to HTML with nbconvert.\n     */\n    [Printing.symbol]() {\n        return async () => {\n            // Save before generating HTML\n            if (this.context.model.dirty && !this.context.model.readOnly) {\n                await this.context.save();\n            }\n            await Printing.printURL(PageConfig.getNBConvertURL({\n                format: 'html',\n                download: false,\n                path: this.context.path\n            }));\n        };\n    }\n    /**\n     * Handle a fully rendered signal notebook.\n     */\n    _onFullyRendered(notebook, fullyRendered) {\n        fullyRendered\n            ? this.removeClass(SEARCH_DOCUMENT_LOADED_CLASS)\n            : this.addClass(SEARCH_DOCUMENT_LOADED_CLASS);\n    }\n    /**\n     * Handle a change in the kernel by updating the document metadata.\n     */\n    _onKernelChanged(sender, args) {\n        if (!this.model || !args.newValue) {\n            return;\n        }\n        const { newValue } = args;\n        void newValue.info.then(info => {\n            var _a;\n            if (this.model &&\n                ((_a = this.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === newValue) {\n                this._updateLanguage(info.language_info);\n            }\n        });\n        void this._updateSpec(newValue);\n    }\n    _onSessionStatusChanged(sender, status) {\n        var _a;\n        // If the status is autorestarting, and we aren't already in a series of\n        // autorestarts, show the dialog.\n        if (status === 'autorestarting' && !this._autorestarting) {\n            // The kernel died and the server is restarting it. We notify the user so\n            // they know why their kernel state is gone.\n            void showDialog({\n                title: this._trans.__('Kernel Restarting'),\n                body: this._trans.__('The kernel for %1 appears to have died. It will restart automatically.', (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n            this._autorestarting = true;\n        }\n        else if (status === 'restarting') {\n            // Another autorestart attempt will first change the status to\n            // restarting, then to autorestarting again, so we don't reset the\n            // autorestarting status if the status is 'restarting'.\n            /* no-op */\n        }\n        else {\n            this._autorestarting = false;\n        }\n    }\n    /**\n     * Update the kernel language.\n     */\n    _updateLanguage(language) {\n        this.model.metadata.set('language_info', language);\n    }\n    /**\n     * Update the kernel spec.\n     */\n    async _updateSpec(kernel) {\n        const spec = await kernel.spec;\n        if (this.isDisposed) {\n            return;\n        }\n        this.model.metadata.set('kernelspec', {\n            name: kernel.name,\n            display_name: spec === null || spec === void 0 ? void 0 : spec.display_name,\n            language: spec === null || spec === void 0 ? void 0 : spec.language\n        });\n    }\n}\n/**\n * A namespace for `NotebookPanel` statics.\n */\n(function (NotebookPanel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Notebook.ContentFactory {\n        /**\n         * Create a new content area for the panel.\n         */\n        createNotebook(options) {\n            return new Notebook(options);\n        }\n    }\n    NotebookPanel.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the notebook panel.\n     */\n    NotebookPanel.defaultContentFactory = new ContentFactory();\n    /* tslint:disable */\n    /**\n     * The notebook renderer token.\n     */\n    NotebookPanel.IContentFactory = new Token('@jupyterlab/notebook:IContentFactory');\n    /* tslint:enable */\n})(NotebookPanel || (NotebookPanel = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The notebook widget factory token.\n */\nexport const INotebookWidgetFactory = new Token('@jupyterlab/notebook:INotebookWidgetFactory');\n/* tslint:enable */\n/* tslint:disable */\n/**\n * The notebook tools token.\n */\nexport const INotebookTools = new Token('@jupyterlab/notebook:INotebookTools');\n/* tslint:disable */\n/**\n * The notebook tracker token.\n */\nexport const INotebookTracker = new Token('@jupyterlab/notebook:INotebookTracker');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nexport class NotebookTracker extends WidgetTracker {\n    constructor() {\n        super(...arguments);\n        this._activeCell = null;\n        this._activeCellChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n    }\n    /**\n     * The currently focused cell.\n     *\n     * #### Notes\n     * This is a read-only property. If there is no cell with the focus, then this\n     * value is `null`.\n     */\n    get activeCell() {\n        const widget = this.currentWidget;\n        if (!widget) {\n            return null;\n        }\n        return widget.content.activeCell || null;\n    }\n    /**\n     * A signal emitted when the current active cell changes.\n     *\n     * #### Notes\n     * If there is no cell with the focus, then `null` will be emitted.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the selection state changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * Add a new notebook panel to the tracker.\n     *\n     * @param panel - The notebook panel being added.\n     */\n    add(panel) {\n        const promise = super.add(panel);\n        panel.content.activeCellChanged.connect(this._onActiveCellChanged, this);\n        panel.content.selectionChanged.connect(this._onSelectionChanged, this);\n        return promise;\n    }\n    /**\n     * Dispose of the resources held by the tracker.\n     */\n    dispose() {\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Handle the current change event.\n     */\n    onCurrentChanged(widget) {\n        // Store an internal reference to active cell to prevent false positives.\n        const activeCell = this.activeCell;\n        if (activeCell && activeCell === this._activeCell) {\n            return;\n        }\n        this._activeCell = activeCell;\n        if (!widget) {\n            return;\n        }\n        // Since the notebook has changed, immediately signal an active cell change\n        this._activeCellChanged.emit(widget.content.activeCell || null);\n    }\n    _onActiveCellChanged(sender, cell) {\n        // Check if the active cell change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._activeCell = cell || null;\n            this._activeCellChanged.emit(this._activeCell);\n        }\n    }\n    _onSelectionChanged(sender) {\n        // Check if the selection change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n}\n//# sourceMappingURL=tracker.js.map","import { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { notTrustedIcon, trustedIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Determine the notebook trust status message.\n */\nfunction cellTrust(props, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    if (props.trustedCells === props.totalCells) {\n        return [\n            trans.__('Notebook trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else if (props.activeCellTrusted) {\n        return [\n            trans.__('Active cell trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else {\n        return [\n            trans.__('Notebook not trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-untrusted'\n        ];\n    }\n}\n/**\n * A pure function for a notebook trust status component.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for notebook trust.\n */\nfunction NotebookTrustComponent(props) {\n    if (props.allCellsTrusted) {\n        return React.createElement(trustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n    else {\n        return React.createElement(notTrustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n}\n/**\n * The NotebookTrust status item.\n */\nexport class NotebookTrustStatus extends VDomRenderer {\n    /**\n     * Construct a new status item.\n     */\n    constructor(translator) {\n        super(new NotebookTrustStatus.Model());\n        this.translator = translator || nullTranslator;\n    }\n    /**\n     * Render the NotebookTrust status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = cellTrust(this.model, this.translator)[0];\n        return (React.createElement(\"div\", null,\n            React.createElement(NotebookTrustComponent, { allCellsTrusted: this.model.trustedCells === this.model.totalCells, activeCellTrusted: this.model.activeCellTrusted, totalCells: this.model.totalCells, trustedCells: this.model.trustedCells })));\n    }\n}\n/**\n * A namespace for NotebookTrust statics.\n */\n(function (NotebookTrustStatus) {\n    /**\n     * A VDomModel for the NotebookTrust status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._trustedCells = 0;\n            this._totalCells = 0;\n            this._activeCellTrusted = false;\n            this._notebook = null;\n        }\n        /**\n         * The number of trusted cells in the current notebook.\n         */\n        get trustedCells() {\n            return this._trustedCells;\n        }\n        /**\n         * The total number of cells in the current notebook.\n         */\n        get totalCells() {\n            return this._totalCells;\n        }\n        /**\n         * Whether the active cell is trusted.\n         */\n        get activeCellTrusted() {\n            return this._activeCellTrusted;\n        }\n        /**\n         * The current notebook for the model.\n         */\n        get notebook() {\n            return this._notebook;\n        }\n        set notebook(model) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.activeCellChanged.disconnect(this._onActiveCellChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onModelChanged, this);\n            }\n            const oldState = this._getAllState();\n            this._notebook = model;\n            if (this._notebook === null) {\n                this._trustedCells = 0;\n                this._totalCells = 0;\n                this._activeCellTrusted = false;\n            }\n            else {\n                // Add listeners\n                this._notebook.activeCellChanged.connect(this._onActiveCellChanged, this);\n                this._notebook.modelContentChanged.connect(this._onModelChanged, this);\n                // Derive values\n                if (this._notebook.activeCell !== undefined) {\n                    this._activeCellTrusted = this._notebook.activeCell.model.trusted;\n                }\n                else {\n                    this._activeCellTrusted = false;\n                }\n                const { total, trusted } = this._deriveCellTrustState(this._notebook.model);\n                this._totalCells = total;\n                this._trustedCells = trusted;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the notebook model changes, update the trust state.\n         */\n        _onModelChanged(notebook) {\n            const oldState = this._getAllState();\n            const { total, trusted } = this._deriveCellTrustState(notebook.model);\n            this._totalCells = total;\n            this._trustedCells = trusted;\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the active cell changes, update the trust state.\n         */\n        _onActiveCellChanged(model, cell) {\n            const oldState = this._getAllState();\n            if (cell) {\n                this._activeCellTrusted = cell.model.trusted;\n            }\n            else {\n                this._activeCellTrusted = false;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * Given a notebook model, figure out how many of the cells are trusted.\n         */\n        _deriveCellTrustState(model) {\n            if (model === null) {\n                return { total: 0, trusted: 0 };\n            }\n            const cells = toArray(model.cells);\n            const trusted = cells.reduce((accum, current) => {\n                if (current.trusted) {\n                    return accum + 1;\n                }\n                else {\n                    return accum;\n                }\n            }, 0);\n            const total = cells.length;\n            return {\n                total,\n                trusted\n            };\n        }\n        /**\n         * Get the current state of the model.\n         */\n        _getAllState() {\n            return [this._trustedCells, this._totalCells, this.activeCellTrusted];\n        }\n        /**\n         * Trigger a change in the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] ||\n                oldState[1] !== newState[1] ||\n                oldState[2] !== newState[2]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    NotebookTrustStatus.Model = Model;\n})(NotebookTrustStatus || (NotebookTrustStatus = {}));\n//# sourceMappingURL=truststatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\nimport { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { ToolbarItems } from './default-toolbar';\nimport { NotebookPanel } from './panel';\nimport { StaticNotebook } from './widget';\n/**\n * A widget factory for notebook panels.\n */\nexport class NotebookWidgetFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new notebook widget factory.\n     *\n     * @param options - The options used to construct the factory.\n     */\n    constructor(options) {\n        super(options);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || NotebookPanel.defaultContentFactory;\n        this.mimeTypeService = options.mimeTypeService;\n        this._editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this._notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._sessionDialogs = options.sessionDialogs || sessionContextDialogs;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n    }\n    /**\n     * Create a new widget.\n     *\n     * #### Notes\n     * The factory will start the appropriate kernel.\n     */\n    createNewWidget(context, source) {\n        const nbOptions = {\n            rendermime: source\n                ? source.content.rendermime\n                : this.rendermime.clone({ resolver: context.urlResolver }),\n            contentFactory: this.contentFactory,\n            mimeTypeService: this.mimeTypeService,\n            editorConfig: source ? source.content.editorConfig : this._editorConfig,\n            notebookConfig: source\n                ? source.content.notebookConfig\n                : this._notebookConfig\n        };\n        const content = this.contentFactory.createNotebook(nbOptions);\n        return new NotebookPanel({ context, content });\n    }\n    /**\n     * Default factory for toolbar items to be added after the widget is created.\n     */\n    defaultToolbarFactory(widget) {\n        return ToolbarItems.getDefaultItems(widget, this._sessionDialogs, this.translator);\n    }\n}\n//# sourceMappingURL=widgetfactory.js.map"],"names":["JUPYTER_CELL_MIME","KernelError","Error","constructor","content","errorContent","errorName","ename","errorValue","evalue","super","this","traceback","Object","setPrototypeOf","prototype","NotebookActions","Private","executed","executionScheduled","selectionExecuted","setHeadingCollapse","cell","collapsing","notebook","which","findIndex","widgets","possibleCell","index","model","id","length","selectedHeadingInfo","getHeadingInfo","isHidden","MarkdownCell","isHeading","cellNum","localCollapsed","localCollapsedLevel","subCell","subCellHeadingInfo","headingLevel","setHidden","collapsed","numberChildNodes","setCellCollapse","level","headingInfo","headingCollapsed","splitCell","activeCell","state","getState","deselectAll","nbModel","activeCellIndex","child","editor","selections","getSelections","orig","value","text","offsets","start","end","i","getOffsetAt","push","clones","clone","cloneCell","type","outputs","clear","slice","replace","cells","beginCompoundOperation","set","insert","endCompoundOperation","activeCellDelta","focus","handleState","mergeCells","mergeAbove","toMerge","toDelete","primary","active","attachments","forEach","isSelectedOrActive","isRawCellModel","isMarkdownCellModel","key","keys","get","toJSON","cellModel","unshift","newModel","join","isCodeCellModel","fromJSON","removeValue","rendered","deleteCells","insertAbove","contentFactory","createCell","notebookConfig","defaultCell","insertBelow","moveDown","move","select","deselect","moveUp","changeCellType","run","sessionContext","Promise","resolve","promise","runSelected","handleRunState","runAndAdvance","mode","runAndInsert","runAll","renderAllMarkdown","previousIndex","runAllAbove","runAllBelow","replaceSelection","_a","_b","call","selectAbove","possibleNextCellIndex","possibleNextCell","inputHidden","selectBelow","maxCellIndex","extendSelectionAbove","toTop","extendContiguousSelectionTo","extendSelectionBelow","toBottom","selectAll","copy","copyOrCut","cut","paste","clipboard","Clipboard","hasData","values","getData","newCells","map","cell_type","createCodeCell","createMarkdownCell","createRawCell","deletable","metadata","reverse","remove","undo","sharedModel","redo","toggleAllLineNumbers","config","editorConfig","lineNumbers","code","markdown","raw","newConfig","assign","clearOutputs","each","clearExecution","outputHidden","clearAllOutputs","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","enableOutputScrolling","outputsScrolled","disableOutputScrolling","selectLastRunCell","latestTime","latestCellIdx","cellIndx","execution","JSONExt","undefined","timestamp","toString","startTime","Date","setMarkdownHeader","Math","min","max","collapseAll","expandAllHeadings","expandParent","nearestParentCell","childHeaderInfo","cellN","hInfo","findNearestParentHeader","findNextParentHeading","toggleCurrentHeadingCollapse","ElementExt","node","trust","translator","trans","nullTranslator","load","toArray","trusted","every","trustMessage","__","href","target","rel","showDialog","body","buttons","Dialog","label","then","title","result","button","accept","wasFocused","contains","document","activeElement","scrollIfNeeded","activate","deletedCells","Signal","scroll","rect","inputArea","getBoundingClientRect","scrollToPosition","bottom","lastIndex","selected","filter","all","_c","emit","success","isTerminating","session","path","CodeCell","recordTiming","reply","splice","isDisposed","status","payload","setNextInput","source","newCell","ArrayExt","handlePayload","catch","reason","message","startsWith","error","ran","runCell","results","lastCell","update","executionCount","setPrompt","data","cellJSON","setData","newHeader","Array","matches","exec","ToolbarItems","createSaveButton","panel","onClick","context","readOnly","save","createCheckpoint","addToolbarButtonClass","ReactWidget","UseSignal","signal","fileChanged","ToolbarButtonComponent","icon","saveIcon","tooltip","enabled","contentsModel","writable","createInsertButton","ToolbarButton","addIcon","createCutButton","cutIcon","createCopyButton","copyIcon","createPasteButton","pasteIcon","createRunButton","runIcon","createRestartRunAllButton","dialogs","fastForwardIcon","sessionContextDialogs","restart","restarted","createCellTypeItem","CellTypeSwitcher","getDefaultItems","sessionDialogs","name","widget","Toolbar","handleChange","event","_notebook","handleKeyDown","keyCode","_trans","addClass","activeCellChanged","connect","selectionChanged","render","HTMLSelect","className","onChange","onKeyDown","CellList","modelDB","factory","_mutex","_isDisposed","_changed","_factory","_cellOrder","createList","_cellMap","ObservableMap","changed","_onOrderChanged","nbmodel","onSharedModelChanged","onModelDBChanged","self","change","transact","deleteCellRange","oldIndex","oldValues","newValues","insertLocation","newIndex","insertCells","switchSharedModel","from","currpos","cellsChange","delta","nbcell","insertAll","delete","removeRange","retain","iter","arr","ArrayIterator","dispose","fromIndex","toIndex","pushAll","startIndex","endIndex","canRedo","canUndo","isUndoAble","clearUndo","clearUndoHistory","order","existingCell","createValue","isStandalone","freshCell","NotebookModel","options","_dirty","_readOnly","_contentChanged","_stateChanged","_nbformat","_nbformatMinor","ModelDB","_isInitialized","isInitialized","defaultContentFactory","view","_cells","_onCellsChanged","createMap","has","languagePreference","_ensureMetadata","triggerContentChange","_deletedCells","_onStateChanged","newValue","oldValue","triggerStateChange","spec","info","JSON","stringify","fromString","parse","getMetadata","nbformat_minor","nbformat","useId","origNbformat","orig_nbformat","msg","dirty","initialize","list","contentChanged","sender","changes","stateChange","display_name","args","ContentFactory","codeCellContentFactory","CodeCellModel","UUID","MarkdownCellModel","RawCellModel","NotebookModelFactory","_disposed","createNew","preferredLanguage","CommandEditComponent","props","TextItem","modeNames","notebookMode","CommandEditStatus","VDomRenderer","Model","_modeNames","command","edit","VDomModel","arguments","_onChanged","oldMode","_notebookMode","_triggerChange","oldNotebook","stateChanged","disconnect","modelContentChanged","oldState","newState","RankedPanel","Widget","_items","layout","PanelLayout","addWidget","rank","rankItem","itemCmp","insertWidget","onChildRemoved","item","NotebookTools","_commonTools","_advancedTools","Collapse","_tracker","tracker","currentChanged","_onActiveNotebookPanelChanged","_onActiveCellChanged","_onSelectionChanged","currentWidget","addItem","tool","section","notebookTools","MessageLoop","ActiveNotebookPanelMessage","ActiveCellMessage","_prevActiveNotebookModel","_onActiveNotebookPanelMetadataChanged","activeNBModel","activeNotebookPanel","_toolChildren","_prevActiveCell","_onActiveCellMetadataChanged","SelectionMessage","ObservableJSON","chain","children","ConflatableMessage","Tool","processMessage","onActiveNotebookPanelChanged","onActiveCellChanged","onSelectionChanged","onActiveCellMetadataChanged","onActiveNotebookPanelMetadataChanged","ActiveCellTool","_model","CodeEditor","count","_cellModel","_onValueChanged","mimeTypeChanged","_onMimeTypeChanged","promptNode","cloneNode","prompt","editorFactory","split","mimeType","editorWidget","CodeEditorWrapper","setOption","MetadataEditorTool","JSONEditor","titleNode","createElement","textContent","NotebookMetadataEditorTool","_update","nb","CellMetadataEditorTool","KeySelector","createSelectorNode","_getValue","_default","_setValue","_changeGuard","default","_validCellTypes","validCellTypes","_getter","getter","_setter","setter","getElementsByTagName","handleEvent","onValueChanged","onAfterAttach","selectNode","addEventListener","onBeforeDetach","removeEventListener","disabled","cellType","indexOf","createSlideShowSelector","optionValueArray","create","slide_type","createNBConvertSelector","first","second","toLocaleUpperCase","optionNodes","option","h","VirtualDOM","Styling","NB_CELL_CLASS","EDIT_CLASS","COMMAND_CLASS","ACTIVE_CLASS","SELECTED_CLASS","OTHER_SELECTED_CLASS","DROP_TARGET_CLASS","DROP_SOURCE_CLASS","DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","window","requestIdleCallback","handler","now","setTimeout","didTimeout","timeRemaining","cancelIdleCallback","clearTimeout","StaticNotebook","_editorConfig","defaultEditorConfig","_notebookConfig","defaultNotebookConfig","_mimetype","_modelChanged","_modelContentChanged","_fullyRendered","_placeholderCellRendered","_renderedCellsCount","dataset","rendermime","NotebookPanelLayout","_mimetypeService","mimeTypeService","_toRenderMap","Map","_cellsArray","_observer","IntersectionObserver","entries","observer","o","isIntersecting","unobserve","ci","_renderPlaceholderCell","root","threshold","rootMargin","observedTopMargin","observedBottomMargin","isCollaborative","connected","collaborators","_onCollaboratorsChanged","_onModelChanged","onModelChanged","_updateEditorConfig","_updateNotebookConfig","onModelContentChanged","onMetadataChanged","_updateMimetype","onCellInserted","onCellMoved","onCellRemoved","_removeCell","_insertCell","insertType","_moveCell","requestAnimationFrame","_createCodeCell","_createMarkdownCell","_createRawCell","numberCellsToRenderDirectly","placeholder","_createPlaceholderCell","observe","_incrementRenderedCount","renderCellOnIdle","renderPlaceholderCells","_renderPlaceholderCells","bind","timeout","deadline","next","pl","removeWidgetAt","updateEditorOnShow","maxNumberOutputs","syncCollapse","syncEditable","syncScrolled","innerHTML","parent","getMimeTypeByLanguage","editorOptions","setOptions","refresh","toggleClass","scrollPastEnd","size","lineWrap","matchBrackets","autoClosingBrackets","Cell","initializeState","RawCell","Notebook","processNotebookOptions","_activeCellIndex","_activeCell","_mode","_drag","_fragment","_dragData","_mouseMode","_activeCellChanged","_selectionChanged","_checkCacheOnNextResize","tabIndex","setAttribute","_ensureFocus","_trimSelections","selectedProperty","isSelected","head","anchor","getContiguousSelection","c","last","activeIndex","position","ar","top","height","abs","scrollTop","scrollToCell","setFragment","fragment","ready","eventPhase","Event","CAPTURING_PHASE","_evtContextMenuCapture","_evtMouseDownCapture","_evtMouseDown","currentTarget","_evtDocumentMouseup","_evtDocumentMousemove","_evtDblClick","_evtFocusIn","_evtFocusOut","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterShow","onResize","cache","_cellLayoutStateCache","width","parseInt","style","w","onBeforeHide","onActivateRequest","onUpdateRequest","removeClass","el","querySelector","console","warn","scrollIntoView","localCollaborator","uuid","sessionId","selectionStyle","color","edgeRequested","_onEdgeRequest","location","prev","lastLine","lineCount","setCursorPosition","line","column","force","hasFocus","_findCell","n","classList","parentElement","_findEventTargetAndCell","elementFromPoint","clientX","clientY","shiftKey","preventDefault","targetArea","hasSelection","getSelection","e","pressX","pressY","stopPropagation","dx","dy","_startDrag","mimeData","add","elements","getElementsByClassName","dropAction","proposedAction","toMove","nextParent","cellWidget","countString","dragImage","createDragImage","Drag","MimeData","supportedActions","action","relatedTarget","localName","toggle","AttachedProperty","promptNumber","cellContent","SEARCH_DOCUMENT_LOADED_CLASS","NotebookPanel","DocumentWidget","_autorestarting","toolbar","kernelChanged","_onKernelChanged","statusChanged","_onSessionStatusChanged","fullyRendered","_onFullyRendered","saveState","_onSave","revealed","includes","setConfig","kernelPreference","shutdownOnDispose","kernelShutdown","Printing","async","PageConfig","format","download","kernel","_updateLanguage","language_info","_updateSpec","language","createNotebook","IContentFactory","Token","INotebookWidgetFactory","INotebookTools","INotebookTracker","NotebookTracker","WidgetTracker","onCurrentChanged","NotebookTrustComponent","allCellsTrusted","trustedIcon","stylesheet","notTrustedIcon","NotebookTrustStatus","trustedCells","totalCells","activeCellTrusted","cellTrust","_trustedCells","_totalCells","_activeCellTrusted","_getAllState","total","_deriveCellTrustState","reduce","accum","current","NotebookWidgetFactory","ABCWidgetFactory","_sessionDialogs","createNewWidget","nbOptions","resolver","urlResolver","defaultToolbarFactory"],"sourceRoot":""}
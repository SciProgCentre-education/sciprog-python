{"version":3,"file":"3283.f9e7ec1328249099f64a.js","mappings":"0OAWA,MAQMA,EAAc,IAAIC,OAAO,kCA8H/B,EADgB,CAzHC,CACbC,GAAI,oDACJC,SAAU,CAAC,EAAAC,iBACXC,WAAW,EACXC,SAAU,CAACC,EAAKC,KACZ,MAAMC,EAAU,EAAAC,WAAA,aAChBF,EAAQG,YAAYC,SAAQC,MAAOC,EAAMC,KACrC,MAAM,eAAEC,GAAmBD,EAE3B,GAAa,aADA,EAAAL,WAAA,UAAqB,aAE9B,OAEJ,MAAMO,EAAOD,EAAeC,KAC5BC,OAAOC,KAAK,GAAGV,wBAA8BQ,IAAQ,UAErDF,EAAQK,eASD,CACflB,GAAI,sDACJC,SAAU,CAAC,EAAAkB,kBACXhB,WAAW,EACXC,SAAU,CAACC,EAAKe,KACZ,MAAMb,EAAU,EAAAC,WAAA,aAEVa,EAAUD,EAAWH,KAC3BG,EAAWH,KAAO,CAACF,EAAMO,EAAa,UAAWC,EAAQC,KAErD,GAAY,YADAA,MAAAA,OAAyC,EAASA,EAAQC,KAGlE,YADAJ,EAAQK,KAAKN,EAAYL,EAAMO,EAAYC,EAAQC,GAGvD,MACMG,EAAgB,WADV,EAAAC,QAAA,QAAgBb,GACK,YAAc,OAC/CC,OAAOC,KAAK,GAAGV,UAAgBoB,UAAcZ,QAQ5C,CACTf,GAAI,gDACJG,WAAW,EACXC,SAAWC,IACP,MAAME,EAAU,EAAAC,WAAA,aACVqB,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO,GAAGzB,cACfsB,EAAKI,OAAS,SACdJ,EAAKK,IAAM,sBACX,MAAMC,EAAO,IAAI,EAAAC,OAAO,CAAEP,KAAAA,IAC1B,EAAAQ,aAAA,QAAqB,CACjBC,UAAWT,EACXU,gBAAiB,SACjBC,QAAS,kBACTC,OAAQ,OACRC,MAAO,SAEXP,EAAKnC,GAAK,eACVK,EAAIsC,MAAMC,IAAIT,EAAM,MAAO,CAAEU,KAAM,MAO5B,CACX7C,GAAI,kDACJG,WAAW,EACXF,SAAU,CAAC,EAAA6C,QAAS,EAAA3B,kBACpBf,SAAU,CAACC,EAAK0C,EAAQ3B,KACpB,MAAM,SAAE4B,GAAa3C,EACf4C,EAAU,cAChBD,EAASE,WAAWD,EAAS,CACzBE,QAAUC,IACN,IAAIC,EAIJ,GAD6D,QAA5CA,EAFFD,EAEcE,QAAQC,MAAMzD,UAAiC,IAAPuD,IAAgBA,EAEjF,OAEJ,MACMtC,EADY,IAAIyC,gBAAgBxC,OAAOyC,SAASC,QAC/BC,IAAI,QAC3B,IAAK5C,EACD,OAEJ,MAAM6C,EAAOC,mBAAmB9C,GAChCV,EAAIyD,SAASC,MAAK,KAEd,OADa,EAAAvD,WAAA,UAAqB,cAE9B,IAAK,WAED,YADAwC,EAASG,QAAQ,iBAAkB,CAAEpC,KAAM6C,IAG/C,IAAK,YAID,YAHAxC,EAAWH,KAAK2C,EAnHnB,gBAmH2CI,EAAW,CAC/CvC,IAAK,WAIb,IAAK,OAID,YAHAL,EAAWH,KAAK2C,EArHrB,cAqH2CI,EAAW,CAC7CvC,IAAK,kBAQ7BsB,EAAOkB,SAAS,CAAEhB,QAAAA,EAASiB,QAASpE","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../packages/retro-application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter } from '@jupyterlab/application';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { liteWordmark } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(notebooks|edit|consoles)\\\\/?');\n/**\n * Open consoles in a new tab.\n */\nconst consoles = {\n    id: '@jupyterlite/retro-application-extension:consoles',\n    requires: [IConsoleTracker],\n    autoStart: true,\n    activate: (app, tracker) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        tracker.widgetAdded.connect(async (send, console) => {\n            const { sessionContext } = console;\n            const page = PageConfig.getOption('retroPage');\n            if (page === 'consoles') {\n                return;\n            }\n            const path = sessionContext.path;\n            window.open(`${baseUrl}retro/consoles?path=${path}`, '_blank');\n            // the widget is not needed anymore\n            console.dispose();\n        });\n    }\n};\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager = {\n    id: '@jupyterlite/retro-application-extension:docmanager',\n    requires: [IDocumentManager],\n    autoStart: true,\n    activate: (app, docManager) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        // patch the `docManager.open` option to prevent the default behavior\n        const docOpen = docManager.open;\n        docManager.open = (path, widgetName = 'default', kernel, options) => {\n            const ref = options === null || options === void 0 ? void 0 : options.ref;\n            if (ref === '_noref') {\n                docOpen.call(docManager, path, widgetName, kernel, options);\n                return;\n            }\n            const ext = PathExt.extname(path);\n            const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n            window.open(`${baseUrl}retro/${route}?path=${path}`);\n            return undefined;\n        };\n    }\n};\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyterlite/retro-application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}retro/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        liteWordmark.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-RetroLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/retro-application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const matches = (_a = parsed.request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(window.location.search);\n                const path = urlParams.get('path');\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                app.restored.then(() => {\n                    const page = PageConfig.getOption('retroPage');\n                    switch (page) {\n                        case 'consoles': {\n                            commands.execute('console:create', { path: file });\n                            return;\n                        }\n                        case 'notebooks': {\n                            docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                                ref: '_noref'\n                            });\n                            return;\n                        }\n                        case 'edit': {\n                            docManager.open(file, EDITOR_FACTORY, undefined, {\n                                ref: '_noref'\n                            });\n                            return;\n                        }\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    }\n};\nconst plugins = [consoles, docmanager, logo, opener];\nexport default plugins;\n"],"names":["URL_PATTERN","RegExp","id","requires","IConsoleTracker","autoStart","activate","app","tracker","baseUrl","PageConfig","widgetAdded","connect","async","send","console","sessionContext","path","window","open","dispose","IDocumentManager","docManager","docOpen","widgetName","kernel","options","ref","call","route","PathExt","node","document","createElement","href","target","rel","logo","Widget","liteWordmark","container","elementPosition","padding","height","width","shell","add","rank","IRouter","router","commands","command","addCommand","execute","args","_a","request","match","URLSearchParams","location","search","get","file","decodeURIComponent","restored","then","undefined","register","pattern"],"sourceRoot":""}
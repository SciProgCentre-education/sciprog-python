{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/shared-models/lib/utils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/codeeditor/lib/tokens.js"],"names":["CodeEditor","defaultSelectionStyle","className","displayName","color","Model","options","this","_mutex","token","f","_isDisposed","_mimeTypeChanged","Signal","_sharedModelSwitched","modelDB","ModelDB","sharedModel","type","id","changed","connect","_onSharedModelChanged","value","createString","_onModelDBValueChanged","text","mimeType","createValue","_onModelDBMimeTypeChanged","set","createMap","reinitialize","getSource","disconnect","emit","sender","change","sourceChange","get","currpos","forEach","delta","insert","length","delete","remove","retain","event","transact","updateSource","start","end","setSource","getValue","newValue","setValue","args","name","oldValue","defaultConfig","fontFamily","fontSize","lineHeight","lineNumbers","lineWrap","wordWrapColumn","readOnly","tabSize","insertSpaces","matchBrackets","autoClosingBrackets","handlePaste","rulers","codeFolding","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","_onSourceChanged","_setValue","_evtBlur","_evtClick","msg","addEventListener","hidden","isVisible","update","refresh","removeEventListener","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","source","key","content","toJSON","stringify","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","selections","_onSelectionsChanged","_updateOnShow","updateOnShow","isDisposed","dispose","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","width","height","setSize","resizeToFit","getSelection","getLine","slice","match","getOption","undefined","Private","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token"],"mappings":"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","file":"7706.d0a21e35e343abc79f15.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as models from '@jupyterlab/shared-models';\nimport { Signal } from '@lumino/signaling';\nimport { ModelDB } from '@jupyterlab/observables';\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            /**\n             * A mutex to update the shared model.\n             */\n            this._mutex = models.createMutex();\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            this._sharedModelSwitched = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            this.sharedModel = models.createStandaloneCell(this.type, options.id);\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            const value = this.modelDB.createString('value');\n            value.changed.connect(this._onModelDBValueChanged, this);\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.changed.connect(this._onModelDBMimeTypeChanged, this);\n            mimeType.set(options.mimeType || 'text/plain');\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * When we initialize a cell model, we create a standalone model that cannot be shared in a YNotebook.\n         * Call this function to re-initialize the local representation based on a fresh shared model (e.g. models.YFile or models.YCodeCell).\n         *\n         * @param sharedModel\n         * @param reinitialize Whether to reinitialize the shared model.\n         */\n        switchSharedModel(sharedModel, reinitialize) {\n            if (reinitialize) {\n                // update local modeldb\n                // @todo also change metadata\n                this.value.text = sharedModel.getSource();\n            }\n            this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n            // clone model retrieve a shared (not standalone) model\n            this.sharedModel = sharedModel;\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            this._sharedModelSwitched.emit(true);\n        }\n        /**\n         * We update the modeldb store when the shared model changes.\n         * To ensure that we don't run into infinite loops, we wrap this call in a \"mutex\".\n         * The \"mutex\" ensures that the wrapped code can only be executed by either the sharedModelChanged hander\n         * or the modelDB change handler.\n         */\n        _onSharedModelChanged(sender, change) {\n            this._mutex(() => {\n                if (change.sourceChange) {\n                    const value = this.modelDB.get('value');\n                    let currpos = 0;\n                    change.sourceChange.forEach(delta => {\n                        if (delta.insert != null) {\n                            value.insert(currpos, delta.insert);\n                            currpos += delta.insert.length;\n                        }\n                        else if (delta.delete != null) {\n                            value.remove(currpos, currpos + delta.delete);\n                        }\n                        else if (delta.retain != null) {\n                            currpos += delta.retain;\n                        }\n                    });\n                }\n            });\n        }\n        /**\n         * Handle a change to the modelDB value.\n         */\n        _onModelDBValueChanged(value, event) {\n            this._mutex(() => {\n                this.sharedModel.transact(() => {\n                    switch (event.type) {\n                        case 'insert':\n                            this.sharedModel.updateSource(event.start, event.start, event.value);\n                            break;\n                        case 'remove':\n                            this.sharedModel.updateSource(event.start, event.end);\n                            break;\n                        default:\n                            this.sharedModel.setSource(value.text);\n                            break;\n                    }\n                });\n            });\n        }\n        get type() {\n            return 'code';\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * A signal emitted when the shared model was switched.\n         */\n        get sharedModelSwitched() {\n            return this._sharedModelSwitched;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            Signal.clearData(this);\n        }\n        _onModelDBMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        wordWrapColumn: 80,\n        readOnly: false,\n        tabSize: 4,\n        insertSpaces: true,\n        matchBrackets: true,\n        autoClosingBrackets: true,\n        handlePaste: true,\n        rulers: [],\n        codeFolding: false\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = this._trans.__('No data!');\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = this._trans.__('No data!');\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}
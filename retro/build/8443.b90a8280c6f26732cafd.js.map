{"version":3,"file":"8443.b90a8280c6f26732cafd.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/basemanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/builder/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/config/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/contents/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/contents/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/comm.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/future.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/messages.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/serialize.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernel/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernelspec/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernelspec/kernelspec.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernelspec/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernelspec/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/kernelspec/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/nbconvert/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/serverconnection.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/session.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/session/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/setting/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/shim/ws.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/terminal/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/terminal/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/terminal/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/terminal/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/terminal/terminal.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/services/lib/workspace/index.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseManager = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"./serverconnection\");\nclass BaseManager {\n    constructor(options) {\n        var _a;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * A signal emitted when the delegate is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Test whether the delegate has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._disposed.emit(undefined);\n        signaling_1.Signal.clearData(this);\n    }\n}\nexports.BaseManager = BaseManager;\n//# sourceMappingURL=basemanager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BuildManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab build service.\n */\nconst BUILD_SETTINGS_URL = 'api/build';\n/**\n * The build API service manager.\n */\nclass BuildManager {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this._url = '';\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n        const { baseUrl, appUrl } = this.serverSettings;\n        this._url = coreutils_1.URLExt.join(baseUrl, appUrl, BUILD_SETTINGS_URL);\n    }\n    /**\n     * Test whether the build service is available.\n     */\n    get isAvailable() {\n        return coreutils_1.PageConfig.getOption('buildAvailable').toLowerCase() === 'true';\n    }\n    /**\n     * Test whether to check build status automatically.\n     */\n    get shouldCheck() {\n        return coreutils_1.PageConfig.getOption('buildCheck').toLowerCase() === 'true';\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    getStatus() {\n        const { _url, serverSettings } = this;\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, {}, serverSettings);\n        return promise\n            .then(response => {\n            if (response.status !== 200) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n            return response.json();\n        })\n            .then(data => {\n            if (typeof data.status !== 'string') {\n                throw new Error('Invalid data');\n            }\n            if (typeof data.message !== 'string') {\n                throw new Error('Invalid data');\n            }\n            return data;\n        });\n    }\n    /**\n     * Build the application.\n     */\n    build() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'POST' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status === 400) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response, 'Build aborted');\n            }\n            if (response.status !== 200) {\n                const message = `Build failed with ${response.status}, please run 'jupyter lab build' on the server for full output`;\n                throw new serverconnection_1.ServerConnection.ResponseError(response, message);\n            }\n        });\n    }\n    /**\n     * Cancel an active build.\n     */\n    cancel() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'DELETE' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status !== 204) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n        });\n    }\n}\nexports.BuildManager = BuildManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigWithDefaults = exports.ConfigSection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst __1 = require(\"..\");\n/**\n * The url for the config service.\n */\nconst SERVICE_CONFIG_URL = 'api/config';\n/**\n * The namespace for ConfigSection statics.\n */\nvar ConfigSection;\n(function (ConfigSection) {\n    /**\n     * Create a config section.\n     *\n     * @returns A Promise that is fulfilled with the config section is loaded.\n     */\n    function create(options) {\n        const section = new DefaultConfigSection(options);\n        return section.load().then(() => {\n            return section;\n        });\n    }\n    ConfigSection.create = create;\n})(ConfigSection = exports.ConfigSection || (exports.ConfigSection = {}));\n/**\n * Implementation of the Configurable data section.\n */\nclass DefaultConfigSection {\n    /**\n     * Construct a new config section.\n     */\n    constructor(options) {\n        var _a;\n        this._url = 'unknown';\n        const settings = (this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings());\n        this._url = coreutils_1.URLExt.join(settings.baseUrl, SERVICE_CONFIG_URL, encodeURIComponent(options.name));\n    }\n    /**\n     * Get the data for this section.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Load the initial data for this section.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async load() {\n        const response = await __1.ServerConnection.makeRequest(this._url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n    }\n    /**\n     * Modify the stored config values.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Updates the local data immediately, sends the change to the server,\n     * and updates the local data with the response, and fulfils the promise\n     * with that data.\n     */\n    async update(newdata) {\n        this._data = Object.assign(Object.assign({}, this._data), newdata);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify(newdata)\n        };\n        const response = await __1.ServerConnection.makeRequest(this._url, init, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n        return this._data;\n    }\n}\n/**\n * Configurable object with defaults.\n */\nclass ConfigWithDefaults {\n    /**\n     * Create a new config with defaults.\n     */\n    constructor(options) {\n        var _a, _b;\n        this._className = '';\n        this._section = options.section;\n        this._defaults = (_a = options.defaults) !== null && _a !== void 0 ? _a : {};\n        this._className = (_b = options.className) !== null && _b !== void 0 ? _b : '';\n    }\n    /**\n     * Get data from the config section or fall back to defaults.\n     */\n    get(key) {\n        const data = this._classData();\n        return key in data ? data[key] : this._defaults[key];\n    }\n    /**\n     * Set a config value.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Sends the update to the server, and changes our local copy of the data\n     * immediately.\n     */\n    set(key, value) {\n        const d = {};\n        d[key] = value;\n        if (this._className) {\n            const d2 = {};\n            d2[this._className] = d;\n            return this._section.update(d2);\n        }\n        else {\n            return this._section.update(d);\n        }\n    }\n    /**\n     * Get data from the Section with our classname, if available.\n     *\n     * #### Notes\n     * If we have no classname, get all of the data in the Section\n     */\n    _classData() {\n        const data = this._section.data;\n        if (this._className && this._className in data) {\n            return data[this._className];\n        }\n        return data;\n    }\n}\nexports.ConfigWithDefaults = ConfigWithDefaults;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Drive = exports.ContentsManager = exports.Contents = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst validate = __importStar(require(\"./validate\"));\n/**\n * The url for the default drive service.\n */\nconst SERVICE_DRIVE_URL = 'api/contents';\n/**\n * The url for the file access.\n */\nconst FILES_URL = 'files';\n/**\n * A namespace for contents interfaces.\n */\nvar Contents;\n(function (Contents) {\n    /**\n     * Validates an IModel, throwing an error if it does not pass.\n     */\n    function validateContentsModel(contents) {\n        validate.validateContentsModel(contents);\n    }\n    Contents.validateContentsModel = validateContentsModel;\n    /**\n     * Validates an ICheckpointModel, throwing an error if it does not pass.\n     */\n    function validateCheckpointModel(checkpoint) {\n        validate.validateCheckpointModel(checkpoint);\n    }\n    Contents.validateCheckpointModel = validateCheckpointModel;\n})(Contents = exports.Contents || (exports.Contents = {}));\n/**\n * A contents manager that passes file operations to the server.\n * Multiple servers implementing the `IDrive` interface can be\n * attached to the contents manager, so that the same session can\n * perform file operations on multiple backends.\n *\n * This includes checkpointing with the normal file operations.\n */\nclass ContentsManager {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._additionalDrives = new Map();\n        this._fileChanged = new signaling_1.Signal(this);\n        const serverSettings = (this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings());\n        this._defaultDrive = (_b = options.defaultDrive) !== null && _b !== void 0 ? _b : new Drive({ serverSettings });\n        this._defaultDrive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Add an `IDrive` to the manager.\n     */\n    addDrive(drive) {\n        this._additionalDrives.set(drive.name, drive);\n        drive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * Given a path, get a ModelDB.IFactory from the\n     * relevant backend. Returns `undefined` if the backend\n     * does not provide one.\n     */\n    getModelDBFactory(path) {\n        var _a;\n        const [drive] = this._driveForPath(path);\n        return (_a = drive === null || drive === void 0 ? void 0 : drive.modelDBFactory) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the local part of it.\n     *\n     * @param path: the path.\n     *\n     * @returns The local part of the path.\n     */\n    localPath(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1 || !this._additionalDrives.has(firstParts[0])) {\n            return coreutils_1.PathExt.removeSlash(path);\n        }\n        return coreutils_1.PathExt.join(firstParts.slice(1).join(':'), ...parts.slice(1));\n    }\n    /**\n     * Normalize a global path. Reduces '..' and '.' parts, and removes\n     * leading slashes from the local part of the path, while retaining\n     * the drive name if it exists.\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    normalize(path) {\n        const parts = path.split(':');\n        if (parts.length === 1) {\n            return coreutils_1.PathExt.normalize(path);\n        }\n        return `${parts[0]}:${coreutils_1.PathExt.normalize(parts.slice(1).join(':'))}`;\n    }\n    /**\n     * Resolve a global path, starting from the root path. Behaves like\n     * posix-path.resolve, with 3 differences:\n     *  - will never prepend cwd\n     *  - if root has a drive name, the result is prefixed with \"<drive>:\"\n     *  - before adding drive name, leading slashes are removed\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    resolvePath(root, path) {\n        const driveName = this.driveName(root);\n        const localPath = this.localPath(root);\n        const resolved = coreutils_1.PathExt.resolve('/', localPath, path);\n        return driveName ? `${driveName}:${resolved}` : resolved;\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the name of the drive. If the path is missing\n     * a drive portion, returns an empty string.\n     *\n     * @param path: the path.\n     *\n     * @returns The drive name for the path, or the empty string.\n     */\n    driveName(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1) {\n            return '';\n        }\n        if (this._additionalDrives.has(firstParts[0])) {\n            return firstParts[0];\n        }\n        return '';\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    get(path, options) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.get(localPath, options).then(contentsModel => {\n            const listing = [];\n            if (contentsModel.type === 'directory' && contentsModel.content) {\n                algorithm_1.each(contentsModel.content, (item) => {\n                    listing.push(Object.assign(Object.assign({}, item), { path: this._toGlobalPath(drive, item.path) }));\n                });\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath), content: listing });\n            }\n            else {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath) });\n            }\n        });\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param path - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.getDownloadUrl(localPath);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     */\n    newUntitled(options = {}) {\n        if (options.path) {\n            const globalPath = this.normalize(options.path);\n            const [drive, localPath] = this._driveForPath(globalPath);\n            return drive\n                .newUntitled(Object.assign(Object.assign({}, options), { path: localPath }))\n                .then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: coreutils_1.PathExt.join(globalPath, contentsModel.name) });\n            });\n        }\n        else {\n            return this._defaultDrive.newUntitled(options);\n        }\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     */\n    delete(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.delete(localPath);\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param newPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     */\n    rename(path, newPath) {\n        const [drive1, path1] = this._driveForPath(path);\n        const [drive2, path2] = this._driveForPath(newPath);\n        if (drive1 !== drive2) {\n            throw Error('ContentsManager: renaming files must occur within a Drive');\n        }\n        return drive1.rename(path1, path2).then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, path2) });\n        });\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     */\n    save(path, options = {}) {\n        const globalPath = this.normalize(path);\n        const [drive, localPath] = this._driveForPath(path);\n        return drive\n            .save(localPath, Object.assign(Object.assign({}, options), { path: localPath }))\n            .then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: globalPath });\n        });\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    copy(fromFile, toDir) {\n        const [drive1, path1] = this._driveForPath(fromFile);\n        const [drive2, path2] = this._driveForPath(toDir);\n        if (drive1 === drive2) {\n            return drive1.copy(path1, path2).then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, contentsModel.path) });\n            });\n        }\n        else {\n            throw Error('Copying files between drives is not currently implemented');\n        }\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    createCheckpoint(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.createCheckpoint(localPath);\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    listCheckpoints(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.listCheckpoints(localPath);\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    restoreCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.restoreCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    deleteCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.deleteCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Given a drive and a local path, construct a fully qualified\n     * path. The inverse of `_driveForPath`.\n     *\n     * @param drive: an `IDrive`.\n     *\n     * @param localPath: the local path on the drive.\n     *\n     * @returns the fully qualified path.\n     */\n    _toGlobalPath(drive, localPath) {\n        if (drive === this._defaultDrive) {\n            return coreutils_1.PathExt.removeSlash(localPath);\n        }\n        else {\n            return `${drive.name}:${coreutils_1.PathExt.removeSlash(localPath)}`;\n        }\n    }\n    /**\n     * Given a path, get the `IDrive to which it refers,\n     * where the path satisfies the pattern\n     * `'driveName:path/to/file'`. If there is no `driveName`\n     * prepended to the path, it returns the default drive.\n     *\n     * @param path: a path to a file.\n     *\n     * @returns A tuple containing an `IDrive` object for the path,\n     * and a local path for that drive.\n     */\n    _driveForPath(path) {\n        const driveName = this.driveName(path);\n        const localPath = this.localPath(path);\n        if (driveName) {\n            return [this._additionalDrives.get(driveName), localPath];\n        }\n        else {\n            return [this._defaultDrive, localPath];\n        }\n    }\n    /**\n     * Respond to fileChanged signals from the drives attached to\n     * the manager. This prepends the drive name to the path if necessary,\n     * and then forwards the signal.\n     */\n    _onFileChanged(sender, args) {\n        var _a, _b;\n        if (sender === this._defaultDrive) {\n            this._fileChanged.emit(args);\n        }\n        else {\n            let newValue = null;\n            let oldValue = null;\n            if ((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.path) {\n                newValue = Object.assign(Object.assign({}, args.newValue), { path: this._toGlobalPath(sender, args.newValue.path) });\n            }\n            if ((_b = args.oldValue) === null || _b === void 0 ? void 0 : _b.path) {\n                oldValue = Object.assign(Object.assign({}, args.oldValue), { path: this._toGlobalPath(sender, args.oldValue.path) });\n            }\n            this._fileChanged.emit({\n                type: args.type,\n                newValue,\n                oldValue\n            });\n        }\n    }\n}\nexports.ContentsManager = ContentsManager;\n/**\n * A default implementation for an `IDrive`, talking to the\n * server using the Jupyter REST API.\n */\nclass Drive {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c;\n        this._isDisposed = false;\n        this._fileChanged = new signaling_1.Signal(this);\n        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : 'Default';\n        this._apiEndpoint = (_b = options.apiEndpoint) !== null && _b !== void 0 ? _b : SERVICE_DRIVE_URL;\n        this.serverSettings = (_c = options.serverSettings) !== null && _c !== void 0 ? _c : __1.ServerConnection.makeSettings();\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param localPath: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async get(localPath, options) {\n        let url = this._getUrl(localPath);\n        if (options) {\n            // The notebook type cannot take an format option.\n            if (options.type === 'notebook') {\n                delete options['format'];\n            }\n            const content = options.content ? '1' : '0';\n            const params = Object.assign(Object.assign({}, options), { content });\n            url += coreutils_1.URLExt.objectToQueryString(params);\n        }\n        const settings = this.serverSettings;\n        const response = await __1.ServerConnection.makeRequest(url, {}, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        return data;\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param localPath - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(localPath) {\n        const baseUrl = this.serverSettings.baseUrl;\n        let url = coreutils_1.URLExt.join(baseUrl, FILES_URL, coreutils_1.URLExt.encodeParts(localPath));\n        const xsrfTokenMatch = document.cookie.match('\\\\b_xsrf=([^;]*)\\\\b');\n        if (xsrfTokenMatch) {\n            const fullUrl = new URL(url);\n            fullUrl.searchParams.append('_xsrf', xsrfTokenMatch[1]);\n            url = fullUrl.toString();\n        }\n        return Promise.resolve(url);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async newUntitled(options = {}) {\n        var _a;\n        let body = '{}';\n        if (options) {\n            if (options.ext) {\n                options.ext = Private.normalizeExtension(options.ext);\n            }\n            body = JSON.stringify(options);\n        }\n        const settings = this.serverSettings;\n        const url = this._getUrl((_a = options.path) !== null && _a !== void 0 ? _a : '');\n        const init = {\n            method: 'POST',\n            body\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Delete a file.\n     *\n     * @param localPath - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async delete(localPath) {\n        const url = this._getUrl(localPath);\n        const settings = this.serverSettings;\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // TODO: update IPEP27 to specify errors more precisely, so\n        // that error types can be detected here with certainty.\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._fileChanged.emit({\n            type: 'delete',\n            oldValue: { path: localPath },\n            newValue: null\n        });\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(oldLocalPath);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify({ path: newLocalPath })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'rename',\n            oldValue: { path: oldLocalPath },\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Save a file.\n     *\n     * @param localPath - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async save(localPath, options = {}) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(localPath);\n        const init = {\n            method: 'PUT',\n            body: JSON.stringify(options)\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // will return 200 for an existing file and 201 for a new file\n        if (response.status !== 200 && response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'save',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param localPath - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async copy(fromFile, toDir) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(toDir);\n        const init = {\n            method: 'POST',\n            body: JSON.stringify({ copy_from: fromFile })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async createCheckpoint(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateCheckpointModel(data);\n        return data;\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async listCheckpoints(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const response = await __1.ServerConnection.makeRequest(url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        if (!Array.isArray(data)) {\n            throw new Error('Invalid Checkpoint list');\n        }\n        for (let i = 0; i < data.length; i++) {\n            validate.validateCheckpointModel(data[i]);\n        }\n        return data;\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async restoreCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async deleteCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Get a REST url for a file given a path.\n     */\n    _getUrl(...args) {\n        const parts = args.map(path => coreutils_1.URLExt.encodeParts(path));\n        const baseUrl = this.serverSettings.baseUrl;\n        return coreutils_1.URLExt.join(baseUrl, this._apiEndpoint, ...parts);\n    }\n}\nexports.Drive = Drive;\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize a file extension to be of the type `'.foo'`.\n     *\n     * Adds a leading dot if not present and converts to lower case.\n     */\n    function normalizeExtension(extension) {\n        if (extension.length > 0 && extension.indexOf('.') !== 0) {\n            extension = `.${extension}`;\n        }\n        return extension;\n    }\n    Private.normalizeExtension = normalizeExtension;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateCheckpointModel = exports.validateContentsModel = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Validate an `Contents.IModel` object.\n */\nfunction validateContentsModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'path', 'string');\n    validate_1.validateProperty(model, 'type', 'string');\n    validate_1.validateProperty(model, 'created', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n    validate_1.validateProperty(model, 'mimetype', 'object');\n    validate_1.validateProperty(model, 'content', 'object');\n    validate_1.validateProperty(model, 'format', 'object');\n}\nexports.validateContentsModel = validateContentsModel;\n/**\n * Validate an `Contents.ICheckpointModel` object.\n */\nfunction validateCheckpointModel(model) {\n    validate_1.validateProperty(model, 'id', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n}\nexports.validateCheckpointModel = validateCheckpointModel;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module services\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./config\"), exports);\n__exportStar(require(\"./contents\"), exports);\n__exportStar(require(\"./kernel\"), exports);\n__exportStar(require(\"./kernelspec\"), exports);\n__exportStar(require(\"./manager\"), exports);\n__exportStar(require(\"./serverconnection\"), exports);\n__exportStar(require(\"./session\"), exports);\n__exportStar(require(\"./setting\"), exports);\n__exportStar(require(\"./terminal\"), exports);\n__exportStar(require(\"./workspace\"), exports);\n__exportStar(require(\"./nbconvert\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommHandler = void 0;\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Comm channel handler.\n */\nclass CommHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new comm channel.\n     */\n    constructor(target, id, kernel, disposeCb) {\n        super(disposeCb);\n        this._target = '';\n        this._id = '';\n        this._id = id;\n        this._target = target;\n        this._kernel = kernel;\n    }\n    /**\n     * The unique id for the comm channel.\n     */\n    get commId() {\n        return this._id;\n    }\n    /**\n     * The target name for the comm channel.\n     */\n    get targetName() {\n        return this._target;\n    }\n    /**\n     * Get the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client.\n     *\n     * **See also:** [[ICommClose]], [[close]]\n     */\n    get onClose() {\n        return this._onClose;\n    }\n    /**\n     * Set the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client. If\n     * the function returns a promise, and the kernel was closed from the server,\n     * kernel message processing will pause until the returned promise is\n     * fulfilled.\n     *\n     * **See also:** [[close]]\n     */\n    set onClose(cb) {\n        this._onClose = cb;\n    }\n    /**\n     * Get the callback for a comm message received event.\n     */\n    get onMsg() {\n        return this._onMsg;\n    }\n    /**\n     * Set the callback for a comm message received event.\n     *\n     * #### Notes\n     * This is called when a comm message is received. If the function returns a\n     * promise, kernel message processing will pause until it is fulfilled.\n     */\n    set onMsg(cb) {\n        this._onMsg = cb;\n    }\n    /**\n     * Open a comm with optional data and metadata.\n     *\n     * #### Notes\n     * This sends a `comm_open` message to the server.\n     *\n     * **See also:** [[ICommOpen]]\n     */\n    open(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot open');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_open',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                target_name: this._target,\n                data: data !== null && data !== void 0 ? data : {}\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, true);\n    }\n    /**\n     * Send a `comm_msg` message to the kernel.\n     *\n     * #### Notes\n     * This is a no-op if the comm has been closed.\n     *\n     * **See also:** [[ICommMsg]]\n     */\n    send(data, metadata, buffers = [], disposeOnDone = true) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot send');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_msg',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: data\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, disposeOnDone);\n    }\n    /**\n     * Close the comm.\n     *\n     * #### Notes\n     * This will send a `comm_close` message to the kernel, and call the\n     * `onClose` callback if set.\n     *\n     * This is a no-op if the comm is already closed.\n     *\n     * **See also:** [[ICommClose]], [[onClose]]\n     */\n    close(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot close');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_close',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: data !== null && data !== void 0 ? data : {}\n            },\n            metadata,\n            buffers\n        });\n        const future = this._kernel.sendShellMessage(msg, false, true);\n        const onClose = this._onClose;\n        if (onClose) {\n            const ioMsg = KernelMessage.createMessage({\n                msgType: 'comm_close',\n                channel: 'iopub',\n                username: this._kernel.username,\n                session: this._kernel.clientId,\n                content: {\n                    comm_id: this._id,\n                    data: data !== null && data !== void 0 ? data : {}\n                },\n                metadata,\n                buffers\n            });\n            // In the future, we may want to communicate back to the user the possible\n            // promise returned from onClose.\n            void onClose(ioMsg);\n        }\n        this.dispose();\n        return future;\n    }\n}\nexports.CommHandler = CommHandler;\n//# sourceMappingURL=comm.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst comm_1 = require(\"./comm\");\nconst KernelMessage = __importStar(require(\"./messages\"));\nconst future_1 = require(\"./future\");\nconst serialize = __importStar(require(\"./serialize\"));\nconst validate = __importStar(require(\"./validate\"));\nconst kernelspec_1 = require(\"../kernelspec\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst KERNEL_INFO_TIMEOUT = 3000;\nconst RESTARTING_KERNEL_SESSION = '_RESTARTING_';\nconst STARTING_KERNEL_SESSION = '';\n/**\n * Implementation of the Kernel object.\n *\n * #### Notes\n * Messages from the server are handled in the order they were received and\n * asynchronously. Any message handler can return a promise, and message\n * handling will pause until the promise is fulfilled.\n */\nclass KernelConnection {\n    /**\n     * Construct a kernel object.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        /**\n         * Create the kernel websocket connection and add socket status handlers.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const settings = this.serverSettings;\n            const partialUrl = coreutils_1.URLExt.join(settings.wsUrl, restapi.KERNEL_SERVICE_URL, encodeURIComponent(this._id));\n            // Strip any authentication from the display string.\n            const display = partialUrl.replace(/^((?:\\w+:)?\\/\\/)(?:[^@\\/]+@)/, '$1');\n            console.debug(`Starting WebSocket: ${display}`);\n            let url = coreutils_1.URLExt.join(partialUrl, 'channels?session_id=' + encodeURIComponent(this._clientId));\n            // If token authentication is in use.\n            const token = settings.token;\n            if (settings.appendToken && token !== '') {\n                url = url + `&token=${encodeURIComponent(token)}`;\n            }\n            this._ws = new settings.WebSocket(url);\n            // Ensure incoming binary messages are not Blobs\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onopen = this._onWSOpen;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Make websocket callbacks arrow functions so they bind `this`.\n        /**\n         * Handle a websocket open event.\n         */\n        this._onWSOpen = (evt) => {\n            this._updateConnectionStatus('connected');\n        };\n        /**\n         * Handle a websocket message, validating and routing appropriately.\n         */\n        this._onWSMessage = (evt) => {\n            // Notify immediately if there is an error with the message.\n            let msg;\n            try {\n                msg = serialize.deserialize(evt.data);\n                validate.validateMessage(msg);\n            }\n            catch (error) {\n                error.message = `Kernel message validation error: ${error.message}`;\n                // We throw the error so that it bubbles up to the top, and displays the right stack.\n                throw error;\n            }\n            // Update the current kernel session id\n            this._kernelSession = msg.header.session;\n            // Handle the message asynchronously, in the order received.\n            this._msgChain = this._msgChain\n                .then(() => {\n                // Return so that any promises from handling a message are fulfilled\n                // before proceeding to the next message.\n                return this._handleMessage(msg);\n            })\n                .catch(error => {\n                // Log any errors in handling the message, thus resetting the _msgChain\n                // promise so we can process more messages.\n                // Ignore the \"Canceled\" errors that are thrown during kernel dispose.\n                if (error.message.startsWith('Canceled future for ')) {\n                    console.error(error);\n                }\n            });\n            // Emit the message receive signal\n            this._anyMessage.emit({ msg, direction: 'recv' });\n        };\n        /**\n         * Handle a websocket close event.\n         */\n        this._onWSClose = (evt) => {\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._id = '';\n        this._name = '';\n        this._status = 'unknown';\n        this._connectionStatus = 'connecting';\n        this._kernelSession = '';\n        this._isDisposed = false;\n        /**\n         * Websocket to communicate with kernel.\n         */\n        this._ws = null;\n        this._username = '';\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._reconnectTimeout = null;\n        this._futures = new Map();\n        this._comms = new Map();\n        this._targetRegistry = Object.create(null);\n        this._info = new coreutils_2.PromiseDelegate();\n        this._pendingMessages = [];\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._disposed = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._displayIdToParentIds = new Map();\n        this._msgIdToDisplayIds = new Map();\n        this._msgChain = Promise.resolve();\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._name = options.model.name;\n        this._id = options.model.id;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings();\n        this._clientId = (_b = options.clientId) !== null && _b !== void 0 ? _b : coreutils_2.UUID.uuid4();\n        this._username = (_c = options.username) !== null && _c !== void 0 ? _c : '';\n        this.handleComms = (_d = options.handleComms) !== null && _d !== void 0 ? _d : true;\n        this._createSocket();\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal emitted for iopub kernel messages.\n     *\n     * #### Notes\n     * This signal is emitted after the iopub message is handled asynchronously.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal emitted for unhandled kernel message.\n     *\n     * #### Notes\n     * This signal is emitted for a message that was not handled. It is emitted\n     * during the asynchronous message handling code.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * The kernel model\n     */\n    get model() {\n        return {\n            id: this.id,\n            name: this.name\n        };\n    }\n    /**\n     * A signal emitted for any kernel message.\n     *\n     * #### Notes\n     * This signal is emitted when a message is received, before it is handled\n     * asynchronously.\n     *\n     * This message is emitted when a message is queued for sending (either in\n     * the websocket buffer, or our own pending message buffer). The message may\n     * actually be sent across the wire at a later time.\n     *\n     * The message emitted in this signal should not be modified in any way.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * The id of the server-side kernel.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * The name of the server-side kernel.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The client username.\n     */\n    get username() {\n        return this._username;\n    }\n    /**\n     * The client unique id.\n     */\n    get clientId() {\n        return this._clientId;\n    }\n    /**\n     * The current status of the kernel.\n     */\n    get status() {\n        return this._status;\n    }\n    /**\n     * The current connection status of the kernel connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n    /**\n     * Test whether the kernel has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The cached kernel info.\n     *\n     * @returns A promise that resolves to the kernel info.\n     */\n    get info() {\n        return this._info.promise;\n    }\n    /**\n     * The kernel spec.\n     *\n     * @returns A promise that resolves to the kernel spec.\n     */\n    get spec() {\n        if (this._specPromise) {\n            return this._specPromise;\n        }\n        this._specPromise = kernelspec_1.KernelSpecAPI.getSpecs(this.serverSettings).then(specs => {\n            return specs.kernelspecs[this._name];\n        });\n        return this._specPromise;\n    }\n    /**\n     * Clone the current kernel with a new clientId.\n     */\n    clone(options = {}) {\n        return new KernelConnection(Object.assign({ model: this.model, username: this.username, serverSettings: this.serverSettings, \n            // handleComms defaults to false since that is safer\n            handleComms: false }, options));\n    }\n    /**\n     * Dispose of the resources held by the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearKernelState();\n        this._pendingMessages = [];\n        this._clearSocket();\n        // Clear Lumino signals\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a shell message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's shell channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * shell reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendShellMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelShellFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    /**\n     * Send a control message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's control channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * control reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendControlMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelControlFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    _sendKernelShellControl(ctor, msg, expectReply = false, disposeOnDone = true) {\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n        const future = new ctor(() => {\n            const msgId = msg.header.msg_id;\n            this._futures.delete(msgId);\n            // Remove stored display id information.\n            const displayIds = this._msgIdToDisplayIds.get(msgId);\n            if (!displayIds) {\n                return;\n            }\n            displayIds.forEach(displayId => {\n                const msgIds = this._displayIdToParentIds.get(displayId);\n                if (msgIds) {\n                    const idx = msgIds.indexOf(msgId);\n                    if (idx === -1) {\n                        return;\n                    }\n                    if (msgIds.length === 1) {\n                        this._displayIdToParentIds.delete(displayId);\n                    }\n                    else {\n                        msgIds.splice(idx, 1);\n                        this._displayIdToParentIds.set(displayId, msgIds);\n                    }\n                }\n            });\n            this._msgIdToDisplayIds.delete(msgId);\n        }, msg, expectReply, disposeOnDone, this);\n        this._futures.set(msg.header.msg_id, future);\n        return future;\n    }\n    /**\n     * Send a message on the websocket.\n     *\n     * If queue is true, queue the message for later sending if we cannot send\n     * now. Otherwise throw an error.\n     *\n     * #### Notes\n     * As an exception to the queueing, if we are sending a kernel_info_request\n     * message while we think the kernel is restarting, we send the message\n     * immediately without queueing. This is so that we can trigger a message\n     * back, which will then clear the kernel restarting state.\n     */\n    _sendMessage(msg, queue = true) {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        // If we have a kernel_info_request and we are starting or restarting, send the\n        // kernel_info_request immediately if we can, and if not throw an error so\n        // we can retry later. On restarting we do this because we must get at least one message\n        // from the kernel to reset the kernel session (thus clearing the restart\n        // status sentinel).\n        if ((this._kernelSession === STARTING_KERNEL_SESSION ||\n            this._kernelSession === RESTARTING_KERNEL_SESSION) &&\n            KernelMessage.isInfoRequestMsg(msg)) {\n            if (this.connectionStatus === 'connected') {\n                this._ws.send(serialize.serialize(msg));\n                return;\n            }\n            else {\n                throw new Error('Could not send message: status is not connected');\n            }\n        }\n        // If there are pending messages, add to the queue so we keep messages in order\n        if (queue && this._pendingMessages.length > 0) {\n            this._pendingMessages.push(msg);\n            return;\n        }\n        // Send if the ws allows it, otherwise queue the message.\n        if (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION) {\n            this._ws.send(serialize.serialize(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(msg);\n        }\n        else {\n            throw new Error('Could not send message');\n        }\n    }\n    /**\n     * Interrupt a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the kernel status is `Dead` or if the\n     * request fails or the response is invalid.\n     */\n    async interrupt() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        return restapi.interruptKernel(this.id, this.serverSettings);\n    }\n    /**\n     * Request a kernel restart.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels)\n     * and validates the response model.\n     *\n     * Any existing Future or Comm objects are cleared once the kernel has\n     * actually be restarted.\n     *\n     * The promise is fulfilled on a valid server response (after the kernel restarts)\n     * and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the request fails or the response is\n     * invalid.\n     */\n    async restart() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        this._updateStatus('restarting');\n        this._clearKernelState();\n        this._kernelSession = RESTARTING_KERNEL_SESSION;\n        await restapi.restartKernel(this.id, this.serverSettings);\n        // Reconnect to the kernel to address cases where kernel ports\n        // have changed during the restart.\n        await this.reconnect();\n    }\n    /**\n     * Reconnect to a kernel.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a kernel, and will sever any\n     * existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Kernel connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Shutdown a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * On a valid response, disposes this kernel connection.\n     *\n     * If the kernel is already `dead`, disposes this kernel connection without\n     * a server request.\n     */\n    async shutdown() {\n        if (this.status !== 'dead') {\n            await restapi.shutdownKernel(this.id, this.serverSettings);\n        }\n        this.handleShutdown();\n    }\n    /**\n     * Handles a kernel shutdown.\n     *\n     * #### Notes\n     * This method should be called if we know from outside information that a\n     * kernel is dead (for example, we cannot find the kernel model on the\n     * server).\n     */\n    handleShutdown() {\n        this._updateStatus('dead');\n        this.dispose();\n    }\n    /**\n     * Send a `kernel_info_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n     *\n     * Fulfills with the `kernel_info_response` content when the shell reply is\n     * received and validated.\n     */\n    async requestKernelInfo() {\n        const msg = KernelMessage.createMessage({\n            msgType: 'kernel_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: {}\n        });\n        let reply;\n        try {\n            reply = (await Private.handleShellMessage(this, msg));\n        }\n        catch (e) {\n            // If we rejected because the future was disposed, ignore and return.\n            if (this.isDisposed) {\n                return;\n            }\n            else {\n                throw e;\n            }\n        }\n        this._errorIfDisposed();\n        if (!reply) {\n            return;\n        }\n        // Kernels sometimes do not include a status field on kernel_info_reply\n        // messages, so set a default for now.\n        // See https://github.com/jupyterlab/jupyterlab/issues/6760\n        if (reply.content.status === undefined) {\n            reply.content.status = 'ok';\n        }\n        if (reply.content.status !== 'ok') {\n            this._info.reject('Kernel info reply errored');\n            return reply;\n        }\n        this._info.resolve(reply.content);\n        this._kernelSession = reply.header.session;\n        return reply;\n    }\n    /**\n     * Send a `complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n     *\n     * Fulfills with the `complete_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `inspect_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n     *\n     * Fulfills with the `inspect_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestInspect(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'inspect_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `history_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n     *\n     * Fulfills with the `history_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestHistory(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'history_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `execute_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n     *\n     * Future `onReply` is called with the `execute_reply` content when the\n     * shell reply is received and validated. The future will resolve when\n     * this message is received and the `idle` iopub status is received.\n     * The future will also be disposed at this point unless `disposeOnDone`\n     * is specified and `false`, in which case it is up to the caller to dispose\n     * of the future.\n     *\n     * **See also:** [[IExecuteReply]]\n     */\n    requestExecute(content, disposeOnDone = true, metadata) {\n        const defaults = {\n            silent: false,\n            store_history: true,\n            user_expressions: {},\n            allow_stdin: true,\n            stop_on_error: false\n        };\n        const msg = KernelMessage.createMessage({\n            msgType: 'execute_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: Object.assign(Object.assign({}, defaults), content),\n            metadata\n        });\n        return this.sendShellMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an experimental `debug_request` message.\n     *\n     * @hidden\n     *\n     * #### Notes\n     * Debug messages are experimental messages that are not in the official\n     * kernel message specification. As such, this function is *NOT* considered\n     * part of the public API, and may change without notice.\n     */\n    requestDebug(content, disposeOnDone = true) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'debug_request',\n            channel: 'control',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return this.sendControlMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an `is_complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n     *\n     * Fulfills with the `is_complete_response` content when the shell reply is\n     * received and validated.\n     */\n    requestIsComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'is_complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `comm_info_request` message.\n     *\n     * #### Notes\n     * Fulfills with the `comm_info_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestCommInfo(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n     */\n    sendInputReply(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'input_reply',\n            channel: 'stdin',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n    }\n    /**\n     * Create a new comm.\n     *\n     * #### Notes\n     * If a client-side comm already exists with the given commId, an error is thrown.\n     * If the kernel does not handle comms, an error is thrown.\n     */\n    createComm(targetName, commId = coreutils_2.UUID.uuid4()) {\n        if (!this.handleComms) {\n            throw new Error('Comms are disabled on this kernel connection');\n        }\n        if (this._comms.has(commId)) {\n            throw new Error('Comm is already created');\n        }\n        const comm = new comm_1.CommHandler(targetName, commId, this, () => {\n            this._unregisterComm(commId);\n        });\n        this._comms.set(commId, comm);\n        return comm;\n    }\n    /**\n     * Check if a comm exists.\n     */\n    hasComm(commId) {\n        return this._comms.has(commId);\n    }\n    /**\n     * Register a comm target handler.\n     *\n     * @param targetName - The name of the comm target.\n     *\n     * @param callback - The callback invoked for a comm open message.\n     *\n     * @returns A disposable used to unregister the comm target.\n     *\n     * #### Notes\n     * Only one comm target can be registered to a target name at a time, an\n     * existing callback for the same target name will be overridden.  A registered\n     * comm target handler will take precedence over a comm which specifies a\n     * `target_module`.\n     *\n     * If the callback returns a promise, kernel message processing will pause\n     * until the returned promise is fulfilled.\n     */\n    registerCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        this._targetRegistry[targetName] = callback;\n    }\n    /**\n     * Remove a comm target handler.\n     *\n     * @param targetName - The name of the comm target to remove.\n     *\n     * @param callback - The callback to remove.\n     *\n     * #### Notes\n     * The comm target is only removed if the callback argument matches.\n     */\n    removeCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        if (!this.isDisposed && this._targetRegistry[targetName] === callback) {\n            delete this._targetRegistry[targetName];\n        }\n    }\n    /**\n     * Register an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook will intercept.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages that are responses to a given message id.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     *\n     * See also [[IFuture.registerMessageHook]].\n     */\n    registerMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.registerMessageHook(hook);\n        }\n    }\n    /**\n     * Remove an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook intercepted.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     */\n    removeMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.removeMessageHook(hook);\n        }\n    }\n    /**\n     * Handle a message with a display id.\n     *\n     * @returns Whether the message was handled.\n     */\n    async _handleDisplayId(displayId, msg) {\n        var _a, _b;\n        const msgId = msg.parent_header.msg_id;\n        let parentIds = this._displayIdToParentIds.get(displayId);\n        if (parentIds) {\n            // We've seen it before, update existing outputs with same display_id\n            // by handling display_data as update_display_data.\n            const updateMsg = {\n                header: coreutils_2.JSONExt.deepCopy(msg.header),\n                parent_header: coreutils_2.JSONExt.deepCopy(msg.parent_header),\n                metadata: coreutils_2.JSONExt.deepCopy(msg.metadata),\n                content: coreutils_2.JSONExt.deepCopy(msg.content),\n                channel: msg.channel,\n                buffers: msg.buffers ? msg.buffers.slice() : []\n            };\n            updateMsg.header.msg_type = 'update_display_data';\n            await Promise.all(parentIds.map(async (parentId) => {\n                const future = this._futures && this._futures.get(parentId);\n                if (future) {\n                    await future.handleMsg(updateMsg);\n                }\n            }));\n        }\n        // We're done here if it's update_display.\n        if (msg.header.msg_type === 'update_display_data') {\n            // It's an update, don't proceed to the normal display.\n            return true;\n        }\n        // Regular display_data with id, record it for future updating\n        // in _displayIdToParentIds for future lookup.\n        parentIds = (_a = this._displayIdToParentIds.get(displayId)) !== null && _a !== void 0 ? _a : [];\n        if (parentIds.indexOf(msgId) === -1) {\n            parentIds.push(msgId);\n        }\n        this._displayIdToParentIds.set(displayId, parentIds);\n        // Add to our map of display ids for this message.\n        const displayIds = (_b = this._msgIdToDisplayIds.get(msgId)) !== null && _b !== void 0 ? _b : [];\n        if (displayIds.indexOf(msgId) === -1) {\n            displayIds.push(msgId);\n        }\n        this._msgIdToDisplayIds.set(msgId, displayIds);\n        // Let the message propagate to the intended recipient.\n        return false;\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Handle status iopub messages from the kernel.\n     */\n    _updateStatus(status) {\n        if (this._status === status || this._status === 'dead') {\n            return;\n        }\n        this._status = status;\n        Private.logKernelStatus(this);\n        this._statusChanged.emit(status);\n        if (status === 'dead') {\n            this.dispose();\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Clear the internal state.\n     */\n    _clearKernelState() {\n        this._kernelSession = '';\n        this._pendingMessages = [];\n        this._futures.forEach(future => {\n            future.dispose();\n        });\n        this._comms.forEach(comm => {\n            comm.dispose();\n        });\n        this._msgChain = Promise.resolve();\n        this._futures = new Map();\n        this._comms = new Map();\n        this._displayIdToParentIds.clear();\n        this._msgIdToDisplayIds.clear();\n    }\n    /**\n     * Check to make sure it is okay to proceed to handle a message.\n     *\n     * #### Notes\n     * Because we handle messages asynchronously, before a message is handled the\n     * kernel might be disposed or restarted (and have a different session id).\n     * This function throws an error in each of these cases. This is meant to be\n     * called at the start of an asynchronous message handler to cancel message\n     * processing if the message no longer is valid.\n     */\n    _assertCurrentMessage(msg) {\n        this._errorIfDisposed();\n        if (msg.header.session !== this._kernelSession) {\n            throw new Error(`Canceling handling of old message: ${msg.header.msg_type}`);\n        }\n    }\n    /**\n     * Handle a `comm_open` kernel message.\n     */\n    async _handleCommOpen(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = new comm_1.CommHandler(content.target_name, content.comm_id, this, () => {\n            this._unregisterComm(content.comm_id);\n        });\n        this._comms.set(content.comm_id, comm);\n        try {\n            const target = await Private.loadObject(content.target_name, content.target_module, this._targetRegistry);\n            await target(comm, msg);\n        }\n        catch (e) {\n            // Close the comm asynchronously. We cannot block message processing on\n            // kernel messages to wait for another kernel message.\n            comm.close();\n            console.error('Exception opening new comm');\n            throw e;\n        }\n    }\n    /**\n     * Handle 'comm_close' kernel message.\n     */\n    async _handleCommClose(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            console.error('Comm not found for comm id ' + content.comm_id);\n            return;\n        }\n        this._unregisterComm(comm.commId);\n        const onClose = comm.onClose;\n        if (onClose) {\n            // tslint:disable-next-line:await-promise\n            await onClose(msg);\n        }\n        comm.dispose();\n    }\n    /**\n     * Handle a 'comm_msg' kernel message.\n     */\n    async _handleCommMsg(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            return;\n        }\n        const onMsg = comm.onMsg;\n        if (onMsg) {\n            // tslint:disable-next-line:await-promise\n            await onMsg(msg);\n        }\n    }\n    /**\n     * Unregister a comm instance.\n     */\n    _unregisterComm(commId) {\n        this._comms.delete(commId);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', reset any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        if (this.status !== 'dead') {\n            if (connectionStatus === 'connected') {\n                let restarting = this._kernelSession === RESTARTING_KERNEL_SESSION;\n                // Send a kernel info request to make sure we send at least one\n                // message to get kernel status back. Always request kernel info\n                // first, to get kernel status back and ensure iopub is fully\n                // established. If we are restarting, this message will skip the queue\n                // and be sent immediately.\n                let p = this.requestKernelInfo();\n                // Send any pending messages after the kernelInfo resolves, or after a\n                // timeout as a failsafe.\n                let sendPendingCalled = false;\n                let sendPendingOnce = () => {\n                    if (sendPendingCalled) {\n                        return;\n                    }\n                    sendPendingCalled = true;\n                    if (restarting && this._kernelSession === RESTARTING_KERNEL_SESSION) {\n                        // We were restarting and a message didn't arrive to set the\n                        // session, but we just assume the restart succeeded and send any\n                        // pending messages.\n                        // FIXME: it would be better to retry the kernel_info_request here\n                        this._kernelSession = '';\n                    }\n                    clearTimeout(timeoutHandle);\n                    if (this._pendingMessages.length > 0) {\n                        this._sendPending();\n                    }\n                };\n                void p.then(sendPendingOnce);\n                // FIXME: if sent while zmq subscriptions are not established,\n                // kernelInfo may not resolve, so use a timeout to ensure we don't hang forever.\n                // It may be preferable to retry kernelInfo rather than give up after one timeout.\n                let timeoutHandle = setTimeout(sendPendingOnce, KERNEL_INFO_TIMEOUT);\n            }\n            else {\n                // If the connection is down, then we do not know what is happening\n                // with the kernel, so set the status to unknown.\n                this._updateStatus('unknown');\n            }\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    async _handleMessage(msg) {\n        var _a, _b;\n        let handled = false;\n        // Check to see if we have a display_id we need to reroute.\n        if (msg.parent_header &&\n            msg.channel === 'iopub' &&\n            (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isUpdateDisplayDataMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg))) {\n            // display_data messages may re-route based on their display_id.\n            const transient = ((_a = msg.content.transient) !== null && _a !== void 0 ? _a : {});\n            const displayId = transient['display_id'];\n            if (displayId) {\n                handled = await this._handleDisplayId(displayId, msg);\n                // The await above may make this message out of date, so check again.\n                this._assertCurrentMessage(msg);\n            }\n        }\n        if (!handled && msg.parent_header) {\n            const parentHeader = msg.parent_header;\n            const future = (_b = this._futures) === null || _b === void 0 ? void 0 : _b.get(parentHeader.msg_id);\n            if (future) {\n                await future.handleMsg(msg);\n                this._assertCurrentMessage(msg);\n            }\n            else {\n                // If the message was sent by us and was not iopub, it is orphaned.\n                const owned = parentHeader.session === this.clientId;\n                if (msg.channel !== 'iopub' && owned) {\n                    this._unhandledMessage.emit(msg);\n                }\n            }\n        }\n        if (msg.channel === 'iopub') {\n            switch (msg.header.msg_type) {\n                case 'status': {\n                    // Updating the status is synchronous, and we call no async user code\n                    const executionState = msg.content\n                        .execution_state;\n                    if (executionState === 'restarting') {\n                        // The kernel has been auto-restarted by the server. After\n                        // processing for this message is completely done, we want to\n                        // handle this restart, so we don't await, but instead schedule\n                        // the work as a microtask (i.e., in a promise resolution). We\n                        // schedule this here so that it comes before any microtasks that\n                        // might be scheduled in the status signal emission below.\n                        void Promise.resolve().then(async () => {\n                            this._updateStatus('autorestarting');\n                            this._clearKernelState();\n                            // We must reconnect since the kernel connection information may have\n                            // changed, and the server only refreshes its zmq connection when a new\n                            // websocket is opened.\n                            await this.reconnect();\n                        });\n                    }\n                    this._updateStatus(executionState);\n                    break;\n                }\n                case 'comm_open':\n                    if (this.handleComms) {\n                        await this._handleCommOpen(msg);\n                    }\n                    break;\n                case 'comm_msg':\n                    if (this.handleComms) {\n                        await this._handleCommMsg(msg);\n                    }\n                    break;\n                case 'comm_close':\n                    if (this.handleComms) {\n                        await this._handleCommClose(msg);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            // If the message was a status dead message, we might have disposed ourselves.\n            if (!this.isDisposed) {\n                this._assertCurrentMessage(msg);\n                // the message wouldn't be emitted if we were disposed anyway.\n                this._iopubMessage.emit(msg);\n            }\n        }\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attempts should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.warn(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Kernel connection is disposed');\n        }\n    }\n}\nexports.KernelConnection = KernelConnection;\n/**\n * A private namespace for the Kernel.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Log the current kernel status.\n     */\n    function logKernelStatus(kernel) {\n        switch (kernel.status) {\n            case 'idle':\n            case 'busy':\n            case 'unknown':\n                return;\n            default:\n                console.debug(`Kernel: ${kernel.status} (${kernel.id})`);\n                break;\n        }\n    }\n    Private.logKernelStatus = logKernelStatus;\n    /**\n     * Send a kernel message to the kernel and resolve the reply message.\n     */\n    async function handleShellMessage(kernel, msg) {\n        const future = kernel.sendShellMessage(msg, true);\n        return future.done;\n    }\n    Private.handleShellMessage = handleShellMessage;\n    /**\n     * Try to load an object from a module or a registry.\n     *\n     * Try to load an object from a module asynchronously if a module\n     * is specified, otherwise tries to load an object from the global\n     * registry, if the global registry is provided.\n     *\n     * #### Notes\n     * Loading a module uses requirejs.\n     */\n    function loadObject(name, moduleName, registry) {\n        return new Promise((resolve, reject) => {\n            // Try loading the module using require.js\n            if (moduleName) {\n                if (typeof requirejs === 'undefined') {\n                    throw new Error('requirejs not found');\n                }\n                requirejs([moduleName], (mod) => {\n                    if (mod[name] === void 0) {\n                        const msg = `Object '${name}' not found in module '${moduleName}'`;\n                        reject(new Error(msg));\n                    }\n                    else {\n                        resolve(mod[name]);\n                    }\n                }, reject);\n            }\n            else {\n                if (registry === null || registry === void 0 ? void 0 : registry[name]) {\n                    resolve(registry[name]);\n                }\n                else {\n                    reject(new Error(`Object '${name}' not found in registry`));\n                }\n            }\n        });\n    }\n    Private.loadObject = loadObject;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelShellFutureHandler = exports.KernelControlFutureHandler = exports.KernelFutureHandler = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Implementation of a kernel future.\n *\n * If a reply is expected, the Future is considered done when both a `reply`\n * message and an `idle` iopub status message have been received.  Otherwise, it\n * is considered done when the `idle` status is received.\n *\n */\nclass KernelFutureHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new KernelFutureHandler.\n     */\n    constructor(cb, msg, expectReply, disposeOnDone, kernel) {\n        super(cb);\n        this._status = 0;\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._done = new coreutils_1.PromiseDelegate();\n        this._hooks = new Private.HookList();\n        this._disposeOnDone = true;\n        this._msg = msg;\n        if (!expectReply) {\n            this._setFlag(Private.KernelFutureFlag.GotReply);\n        }\n        this._disposeOnDone = disposeOnDone;\n        this._kernel = kernel;\n    }\n    /**\n     * Get the original outgoing message.\n     */\n    get msg() {\n        return this._msg;\n    }\n    /**\n     * A promise that resolves when the future is done.\n     */\n    get done() {\n        return this._done.promise;\n    }\n    /**\n     * Get the reply handler.\n     */\n    get onReply() {\n        return this._reply;\n    }\n    /**\n     * Set the reply handler.\n     */\n    set onReply(cb) {\n        this._reply = cb;\n    }\n    /**\n     * Get the iopub handler.\n     */\n    get onIOPub() {\n        return this._iopub;\n    }\n    /**\n     * Set the iopub handler.\n     */\n    set onIOPub(cb) {\n        this._iopub = cb;\n    }\n    /**\n     * Get the stdin handler.\n     */\n    get onStdin() {\n        return this._stdin;\n    }\n    /**\n     * Set the stdin handler.\n     */\n    set onStdin(cb) {\n        this._stdin = cb;\n    }\n    /**\n     * Register hook for IOPub messages.\n     *\n     * @param hook - The callback invoked for an IOPub message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages handled by the future.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     */\n    registerMessageHook(hook) {\n        if (this.isDisposed) {\n            throw new Error('Kernel future is disposed');\n        }\n        this._hooks.add(hook);\n    }\n    /**\n     * Remove a hook for IOPub messages.\n     *\n     * @param hook - The hook to remove.\n     *\n     * #### Notes\n     * If a hook is removed during the hook processing, it will be deactivated immediately.\n     */\n    removeMessageHook(hook) {\n        if (this.isDisposed) {\n            return;\n        }\n        this._hooks.remove(hook);\n    }\n    /**\n     * Send an `input_reply` message.\n     */\n    sendInputReply(content) {\n        this._kernel.sendInputReply(content);\n    }\n    /**\n     * Dispose and unregister the future.\n     */\n    dispose() {\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._hooks = null;\n        if (!this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            // TODO: Uncomment the following logging code, and check for any tests that trigger it.\n            // let status = [];\n            // if (!this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            //   status.push('idle');\n            // }\n            // if (!this._testFlag(Private.KernelFutureFlag.GotReply)) {\n            //   status.push('reply');\n            // }\n            // console.warn(\n            //   `*************** DISPOSED BEFORE DONE: K${this._kernel.id.slice(\n            //     0,\n            //     6\n            //   )} M${this._msg.header.msg_id.slice(0, 6)} missing ${status.join(' ')}`\n            // );\n            // Reject the `done` promise, but catch its error here in case no one else\n            // is waiting for the promise to resolve. This prevents the error from\n            // being displayed in the console, but does not prevent it from being\n            // caught by a client who is waiting for it.\n            this._done.promise.catch(() => {\n                /* no-op */\n            });\n            this._done.reject(new Error(`Canceled future for ${this.msg.header.msg_type} message before replies were done`));\n        }\n        super.dispose();\n    }\n    /**\n     * Handle an incoming kernel message.\n     */\n    async handleMsg(msg) {\n        switch (msg.channel) {\n            case 'control':\n            case 'shell':\n                if (msg.channel === this.msg.channel &&\n                    msg.parent_header.msg_id === this.msg.header.msg_id) {\n                    await this._handleReply(msg);\n                }\n                break;\n            case 'stdin':\n                await this._handleStdin(msg);\n                break;\n            case 'iopub':\n                await this._handleIOPub(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    async _handleReply(msg) {\n        const reply = this._reply;\n        if (reply) {\n            // tslint:disable-next-line:await-promise\n            await reply(msg);\n        }\n        this._replyMsg = msg;\n        this._setFlag(Private.KernelFutureFlag.GotReply);\n        if (this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            this._handleDone();\n        }\n    }\n    async _handleStdin(msg) {\n        const stdin = this._stdin;\n        if (stdin) {\n            // tslint:disable-next-line:await-promise\n            await stdin(msg);\n        }\n    }\n    async _handleIOPub(msg) {\n        const process = await this._hooks.process(msg);\n        const iopub = this._iopub;\n        if (process && iopub) {\n            // tslint:disable-next-line:await-promise\n            await iopub(msg);\n        }\n        if (KernelMessage.isStatusMsg(msg) &&\n            msg.content.execution_state === 'idle') {\n            this._setFlag(Private.KernelFutureFlag.GotIdle);\n            if (this._testFlag(Private.KernelFutureFlag.GotReply)) {\n                this._handleDone();\n            }\n        }\n    }\n    _handleDone() {\n        if (this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            return;\n        }\n        this._setFlag(Private.KernelFutureFlag.IsDone);\n        this._done.resolve(this._replyMsg);\n        if (this._disposeOnDone) {\n            this.dispose();\n        }\n    }\n    /**\n     * Test whether the given future flag is set.\n     */\n    _testFlag(flag) {\n        // tslint:disable-next-line\n        return (this._status & flag) !== 0;\n    }\n    /**\n     * Set the given future flag.\n     */\n    _setFlag(flag) {\n        // tslint:disable-next-line\n        this._status |= flag;\n    }\n}\nexports.KernelFutureHandler = KernelFutureHandler;\nclass KernelControlFutureHandler extends KernelFutureHandler {\n}\nexports.KernelControlFutureHandler = KernelControlFutureHandler;\nclass KernelShellFutureHandler extends KernelFutureHandler {\n}\nexports.KernelShellFutureHandler = KernelShellFutureHandler;\nvar Private;\n(function (Private) {\n    /**\n     * A no-op function.\n     */\n    Private.noOp = () => {\n        /* no-op */\n    };\n    /**\n     * Defer a computation.\n     *\n     * #### NOTES\n     * We can't just use requestAnimationFrame since it is not available in node.\n     * This implementation is from Phosphor:\n     * https://github.com/phosphorjs/phosphor/blob/e88e4321289bb1198f3098e7bda40736501f2ed8/tests/test-messaging/src/index.spec.ts#L63\n     */\n    const defer = (() => {\n        const ok = typeof requestAnimationFrame === 'function';\n        return ok ? requestAnimationFrame : setImmediate;\n    })();\n    class HookList {\n        constructor() {\n            this._hooks = [];\n        }\n        /**\n         * Register a hook.\n         *\n         * @param hook - The callback to register.\n         */\n        add(hook) {\n            this.remove(hook);\n            this._hooks.push(hook);\n        }\n        /**\n         * Remove a hook, if it exists in the hook list.\n         *\n         * @param hook - The callback to remove.\n         */\n        remove(hook) {\n            const index = this._hooks.indexOf(hook);\n            if (index >= 0) {\n                this._hooks[index] = null;\n                this._scheduleCompact();\n            }\n        }\n        /**\n         * Process a message through the hooks.\n         *\n         * @returns a promise resolving to false if any hook resolved as false,\n         * otherwise true\n         *\n         * #### Notes\n         * The most recently registered hook is run first. A hook can return a\n         * boolean or a promise to a boolean, in which case processing pauses until\n         * the promise is fulfilled. If a hook return value resolves to false, any\n         * later hooks will not run and the function will return a promise resolving\n         * to false. If a hook throws an error, the error is logged to the console\n         * and the next hook is run. If a hook is registered during the hook\n         * processing, it will not run until the next message. If a hook is removed\n         * during the hook processing, it will be deactivated immediately.\n         */\n        async process(msg) {\n            // Wait until we can start a new process run.\n            await this._processing;\n            // Start the next process run.\n            const processing = new coreutils_1.PromiseDelegate();\n            this._processing = processing.promise;\n            let continueHandling;\n            // Call the end hook (most recently-added) first. Starting at the end also\n            // guarantees that hooks added during the processing will not be run in\n            // this process run.\n            for (let i = this._hooks.length - 1; i >= 0; i--) {\n                const hook = this._hooks[i];\n                // If the hook has been removed, continue to the next one.\n                if (hook === null) {\n                    continue;\n                }\n                // Execute the hook and log any errors.\n                try {\n                    // tslint:disable-next-line:await-promise\n                    continueHandling = await hook(msg);\n                }\n                catch (err) {\n                    continueHandling = true;\n                    console.error(err);\n                }\n                // If the hook resolved to false, stop processing and return.\n                if (continueHandling === false) {\n                    processing.resolve(undefined);\n                    return false;\n                }\n            }\n            // All hooks returned true (or errored out), so return true.\n            processing.resolve(undefined);\n            return true;\n        }\n        /**\n         * Schedule a cleanup of the list, removing any hooks that have been nulled out.\n         */\n        _scheduleCompact() {\n            if (!this._compactScheduled) {\n                this._compactScheduled = true;\n                // Schedule a compaction in between processing runs. We do the\n                // scheduling in an animation frame to rate-limit our compactions. If we\n                // need to compact more frequently, we can change this to directly\n                // schedule the compaction.\n                defer(() => {\n                    this._processing = this._processing.then(() => {\n                        this._compactScheduled = false;\n                        this._compact();\n                    });\n                });\n            }\n        }\n        /**\n         * Compact the list, removing any nulls.\n         */\n        _compact() {\n            let numNulls = 0;\n            for (let i = 0, len = this._hooks.length; i < len; i++) {\n                const hook = this._hooks[i];\n                if (this._hooks[i] === null) {\n                    numNulls++;\n                }\n                else {\n                    this._hooks[i - numNulls] = hook;\n                }\n            }\n            this._hooks.length -= numNulls;\n        }\n    }\n    Private.HookList = HookList;\n    /**\n     * Bit flags for the kernel future state.\n     */\n    let KernelFutureFlag;\n    (function (KernelFutureFlag) {\n        KernelFutureFlag[KernelFutureFlag[\"GotReply\"] = 1] = \"GotReply\";\n        KernelFutureFlag[KernelFutureFlag[\"GotIdle\"] = 2] = \"GotIdle\";\n        KernelFutureFlag[KernelFutureFlag[\"IsDone\"] = 4] = \"IsDone\";\n        KernelFutureFlag[KernelFutureFlag[\"DisposeOnDone\"] = 8] = \"DisposeOnDone\";\n    })(KernelFutureFlag = Private.KernelFutureFlag || (Private.KernelFutureFlag = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=future.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelAPI = exports.KernelMessage = exports.Kernel = void 0;\n// Namespace some of our modules for convenience and backwards compatibility.\nconst Kernel = __importStar(require(\"./kernel\"));\nexports.Kernel = Kernel;\nconst KernelMessage = __importStar(require(\"./messages\"));\nexports.KernelMessage = KernelMessage;\nconst KernelAPI = __importStar(require(\"./restapi\"));\nexports.KernelAPI = KernelAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernel.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * An implementation of a kernel manager.\n */\nclass KernelManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._kernelConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Start model and specs polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running kernels change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._kernelConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Connect to an existing kernel.\n     *\n     * @returns The new kernel connection.\n     *\n     * #### Notes\n     * This will use the manager's server settings and ignore any server\n     * settings passed in the options.\n     */\n    connectTo(options) {\n        var _a;\n        const { id } = options.model;\n        let handleComms = (_a = options.handleComms) !== null && _a !== void 0 ? _a : true;\n        // By default, handle comms only if no other kernel connection is.\n        if (options.handleComms === undefined) {\n            for (const kc of this._kernelConnections) {\n                if (kc.id === id && kc.handleComms) {\n                    handleComms = false;\n                    break;\n                }\n            }\n        }\n        const kernelConnection = new default_1.KernelConnection(Object.assign(Object.assign({ handleComms }, options), { serverSettings: this.serverSettings }));\n        this._onStarted(kernelConnection);\n        if (!this._models.has(id)) {\n            // We trust the user to connect to an existing kernel, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return kernelConnection;\n    }\n    /**\n     * Create an iterator over the most recent running kernels.\n     *\n     * @returns A new iterator over the running kernels.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running kernels.\n     *\n     * @returns A promise that resolves when the running list has been refreshed.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param createOptions - The kernel creation options\n     *\n     * @param connectOptions - The kernel connection options\n     *\n     * @returns A promise that resolves with the kernel connection.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be always be used.\n     */\n    async startNew(createOptions = {}, connectOptions = {}) {\n        const model = await restapi_1.startNew(createOptions, this.serverSettings);\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownKernel(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all kernels.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownKernel(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves with the kernel's model.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return existing.name === x.name;\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        // For any kernel connection to a kernel that doesn't exist, notify it of\n        // the shutdown.\n        this._kernelConnections.forEach(kc => {\n            if (!this._models.has(kc.id)) {\n                kc.handleShutdown();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a kernel starting.\n     */\n    _onStarted(kernelConnection) {\n        this._kernelConnections.add(kernelConnection);\n        kernelConnection.statusChanged.connect(this._onStatusChanged, this);\n        kernelConnection.disposed.connect(this._onDisposed, this);\n    }\n    _onDisposed(kernelConnection) {\n        this._kernelConnections.delete(kernelConnection);\n        // A dispose emission could mean the server session is deleted, or that\n        // the kernel JS object is disposed and the kernel still exists on the\n        // server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onStatusChanged(kernelConnection, status) {\n        if (status === 'dead') {\n            // We asynchronously update our list of kernels, which asynchronously\n            // will dispose them. We do not want to immediately dispose them because\n            // there may be other signal handlers that want to be called.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n    }\n}\nexports.KernelManager = KernelManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isInputReplyMsg = exports.isInputRequestMsg = exports.isDebugReplyMsg = exports.isDebugRequestMsg = exports.isExecuteReplyMsg = exports.isInfoRequestMsg = exports.isCommMsgMsg = exports.isCommCloseMsg = exports.isCommOpenMsg = exports.isDebugEventMsg = exports.isClearOutputMsg = exports.isStatusMsg = exports.isErrorMsg = exports.isExecuteResultMsg = exports.isExecuteInputMsg = exports.isUpdateDisplayDataMsg = exports.isDisplayDataMsg = exports.isStreamMsg = exports.createMessage = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nfunction createMessage(options) {\n    var _a, _b, _c, _d, _e;\n    return {\n        buffers: (_a = options.buffers) !== null && _a !== void 0 ? _a : [],\n        channel: options.channel,\n        content: options.content,\n        header: {\n            date: new Date().toISOString(),\n            msg_id: (_b = options.msgId) !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4(),\n            msg_type: options.msgType,\n            session: options.session,\n            username: (_c = options.username) !== null && _c !== void 0 ? _c : '',\n            version: '5.2'\n        },\n        metadata: (_d = options.metadata) !== null && _d !== void 0 ? _d : {},\n        parent_header: (_e = options.parentHeader) !== null && _e !== void 0 ? _e : {}\n    };\n}\nexports.createMessage = createMessage;\n/**\n * Test whether a kernel message is a `'stream'` message.\n */\nfunction isStreamMsg(msg) {\n    return msg.header.msg_type === 'stream';\n}\nexports.isStreamMsg = isStreamMsg;\n/**\n * Test whether a kernel message is an `'display_data'` message.\n */\nfunction isDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'display_data';\n}\nexports.isDisplayDataMsg = isDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'update_display_data'` message.\n */\nfunction isUpdateDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'update_display_data';\n}\nexports.isUpdateDisplayDataMsg = isUpdateDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'execute_input'` message.\n */\nfunction isExecuteInputMsg(msg) {\n    return msg.header.msg_type === 'execute_input';\n}\nexports.isExecuteInputMsg = isExecuteInputMsg;\n/**\n * Test whether a kernel message is an `'execute_result'` message.\n */\nfunction isExecuteResultMsg(msg) {\n    return msg.header.msg_type === 'execute_result';\n}\nexports.isExecuteResultMsg = isExecuteResultMsg;\n/**\n * Test whether a kernel message is an `'error'` message.\n */\nfunction isErrorMsg(msg) {\n    return msg.header.msg_type === 'error';\n}\nexports.isErrorMsg = isErrorMsg;\n/**\n * Test whether a kernel message is a `'status'` message.\n */\nfunction isStatusMsg(msg) {\n    return msg.header.msg_type === 'status';\n}\nexports.isStatusMsg = isStatusMsg;\n/**\n * Test whether a kernel message is a `'clear_output'` message.\n */\nfunction isClearOutputMsg(msg) {\n    return msg.header.msg_type === 'clear_output';\n}\nexports.isClearOutputMsg = isClearOutputMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_event'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugEventMsg(msg) {\n    return msg.header.msg_type === 'debug_event';\n}\nexports.isDebugEventMsg = isDebugEventMsg;\n/**\n * Test whether a kernel message is a `'comm_open'` message.\n */\nfunction isCommOpenMsg(msg) {\n    return msg.header.msg_type === 'comm_open';\n}\nexports.isCommOpenMsg = isCommOpenMsg;\n/**\n * Test whether a kernel message is a `'comm_close'` message.\n */\nfunction isCommCloseMsg(msg) {\n    return msg.header.msg_type === 'comm_close';\n}\nexports.isCommCloseMsg = isCommCloseMsg;\n/**\n * Test whether a kernel message is a `'comm_msg'` message.\n */\nfunction isCommMsgMsg(msg) {\n    return msg.header.msg_type === 'comm_msg';\n}\nexports.isCommMsgMsg = isCommMsgMsg;\n/**\n * Test whether a kernel message is a `'kernel_info_request'` message.\n */\nfunction isInfoRequestMsg(msg) {\n    return msg.header.msg_type === 'kernel_info_request';\n}\nexports.isInfoRequestMsg = isInfoRequestMsg;\n/**\n * Test whether a kernel message is an `'execute_reply'` message.\n */\nfunction isExecuteReplyMsg(msg) {\n    return msg.header.msg_type === 'execute_reply';\n}\nexports.isExecuteReplyMsg = isExecuteReplyMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_request'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugRequestMsg(msg) {\n    return msg.header.msg_type === 'debug_request';\n}\nexports.isDebugRequestMsg = isDebugRequestMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_reply'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugReplyMsg(msg) {\n    return msg.header.msg_type === 'debug_reply';\n}\nexports.isDebugReplyMsg = isDebugReplyMsg;\n/**\n * Test whether a kernel message is an `'input_request'` message.\n */\nfunction isInputRequestMsg(msg) {\n    return msg.header.msg_type === 'input_request';\n}\nexports.isInputRequestMsg = isInputRequestMsg;\n/**\n * Test whether a kernel message is an `'input_reply'` message.\n */\nfunction isInputReplyMsg(msg) {\n    return msg.header.msg_type === 'input_reply';\n}\nexports.isInputReplyMsg = isInputReplyMsg;\n//# sourceMappingURL=messages.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKernelModel = exports.shutdownKernel = exports.interruptKernel = exports.restartKernel = exports.startNew = exports.listRunning = exports.KERNEL_SERVICE_URL = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the kernel service.\n */\nexports.KERNEL_SERVICE_URL = 'api/kernels';\n/**\n * Fetch the running kernels.\n *\n * @param settings - The optional server settings.\n *\n * @returns A promise that resolves with the list of running kernels.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModels(data);\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Start a new kernel.\n *\n * @param options - The options used to create the kernel.\n *\n * @returns A promise that resolves with a kernel connection object.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function startNew(options = {}, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startNew = startNew;\n/**\n * Restart a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response (and thus after a restart) and rejected otherwise.\n */\nasync function restartKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'restart');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n}\nexports.restartKernel = restartKernel;\n/**\n * Interrupt a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function interruptKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'interrupt');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.interruptKernel = interruptKernel;\n/**\n * Shut down a kernel.\n *\n * @param id - The id of the running kernel.\n *\n * @param settings - The server settings for the request.\n *\n * @returns A promise that resolves when the kernel is shut down.\n *\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function shutdownKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const msg = `The kernel \"${id}\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownKernel = shutdownKernel;\n/**\n * Get a full kernel model from the server by kernel id string.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function getKernelModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status === 404) {\n        return undefined;\n    }\n    else if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getKernelModel = getKernelModel;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = exports.deserialize = void 0;\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nfunction deserialize(data) {\n    let value;\n    if (typeof data === 'string') {\n        value = JSON.parse(data);\n    }\n    else {\n        value = deserializeBinary(data);\n    }\n    return value;\n}\nexports.deserialize = deserialize;\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nfunction serialize(msg) {\n    var _a;\n    let value;\n    if ((_a = msg.buffers) === null || _a === void 0 ? void 0 : _a.length) {\n        value = serializeBinary(msg);\n    }\n    else {\n        value = JSON.stringify(msg);\n    }\n    return value;\n}\nexports.serialize = serialize;\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf) {\n    const data = new DataView(buf);\n    // read the header: 1 + nbufs 32b integers\n    const nbufs = data.getUint32(0);\n    const offsets = [];\n    if (nbufs < 2) {\n        throw new Error('Invalid incoming Kernel Message');\n    }\n    for (let i = 1; i <= nbufs; i++) {\n        offsets.push(data.getUint32(i * 4));\n    }\n    const jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n    const msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n    // the remaining chunks are stored as DataViews in msg.buffers\n    msg.buffers = [];\n    for (let i = 1; i < nbufs; i++) {\n        const start = offsets[i];\n        const stop = offsets[i + 1] || buf.byteLength;\n        msg.buffers.push(new DataView(buf.slice(start, stop)));\n    }\n    return msg;\n}\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg) {\n    const offsets = [];\n    const buffers = [];\n    const encoder = new TextEncoder();\n    let origBuffers = [];\n    if (msg.buffers !== undefined) {\n        origBuffers = msg.buffers;\n        delete msg['buffers'];\n    }\n    const jsonUtf8 = encoder.encode(JSON.stringify(msg));\n    buffers.push(jsonUtf8.buffer);\n    for (let i = 0; i < origBuffers.length; i++) {\n        // msg.buffers elements could be either views or ArrayBuffers\n        // buffers elements are ArrayBuffers\n        const b = origBuffers[i];\n        buffers.push(ArrayBuffer.isView(b) ? b.buffer : b);\n    }\n    const nbufs = buffers.length;\n    offsets.push(4 * (nbufs + 1));\n    for (let i = 0; i + 1 < buffers.length; i++) {\n        offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n    }\n    const msgBuf = new Uint8Array(offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength);\n    // use DataView.setUint32 for network byte-order\n    const view = new DataView(msgBuf.buffer);\n    // write nbufs to first 4 bytes\n    view.setUint32(0, nbufs);\n    // write offsets to next 4 * nbufs bytes\n    for (let i = 0; i < offsets.length; i++) {\n        view.setUint32(4 * (i + 1), offsets[i]);\n    }\n    // write all the buffers at their respective offsets\n    for (let i = 0; i < buffers.length; i++) {\n        msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n    }\n    return msgBuf.buffer;\n}\n//# sourceMappingURL=serialize.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateModels = exports.validateModel = exports.validateMessage = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Required fields for `IKernelHeader`.\n */\nconst HEADER_FIELDS = ['username', 'version', 'session', 'msg_id', 'msg_type'];\n/**\n * Required fields and types for contents of various types of `kernel.IMessage`\n * messages on the iopub channel.\n */\nconst IOPUB_CONTENT_FIELDS = {\n    stream: { name: 'string', text: 'string' },\n    display_data: { data: 'object', metadata: 'object' },\n    execute_input: { code: 'string', execution_count: 'number' },\n    execute_result: {\n        execution_count: 'number',\n        data: 'object',\n        metadata: 'object'\n    },\n    error: { ename: 'string', evalue: 'string', traceback: 'object' },\n    status: {\n        execution_state: [\n            'string',\n            ['starting', 'idle', 'busy', 'restarting', 'dead']\n        ]\n    },\n    clear_output: { wait: 'boolean' },\n    comm_open: { comm_id: 'string', target_name: 'string', data: 'object' },\n    comm_msg: { comm_id: 'string', data: 'object' },\n    comm_close: { comm_id: 'string' },\n    shutdown_reply: { restart: 'boolean' } // Emitted by the IPython kernel.\n};\n/**\n * Validate the header of a kernel message.\n */\nfunction validateHeader(header) {\n    for (let i = 0; i < HEADER_FIELDS.length; i++) {\n        validate_1.validateProperty(header, HEADER_FIELDS[i], 'string');\n    }\n}\n/**\n * Validate a kernel message object.\n */\nfunction validateMessage(msg) {\n    validate_1.validateProperty(msg, 'metadata', 'object');\n    validate_1.validateProperty(msg, 'content', 'object');\n    validate_1.validateProperty(msg, 'channel', 'string');\n    validateHeader(msg.header);\n    if (msg.channel === 'iopub') {\n        validateIOPubContent(msg);\n    }\n}\nexports.validateMessage = validateMessage;\n/**\n * Validate content an kernel message on the iopub channel.\n */\nfunction validateIOPubContent(msg) {\n    if (msg.channel === 'iopub') {\n        const fields = IOPUB_CONTENT_FIELDS[msg.header.msg_type];\n        // Check for unknown message type.\n        if (fields === undefined) {\n            return;\n        }\n        const names = Object.keys(fields);\n        const content = msg.content;\n        for (let i = 0; i < names.length; i++) {\n            let args = fields[names[i]];\n            if (!Array.isArray(args)) {\n                args = [args];\n            }\n            validate_1.validateProperty(content, names[i], ...args);\n        }\n    }\n}\n/**\n * Validate a `Kernel.IModel` object.\n */\nfunction validateModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'id', 'string');\n}\nexports.validateModel = validateModel;\n/**\n * Validate an array of `IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid kernel list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelSpecAPI = exports.KernelSpec = void 0;\nconst KernelSpec = __importStar(require(\"./kernelspec\"));\nexports.KernelSpec = KernelSpec;\nconst KernelSpecAPI = __importStar(require(\"./restapi\"));\nexports.KernelSpecAPI = KernelSpecAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernelspec.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelSpecManager = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst basemanager_1 = require(\"../basemanager\");\n/**\n * An implementation of a kernel spec manager.\n */\nclass KernelSpecManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel spec manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._specs = null;\n        this._specsChanged = new signaling_1.Signal(this);\n        // Initialize internal data.\n        this._ready = Promise.all([this.requestSpecs()])\n            .then(_ => undefined)\n            .catch(_ => undefined)\n            .then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isReady = true;\n        });\n        this._pollSpecs = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestSpecs(),\n            frequency: {\n                interval: 61 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelSpecManager#specs`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        void this.ready.then(() => {\n            void this._pollSpecs.start();\n        });\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * Get the most recently fetched kernel specs.\n     */\n    get specs() {\n        return this._specs;\n    }\n    /**\n     * A signal emitted when the specs change.\n     */\n    get specsChanged() {\n        return this._specsChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        this._pollSpecs.dispose();\n        super.dispose();\n    }\n    /**\n     * Force a refresh of the specs from the server.\n     *\n     * @returns A promise that resolves when the specs are fetched.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshSpecs() {\n        await this._pollSpecs.refresh();\n        await this._pollSpecs.tick;\n    }\n    /**\n     * Execute a request to the server to poll specs and update state.\n     */\n    async requestSpecs() {\n        const specs = await restapi.getSpecs(this.serverSettings);\n        if (this.isDisposed) {\n            return;\n        }\n        if (!coreutils_1.JSONExt.deepEqual(specs, this._specs)) {\n            this._specs = specs;\n            this._specsChanged.emit(specs);\n        }\n    }\n}\nexports.KernelSpecManager = KernelSpecManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSpecs = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst validate_1 = require(\"./validate\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\n/**\n * The url for the kernelspec service.\n */\nconst KERNELSPEC_SERVICE_URL = 'api/kernelspecs';\n/**\n * Fetch all of the kernel specs.\n *\n * @param settings - The optional server settings.\n * @param useCache - Whether to use the cache. If false, always request.\n *\n * @returns A promise that resolves with the kernel specs.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).\n */\nasync function getSpecs(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, KERNELSPEC_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    return validate_1.validateSpecModels(data);\n}\nexports.getSpecs = getSpecs;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSpecModels = exports.validateSpecModel = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Validate a server kernelspec model to a client side model.\n */\nfunction validateSpecModel(data) {\n    const spec = data.spec;\n    if (!spec) {\n        throw new Error('Invalid kernel spec');\n    }\n    validate_1.validateProperty(data, 'name', 'string');\n    validate_1.validateProperty(data, 'resources', 'object');\n    validate_1.validateProperty(spec, 'language', 'string');\n    validate_1.validateProperty(spec, 'display_name', 'string');\n    validate_1.validateProperty(spec, 'argv', 'array');\n    let metadata = null;\n    if (spec.hasOwnProperty('metadata')) {\n        validate_1.validateProperty(spec, 'metadata', 'object');\n        metadata = spec.metadata;\n    }\n    let env = null;\n    if (spec.hasOwnProperty('env')) {\n        validate_1.validateProperty(spec, 'env', 'object');\n        env = spec.env;\n    }\n    return {\n        name: data.name,\n        resources: data.resources,\n        language: spec.language,\n        display_name: spec.display_name,\n        argv: spec.argv,\n        metadata,\n        env\n    };\n}\nexports.validateSpecModel = validateSpecModel;\n/**\n * Validate a `Kernel.ISpecModels` object.\n */\nfunction validateSpecModels(data) {\n    if (!data.hasOwnProperty('kernelspecs')) {\n        throw new Error('No kernelspecs found');\n    }\n    let keys = Object.keys(data.kernelspecs);\n    const kernelspecs = Object.create(null);\n    let defaultSpec = data.default;\n    for (let i = 0; i < keys.length; i++) {\n        const ks = data.kernelspecs[keys[i]];\n        try {\n            kernelspecs[keys[i]] = validateSpecModel(ks);\n        }\n        catch (err) {\n            // Remove the errant kernel spec.\n            console.warn(`Removing errant kernel spec: ${keys[i]}`);\n        }\n    }\n    keys = Object.keys(kernelspecs);\n    if (!keys.length) {\n        throw new Error('No valid kernelspecs found');\n    }\n    if (!defaultSpec ||\n        typeof defaultSpec !== 'string' ||\n        !(defaultSpec in kernelspecs)) {\n        defaultSpec = keys[0];\n        console.warn(`Default kernel not found, using '${keys[0]}'`);\n    }\n    return {\n        default: defaultSpec,\n        kernelspecs\n    };\n}\nexports.validateSpecModels = validateSpecModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceManager = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst builder_1 = require(\"./builder\");\nconst nbconvert_1 = require(\"./nbconvert\");\nconst contents_1 = require(\"./contents\");\nconst kernelspec_1 = require(\"./kernelspec\");\nconst session_1 = require(\"./session\");\nconst setting_1 = require(\"./setting\");\nconst terminal_1 = require(\"./terminal\");\nconst serverconnection_1 = require(\"./serverconnection\");\nconst workspace_1 = require(\"./workspace\");\nconst kernel_1 = require(\"./kernel\");\n/**\n * A Jupyter services manager.\n */\nclass ServiceManager {\n    /**\n     * Construct a new services provider.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._isReady = false;\n        const defaultDrive = options.defaultDrive;\n        const serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n        const standby = (_b = options.standby) !== null && _b !== void 0 ? _b : 'when-hidden';\n        const normalized = { defaultDrive, serverSettings, standby };\n        const kernelManager = new kernel_1.KernelManager(normalized);\n        this.serverSettings = serverSettings;\n        this.contents = new contents_1.ContentsManager(normalized);\n        this.sessions = new session_1.SessionManager(Object.assign(Object.assign({}, normalized), { kernelManager: kernelManager }));\n        this.settings = new setting_1.SettingManager(normalized);\n        this.terminals = new terminal_1.TerminalManager(normalized);\n        this.builder = new builder_1.BuildManager(normalized);\n        this.workspaces = new workspace_1.WorkspaceManager(normalized);\n        this.nbconvert = new nbconvert_1.NbConvertManager(normalized);\n        this.kernelspecs = new kernelspec_1.KernelSpecManager(normalized);\n        // Relay connection failures from the service managers that poll\n        // the server for current information.\n        this.kernelspecs.connectionFailure.connect(this._onConnectionFailure, this);\n        this.sessions.connectionFailure.connect(this._onConnectionFailure, this);\n        this.terminals.connectionFailure.connect(this._onConnectionFailure, this);\n        const readyList = [this.sessions.ready, this.kernelspecs.ready];\n        if (this.terminals.isAvailable()) {\n            readyList.push(this.terminals.ready);\n        }\n        this._readyPromise = Promise.all(readyList).then(() => {\n            this._isReady = true;\n        });\n    }\n    /**\n     * A signal emitted when there is a connection failure with the kernel.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Test whether the service manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n        this.contents.dispose();\n        this.sessions.dispose();\n        this.terminals.dispose();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._readyPromise;\n    }\n    _onConnectionFailure(sender, err) {\n        this._connectionFailure.emit(err);\n    }\n}\nexports.ServiceManager = ServiceManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NbConvertManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab nbconvert service.\n */\nconst NBCONVERT_SETTINGS_URL = 'api/nbconvert';\n/**\n * The nbconvert API service manager.\n */\nclass NbConvertManager {\n    /**\n     * Create a new nbconvert manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    async getExportFormats() {\n        const base = this.serverSettings.baseUrl;\n        const url = coreutils_1.URLExt.join(base, NBCONVERT_SETTINGS_URL);\n        const { serverSettings } = this;\n        const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        const exportList = {};\n        const keys = Object.keys(data);\n        keys.forEach(function (key) {\n            const mimeType = data[key].output_mimetype;\n            exportList[key] = { output_mimetype: mimeType };\n        });\n        return exportList;\n    }\n}\nexports.NbConvertManager = NbConvertManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nlet FETCH;\nlet HEADERS;\nlet REQUEST;\nlet WEBSOCKET;\nif (typeof window === 'undefined') {\n    // Mangle the require statements so it does not get picked up in the\n    // browser assets.\n    /* tslint:disable */\n    const fetchMod = require('node-fetch');\n    FETCH = (_a = global.fetch) !== null && _a !== void 0 ? _a : fetchMod;\n    REQUEST = (_b = global.Request) !== null && _b !== void 0 ? _b : fetchMod.Request;\n    HEADERS = (_c = global.Headers) !== null && _c !== void 0 ? _c : fetchMod.Headers;\n    WEBSOCKET = require('ws');\n    /* tslint:enable */\n}\nelse {\n    FETCH = fetch;\n    REQUEST = Request;\n    HEADERS = Headers;\n    WEBSOCKET = WebSocket;\n}\n/**\n * The namespace for ServerConnection functions.\n *\n * #### Notes\n * This is only intended to manage communication with the Jupyter server.\n *\n * The default values can be used in a JupyterLab or Jupyter Notebook context.\n *\n * We use `token` authentication if available, falling back on an XSRF\n * cookie if one has been provided on the `document`.\n *\n * A content type of `'application/json'` is added when using authentication\n * and there is no body data to allow the server to prevent malicious forms.\n */\nvar ServerConnection;\n(function (ServerConnection) {\n    /**\n     * Create a settings object given a subset of options.\n     *\n     * @param options - An optional partial set of options.\n     *\n     * @returns The full settings object.\n     */\n    function makeSettings(options) {\n        return Private.makeSettings(options);\n    }\n    ServerConnection.makeSettings = makeSettings;\n    /**\n     * Make an request to the notebook server.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The initialization options for the request.\n     *\n     * @param settings - The server settings to apply to the request.\n     *\n     * @returns a Promise that resolves with the response.\n     *\n     * @throws If the url of the request is not a notebook server url.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings are\n     * merged with `settings.init`, with `init` taking precedence.\n     * The headers in the two objects are not merged.\n     * If there is no body data, we set the content type to `application/json`\n     * because it is required by the Notebook server.\n     */\n    function makeRequest(url, init, settings) {\n        return Private.handleRequest(url, init, settings);\n    }\n    ServerConnection.makeRequest = makeRequest;\n    /**\n     * A wrapped error for a fetch response.\n     */\n    class ResponseError extends Error {\n        /**\n         * Create a new response error.\n         */\n        constructor(response, message = `Invalid response: ${response.status} ${response.statusText}`, traceback = '') {\n            super(message);\n            this.response = response;\n            this.traceback = traceback;\n        }\n        /**\n         * Create a ResponseError from a response, handling the traceback and message\n         * as appropriate.\n         *\n         * @param response The response object.\n         *\n         * @returns A promise that resolves with a `ResponseError` object.\n         */\n        static async create(response) {\n            try {\n                const data = await response.json();\n                if (data['traceback']) {\n                    console.error(data['traceback']);\n                }\n                if (data['message']) {\n                    return new ResponseError(response, data['message']);\n                }\n                return new ResponseError(response);\n            }\n            catch (e) {\n                console.debug(e);\n                return new ResponseError(response);\n            }\n        }\n    }\n    ServerConnection.ResponseError = ResponseError;\n    /**\n     * A wrapped error for a network error.\n     */\n    class NetworkError extends TypeError {\n        /**\n         * Create a new network error.\n         */\n        constructor(original) {\n            super(original.message);\n            this.stack = original.stack;\n        }\n    }\n    ServerConnection.NetworkError = NetworkError;\n})(ServerConnection = exports.ServerConnection || (exports.ServerConnection = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle the server connection settings, returning a new value.\n     */\n    function makeSettings(options = {}) {\n        const pageBaseUrl = coreutils_1.PageConfig.getBaseUrl();\n        const pageWsUrl = coreutils_1.PageConfig.getWsUrl();\n        const baseUrl = coreutils_1.URLExt.normalize(options.baseUrl) || pageBaseUrl;\n        let wsUrl = options.wsUrl;\n        // Prefer the default wsUrl if we are using the default baseUrl.\n        if (!wsUrl && baseUrl === pageBaseUrl) {\n            wsUrl = pageWsUrl;\n        }\n        // Otherwise convert the baseUrl to a wsUrl if possible.\n        if (!wsUrl && baseUrl.indexOf('http') === 0) {\n            wsUrl = 'ws' + baseUrl.slice(4);\n        }\n        // Otherwise fall back on the default wsUrl.\n        wsUrl = wsUrl !== null && wsUrl !== void 0 ? wsUrl : pageWsUrl;\n        return Object.assign(Object.assign({ init: { cache: 'no-store', credentials: 'same-origin' }, fetch: FETCH, Headers: HEADERS, Request: REQUEST, WebSocket: WEBSOCKET, token: coreutils_1.PageConfig.getToken(), appUrl: coreutils_1.PageConfig.getOption('appUrl'), appendToken: typeof window === 'undefined' ||\n                process.env.JEST_WORKER_ID !== undefined ||\n                coreutils_1.URLExt.getHostName(pageBaseUrl) !== coreutils_1.URLExt.getHostName(wsUrl) }, options), { baseUrl,\n            wsUrl });\n    }\n    Private.makeSettings = makeSettings;\n    /**\n     * Handle a request.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The overrides for the request init.\n     *\n     * @param settings - The settings object for the request.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings\n     * take precedence over `settings.init`.\n     */\n    function handleRequest(url, init, settings) {\n        var _a;\n        // Handle notebook server requests.\n        if (url.indexOf(settings.baseUrl) !== 0) {\n            throw new Error('Can only be used for notebook server requests');\n        }\n        // Use explicit cache buster when `no-store` is set since\n        // not all browsers use it properly.\n        const cache = (_a = init.cache) !== null && _a !== void 0 ? _a : settings.init.cache;\n        if (cache === 'no-store') {\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n            url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n        }\n        const request = new settings.Request(url, Object.assign(Object.assign({}, settings.init), init));\n        // Handle authentication. Authentication can be overdetermined by\n        // settings token and XSRF token.\n        let authenticated = false;\n        if (settings.token) {\n            authenticated = true;\n            request.headers.append('Authorization', `token ${settings.token}`);\n        }\n        if (typeof document !== 'undefined' && (document === null || document === void 0 ? void 0 : document.cookie)) {\n            const xsrfToken = getCookie('_xsrf');\n            if (xsrfToken !== undefined) {\n                authenticated = true;\n                request.headers.append('X-XSRFToken', xsrfToken);\n            }\n        }\n        // Set the content type if there is no given data and we are\n        // using an authenticated connection.\n        if (!request.headers.has('Content-Type') && authenticated) {\n            request.headers.set('Content-Type', 'application/json');\n        }\n        // Use `call` to avoid a `TypeError` in the browser.\n        return settings.fetch.call(null, request).catch((e) => {\n            // Convert the TypeError into a more specific error.\n            throw new ServerConnection.NetworkError(e);\n        });\n        // TODO: *this* is probably where we need a system-wide connectionFailure\n        // signal we can hook into.\n    }\n    Private.handleRequest = handleRequest;\n    /**\n     * Get a cookie from the document.\n     */\n    function getCookie(name) {\n        // From http://www.tornadoweb.org/en/stable/guide/security.html\n        const matches = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n        return matches === null || matches === void 0 ? void 0 : matches[1];\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=serverconnection.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionConnection = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\nconst coreutils_1 = require(\"@lumino/coreutils\");\n/**\n * Session object for accessing the session REST api. The session\n * should be used to start kernels and then shut them down -- for\n * all other kernel operations, the kernel object should be used.\n */\nclass SessionConnection {\n    /**\n     * Construct a new session.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        this._id = '';\n        this._path = '';\n        this._name = '';\n        this._type = '';\n        this._kernel = null;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._kernelChanged = new signaling_1.Signal(this);\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._propertyChanged = new signaling_1.Signal(this);\n        this._id = options.model.id;\n        this._name = options.model.name;\n        this._path = options.model.path;\n        this._type = options.model.type;\n        this._username = (_a = options.username) !== null && _a !== void 0 ? _a : '';\n        this._clientId = (_b = options.clientId) !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4();\n        this._connectToKernel = options.connectToKernel;\n        this._kernelConnectionOptions = (_c = options.kernelConnectionOptions) !== null && _c !== void 0 ? _c : {};\n        this.serverSettings = (_d = options.serverSettings) !== null && _d !== void 0 ? _d : __1.ServerConnection.makeSettings();\n        this.setupKernel(options.model.kernel);\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel changes.\n     */\n    get kernelChanged() {\n        return this._kernelChanged;\n    }\n    /**\n     * A signal proxied from the connection about the kernel status.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about the connection status.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about iopub kernel messages.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal proxied from the kernel for an unhandled kernel message.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * A signal proxied from the kernel emitted for any kernel message.\n     *\n     * #### Notes\n     * The behavior is undefined if the message is modified during message\n     * handling. As such, it should be treated as read-only.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * A signal emitted when a session property changes.\n     */\n    get propertyChanged() {\n        return this._propertyChanged;\n    }\n    /**\n     * Get the session id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the session kernel connection object.\n     *\n     * #### Notes\n     * This is a read-only property, and can be altered by [changeKernel].\n     */\n    get kernel() {\n        return this._kernel;\n    }\n    /**\n     * Get the session path.\n     */\n    get path() {\n        return this._path;\n    }\n    /**\n     * Get the session type.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Get the session name.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model associated with the session.\n     */\n    get model() {\n        return {\n            id: this.id,\n            kernel: this.kernel && { id: this.kernel.id, name: this.kernel.name },\n            path: this._path,\n            type: this._type,\n            name: this._name\n        };\n    }\n    /**\n     * Test whether the session has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Update the session based on a session model from the server.\n     *\n     * #### Notes\n     * This only updates this session connection instance. Use `setPath`,\n     * `setName`, `setType`, and `changeKernel` to change the session values on\n     * the server.\n     */\n    update(model) {\n        const oldModel = this.model;\n        this._path = model.path;\n        this._name = model.name;\n        this._type = model.type;\n        if ((this._kernel === null && model.kernel !== null) ||\n            (this._kernel !== null && model.kernel === null) ||\n            (this._kernel !== null &&\n                model.kernel !== null &&\n                this._kernel.id !== model.kernel.id)) {\n            if (this._kernel !== null) {\n                this._kernel.dispose();\n            }\n            const oldValue = this._kernel || null;\n            this.setupKernel(model.kernel);\n            const newValue = this._kernel || null;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        this._handleModelChange(oldModel);\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        if (this._kernel) {\n            this._kernel.dispose();\n            const oldValue = this._kernel;\n            this._kernel = null;\n            const newValue = this._kernel;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Change the session path.\n     *\n     * @param path - The new session path.\n     *\n     * @returns A promise that resolves when the session has renamed.\n     *\n     * #### Notes\n     * This uses the Jupyter REST API, and the response is validated.\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async setPath(path) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ path });\n    }\n    /**\n     * Change the session name.\n     */\n    async setName(name) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ name });\n    }\n    /**\n     * Change the session type.\n     */\n    async setType(type) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ type });\n    }\n    /**\n     * Change the kernel.\n     *\n     * @params options - The name or id of the new kernel.\n     *\n     * #### Notes\n     * This shuts down the existing kernel and creates a new kernel,\n     * keeping the existing session ID and session path.\n     */\n    async changeKernel(options) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ kernel: options });\n        return this.kernel;\n    }\n    /**\n     * Kill the kernel and shutdown the session.\n     *\n     * @returns - The promise fulfilled on a valid response from the server.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n     * Disposes of the session and emits a [sessionDied] signal on success.\n     */\n    async shutdown() {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await restapi_1.shutdownSession(this.id, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Create a new kernel connection and connect to its signals.\n     *\n     * #### Notes\n     * This method is not meant to be subclassed.\n     */\n    setupKernel(model) {\n        if (model === null) {\n            this._kernel = null;\n            return;\n        }\n        const kc = this._connectToKernel(Object.assign(Object.assign({}, this._kernelConnectionOptions), { model, username: this._username, clientId: this._clientId, serverSettings: this.serverSettings }));\n        this._kernel = kc;\n        kc.statusChanged.connect(this.onKernelStatus, this);\n        kc.connectionStatusChanged.connect(this.onKernelConnectionStatus, this);\n        kc.unhandledMessage.connect(this.onUnhandledMessage, this);\n        kc.iopubMessage.connect(this.onIOPubMessage, this);\n        kc.anyMessage.connect(this.onAnyMessage, this);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelStatus(sender, state) {\n        this._statusChanged.emit(state);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelConnectionStatus(sender, state) {\n        this._connectionStatusChanged.emit(state);\n    }\n    /**\n     * Handle iopub kernel messages.\n     */\n    onIOPubMessage(sender, msg) {\n        this._iopubMessage.emit(msg);\n    }\n    /**\n     * Handle unhandled kernel messages.\n     */\n    onUnhandledMessage(sender, msg) {\n        this._unhandledMessage.emit(msg);\n    }\n    /**\n     * Handle any kernel messages.\n     */\n    onAnyMessage(sender, args) {\n        this._anyMessage.emit(args);\n    }\n    /**\n     * Send a PATCH to the server, updating the session path or the kernel.\n     */\n    async _patch(body) {\n        const model = await restapi_1.updateSession(Object.assign(Object.assign({}, body), { id: this._id }), this.serverSettings);\n        this.update(model);\n        return model;\n    }\n    /**\n     * Handle a change to the model.\n     */\n    _handleModelChange(oldModel) {\n        if (oldModel.name !== this._name) {\n            this._propertyChanged.emit('name');\n        }\n        if (oldModel.type !== this._type) {\n            this._propertyChanged.emit('type');\n        }\n        if (oldModel.path !== this._path) {\n            this._propertyChanged.emit('path');\n        }\n    }\n}\nexports.SessionConnection = SessionConnection;\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionAPI = exports.Session = void 0;\nconst Session = __importStar(require(\"./session\"));\nexports.Session = Session;\nconst SessionAPI = __importStar(require(\"./restapi\"));\nexports.SessionAPI = SessionAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"../serverconnection\");\nconst basemanager_1 = require(\"../basemanager\");\nconst default_1 = require(\"./default\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a session manager.\n */\nclass SessionManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new session manager.\n     *\n     * @param options - The default options for each session.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._sessionConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // We define these here so they bind `this` correctly\n        this._connectToKernel = (options) => {\n            return this._kernelManager.connectTo(options);\n        };\n        this._kernelManager = options.kernelManager;\n        // Start model polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:SessionManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            await this._kernelManager.ready;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running sessions change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._sessionConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /*\n     * Connect to a running session.  See also [[connectToSession]].\n     */\n    connectTo(options) {\n        const sessionConnection = new default_1.SessionConnection(Object.assign(Object.assign({}, options), { connectToKernel: this._connectToKernel, serverSettings: this.serverSettings }));\n        this._onStarted(sessionConnection);\n        if (!this._models.has(options.model.id)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return sessionConnection;\n    }\n    /**\n     * Create an iterator over the most recent running sessions.\n     *\n     * @returns A new iterator over the running sessions.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running sessions.\n     *\n     * @returns A promise that with the list of running sessions.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new session.  See also [[startNewSession]].\n     *\n     * @param createOptions - Options for creating the session\n     *\n     * @param connectOptions - Options for connecting to the session\n     */\n    async startNew(createOptions, connectOptions = {}) {\n        const model = await restapi_1.startSession(createOptions, this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a session by id.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownSession(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all sessions.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownSession(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a session associated with a path and stop it if it is the only session\n     * using that kernel.\n     *\n     * @param path - The path in question.\n     *\n     * @returns A promise that resolves when the relevant sessions are stopped.\n     */\n    async stopIfNeeded(path) {\n        try {\n            const sessions = await restapi_1.listRunning(this.serverSettings);\n            const matches = sessions.filter(value => value.path === path);\n            if (matches.length === 1) {\n                const id = matches[0].id;\n                await this.shutdown(id);\n            }\n        }\n        catch (error) {\n            /* Always succeed. */\n        }\n    }\n    /**\n     * Find a session by id.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Find a session by path.\n     */\n    async findByPath(path) {\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        await this.refreshRunning();\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof serverconnection_1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                var _a, _b, _c, _d;\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return (((_a = existing.kernel) === null || _a === void 0 ? void 0 : _a.id) === ((_b = x.kernel) === null || _b === void 0 ? void 0 : _b.id) &&\n                    ((_c = existing.kernel) === null || _c === void 0 ? void 0 : _c.name) === ((_d = x.kernel) === null || _d === void 0 ? void 0 : _d.name) &&\n                    existing.name === x.name &&\n                    existing.path === x.path &&\n                    existing.type === x.type);\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        this._sessionConnections.forEach(sc => {\n            if (this._models.has(sc.id)) {\n                sc.update(this._models.get(sc.id));\n            }\n            else {\n                sc.dispose();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(sessionConnection) {\n        this._sessionConnections.add(sessionConnection);\n        sessionConnection.disposed.connect(this._onDisposed, this);\n        sessionConnection.propertyChanged.connect(this._onChanged, this);\n        sessionConnection.kernelChanged.connect(this._onChanged, this);\n    }\n    _onDisposed(sessionConnection) {\n        this._sessionConnections.delete(sessionConnection);\n        // A session termination emission could mean the server session is deleted,\n        // or that the session JS object is disposed and the session still exists on\n        // the server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onChanged() {\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n}\nexports.SessionManager = SessionManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSession = exports.startSession = exports.getSessionModel = exports.shutdownSession = exports.getSessionUrl = exports.listRunning = exports.SESSION_SERVICE_URL = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the session service.\n */\nexports.SESSION_SERVICE_URL = 'api/sessions';\n/**\n * List the running sessions.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid Session list');\n    }\n    data.forEach(m => {\n        validate_1.updateLegacySessionModel(m);\n        validate_1.validateModel(m);\n    });\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Get a session url.\n */\nfunction getSessionUrl(baseUrl, id) {\n    return coreutils_1.URLExt.join(baseUrl, exports.SESSION_SERVICE_URL, id);\n}\nexports.getSessionUrl = getSessionUrl;\n/**\n * Shut down a session by id.\n */\nasync function shutdownSession(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    const url = getSessionUrl(settings.baseUrl, id);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message) !== null && _a !== void 0 ? _a : `The session \"${id}\"\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status === 410) {\n        throw new serverconnection_1.ServerConnection.ResponseError(response, 'The kernel was deleted but the session was not');\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownSession = shutdownSession;\n/**\n * Get a full session model from the server by session id string.\n */\nasync function getSessionModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, id);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getSessionModel = getSessionModel;\n/**\n * Create a new session, or return an existing session if the session path\n * already exists.\n */\nasync function startSession(options, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startSession = startSession;\n/**\n * Send a PATCH to the server, updating the session path or the kernel.\n */\nasync function updateSession(model, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, model.id);\n    const init = {\n        method: 'PATCH',\n        body: JSON.stringify(model)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.updateSession = updateSession;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=session.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateModels = exports.updateLegacySessionModel = exports.validateModel = void 0;\nconst validate_1 = require(\"../kernel/validate\");\nconst validate_2 = require(\"../validate\");\n/**\n * Validate an `Session.IModel` object.\n */\nfunction validateModel(data) {\n    validate_2.validateProperty(data, 'id', 'string');\n    validate_2.validateProperty(data, 'type', 'string');\n    validate_2.validateProperty(data, 'name', 'string');\n    validate_2.validateProperty(data, 'path', 'string');\n    validate_2.validateProperty(data, 'kernel', 'object');\n    validate_1.validateModel(data.kernel);\n}\nexports.validateModel = validateModel;\n/**\n * Update model from legacy session data.\n */\nfunction updateLegacySessionModel(data) {\n    if (data.path === undefined && data.notebook !== undefined) {\n        data.path = data.notebook.path;\n        data.type = 'notebook';\n        data.name = '';\n    }\n}\nexports.updateLegacySessionModel = updateLegacySessionModel;\n/**\n * Validate an array of `Session.IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid session list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SettingManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab settings service.\n */\nconst SERVICE_SETTINGS_URL = 'api/settings';\n/**\n * The settings API service manager.\n */\nclass SettingManager extends statedb_1.DataConnector {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Fetch a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        if (!id) {\n            throw new Error('Plugin `id` parameter is required for settings fetch.');\n        }\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        // Assert what type the server response is returning.\n        return response.json();\n    }\n    /**\n     * Fetch the list of all plugin setting bundles.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        var _a, _b;\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            throw new ResponseError(response);\n        }\n        const json = await response.json();\n        const values = (_b = (_a = json === null || json === void 0 ? void 0 : json['settings']) === null || _a === void 0 ? void 0 : _a.map((plugin) => {\n            plugin.data = { composite: {}, user: {} };\n            return plugin;\n        })) !== null && _b !== void 0 ? _b : [];\n        const ids = values.map(plugin => plugin.id);\n        return { ids, values };\n    }\n    /**\n     * Save a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @param raw - The user setting values as a raw string of JSON with comments.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, raw) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        // NOTE: 'raw' is JSON5 (not valid JSON), so we encode it as a string in a valid JSON body\n        const init = { body: JSON.stringify({ raw }), method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            throw new ResponseError(response);\n        }\n    }\n}\nexports.SettingManager = SettingManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a plugin's settings.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_SETTINGS_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = WebSocket;\n//# sourceMappingURL=ws.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a terminal interface.\n */\nclass TerminalConnection {\n    /**\n     * Construct a new terminal session.\n     */\n    constructor(options) {\n        var _a;\n        /**\n         * Create the terminal websocket connection and add socket status handlers.\n         *\n         * #### Notes\n         * You are responsible for updating the connection status as appropriate.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const name = this._name;\n            const settings = this.serverSettings;\n            let url = coreutils_1.URLExt.join(settings.wsUrl, 'terminals', 'websocket', encodeURIComponent(name));\n            // If token authentication is in use.\n            const token = settings.token;\n            if (settings.appendToken && token !== '') {\n                url = url + `?token=${encodeURIComponent(token)}`;\n            }\n            this._ws = new settings.WebSocket(url);\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Websocket messages events are defined as variables to bind `this`\n        this._onWSMessage = (event) => {\n            if (this._isDisposed) {\n                return;\n            }\n            const data = JSON.parse(event.data);\n            // Handle a disconnect message.\n            if (data[0] === 'disconnect') {\n                this.dispose();\n            }\n            if (this._connectionStatus === 'connecting') {\n                // After reconnection, ignore all messages until a 'setup' message\n                // before we are truly connected. Setting the connection status to\n                // connected only then means that if we do not get a setup message\n                // before our retry timeout, we will delete the websocket and try again.\n                if (data[0] === 'setup') {\n                    this._updateConnectionStatus('connected');\n                }\n                return;\n            }\n            this._messageReceived.emit({\n                type: data[0],\n                content: data.slice(1)\n            });\n        };\n        this._onWSClose = (event) => {\n            console.warn(`Terminal websocket closed: ${event.code}`);\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._connectionStatus = 'connecting';\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._messageReceived = new signaling_1.Signal(this);\n        this._reconnectTimeout = null;\n        this._ws = null;\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._pendingMessages = [];\n        this._name = options.model.name;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings();\n        this._createSocket();\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when a message is received from the server.\n     */\n    get messageReceived() {\n        return this._messageReceived;\n    }\n    /**\n     * Get the name of the terminal session.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model for the terminal session.\n     */\n    get model() {\n        return { name: this._name };\n    }\n    /**\n     * Test whether the session is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearSocket();\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a message to the terminal session.\n     *\n     * #### Notes\n     * If the connection is down, the message will be queued for sending when\n     * the connection comes back up.\n     */\n    send(message) {\n        this._sendMessage(message);\n    }\n    /**\n     * Send a message on the websocket, or possibly queue for later sending.\n     *\n     * @param queue - whether to queue the message if it cannot be sent\n     */\n    _sendMessage(message, queue = true) {\n        if (this._isDisposed || !message.content) {\n            return;\n        }\n        if (this.connectionStatus === 'connected' && this._ws) {\n            const msg = [message.type, ...message.content];\n            this._ws.send(JSON.stringify(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(message);\n        }\n        else {\n            throw new Error(`Could not send message: ${JSON.stringify(message)}`);\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Reconnect to a terminal.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a terminal, and will sever\n     * any existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Terminal connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attempts should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.error(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Shut down the terminal session.\n     */\n    async shutdown() {\n        await restapi_1.shutdownTerminal(this.name, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Clone the current terminal connection.\n     */\n    clone() {\n        return new TerminalConnection(this);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', stop any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        // Send the pending messages if we just connected.\n        if (connectionStatus === 'connected') {\n            this._sendPending();\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Terminal connection is disposed');\n        }\n    }\n    /**\n     * A signal emitted when the terminal connection status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * The current connection status of the terminal connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n}\nexports.TerminalConnection = TerminalConnection;\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a terminal.\n     */\n    function getTermUrl(baseUrl, name) {\n        return coreutils_1.URLExt.join(baseUrl, restapi_1.TERMINAL_SERVICE_URL, encodeURIComponent(name));\n    }\n    Private.getTermUrl = getTermUrl;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalAPI = exports.Terminal = void 0;\nconst Terminal = __importStar(require(\"./terminal\"));\nexports.Terminal = Terminal;\nconst TerminalAPI = __importStar(require(\"./restapi\"));\nexports.TerminalAPI = TerminalAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * A terminal session manager.\n */\nclass TerminalManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new terminal manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        // As an optimization, we unwrap the models to just store the names.\n        this._names = [];\n        this._terminalConnections = new Set();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Check if terminals are available\n        if (!this.isAvailable()) {\n            this._ready = Promise.reject('Terminals unavailable');\n            this._ready.catch(_ => undefined);\n            return;\n        }\n        // Start polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:TerminalManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running terminals change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._names.length = 0;\n        this._terminalConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Whether the terminal service is available.\n     */\n    isAvailable() {\n        return restapi_1.isAvailable();\n    }\n    /*\n     * Connect to a running terminal.\n     *\n     * @param name - The name of the target terminal.\n     *\n     * @param options - The options used to connect to the terminal.\n     *\n     * @returns A promise that resolves to the new terminal connection instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used.\n     */\n    connectTo(options) {\n        const terminalConnection = new default_1.TerminalConnection(Object.assign(Object.assign({}, options), { serverSettings: this.serverSettings }));\n        this._onStarted(terminalConnection);\n        if (!this._names.includes(options.model.name)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return terminalConnection;\n    }\n    /**\n     * Create an iterator over the most recent running terminals.\n     *\n     * @returns A new iterator over the running terminals.\n     */\n    running() {\n        return algorithm_1.iter(this._models);\n    }\n    /**\n     * Force a refresh of the running terminals.\n     *\n     * @returns A promise that with the list of running terminals.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Create a new terminal session.\n     *\n     * @returns A promise that resolves with the terminal instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used unless overridden in the\n     * options.\n     */\n    async startNew() {\n        const model = await restapi_1.startNew(this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo({ model });\n    }\n    /**\n     * Shut down a terminal session by name.\n     */\n    async shutdown(name) {\n        await restapi_1.shutdownTerminal(name, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all terminal sessions.\n     *\n     * @returns A promise that resolves when all of the sessions are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all(this._names.map(name => restapi_1.shutdownTerminal(name, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Execute a request to the server to poll running terminals and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        const names = models.map(({ name }) => name).sort();\n        if (names === this._names) {\n            // Identical models list, so just return\n            return;\n        }\n        this._names = names;\n        this._terminalConnections.forEach(tc => {\n            if (!names.includes(tc.name)) {\n                tc.dispose();\n            }\n        });\n        this._runningChanged.emit(this._models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(terminalConnection) {\n        this._terminalConnections.add(terminalConnection);\n        terminalConnection.disposed.connect(this._onDisposed, this);\n    }\n    /**\n     * Handle a session terminating.\n     */\n    _onDisposed(terminalConnection) {\n        this._terminalConnections.delete(terminalConnection);\n        // Update the running models to make sure we reflect the server state\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    get _models() {\n        return this._names.map(name => {\n            return { name };\n        });\n    }\n}\nexports.TerminalManager = TerminalManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shutdownTerminal = exports.listRunning = exports.startNew = exports.isAvailable = exports.TERMINAL_SERVICE_URL = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the terminal service.\n */\nexports.TERMINAL_SERVICE_URL = 'api/terminals';\n/**\n * Whether the terminal service is available.\n */\nfunction isAvailable() {\n    const available = String(coreutils_1.PageConfig.getOption('terminalsAvailable'));\n    return available.toLowerCase() === 'true';\n}\nexports.isAvailable = isAvailable;\n/**\n * Start a new terminal session.\n *\n * @param options - The session options to use.\n *\n * @returns A promise that resolves with the session instance.\n */\nasync function startNew(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    // TODO: Validate model\n    return data;\n}\nexports.startNew = startNew;\n/**\n * List the running terminal sessions.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves with the list of running session models.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid terminal list');\n    }\n    // TODO: validate each model\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Shut down a terminal session by name.\n *\n * @param name - The name of the target session.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves when the session is shut down.\n */\nasync function shutdownTerminal(name, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL, name);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message) !== null && _a !== void 0 ? _a : `The terminal session \"${name}\"\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownTerminal = shutdownTerminal;\nvar Private;\n(function (Private) {\n    /**\n     * Throw an error if terminals are not available.\n     */\n    function errorIfNotAvailable() {\n        if (!isAvailable()) {\n            throw new Error('Terminals Unavailable');\n        }\n    }\n    Private.errorIfNotAvailable = errorIfNotAvailable;\n})(Private || (Private = {}));\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAvailable = void 0;\nconst restapi_1 = require(\"./restapi\");\nObject.defineProperty(exports, \"isAvailable\", { enumerable: true, get: function () { return restapi_1.isAvailable; } });\n//# sourceMappingURL=terminal.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateProperty = void 0;\n/**\n * Validate a property as being on an object, and optionally\n * of a given type and among a given set of values.\n */\nfunction validateProperty(object, name, typeName, values = []) {\n    if (!object.hasOwnProperty(name)) {\n        throw Error(`Missing property '${name}'`);\n    }\n    const value = object[name];\n    if (typeName !== void 0) {\n        let valid = true;\n        switch (typeName) {\n            case 'array':\n                valid = Array.isArray(value);\n                break;\n            case 'object':\n                valid = typeof value !== 'undefined';\n                break;\n            default:\n                valid = typeof value === typeName;\n        }\n        if (!valid) {\n            throw new Error(`Property '${name}' is not of type '${typeName}'`);\n        }\n        if (values.length > 0) {\n            let valid = true;\n            switch (typeName) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                    valid = values.includes(value);\n                    break;\n                default:\n                    valid = values.findIndex(v => v === value) >= 0;\n                    break;\n            }\n            if (!valid) {\n                throw new Error(`Property '${name}' is not one of the valid values ${JSON.stringify(values)}`);\n            }\n        }\n    }\n}\nexports.validateProperty = validateProperty;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab workspaces service.\n */\nconst SERVICE_WORKSPACES_URL = 'api/workspaces';\n/**\n * The workspaces API service manager.\n */\nclass WorkspaceManager extends statedb_1.DataConnector {\n    /**\n     * Create a new workspace manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Fetch a workspace.\n     *\n     * @param id - The workspace's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        return response.json();\n    }\n    /**\n     * Fetch the list of workspace IDs that exist on the server.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        const result = await response.json();\n        return result.workspaces;\n    }\n    /**\n     * Remove a workspace from the server.\n     *\n     * @param id - The workspaces's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async remove(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { method: 'DELETE' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Save a workspace.\n     *\n     * @param id - The workspace's ID.\n     *\n     * @param workspace - The workspace being saved.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, workspace) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { body: JSON.stringify(workspace), method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n}\nexports.WorkspaceManager = WorkspaceManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a workspace.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","exports","value","BaseManager","signaling_1","serverconnection_1","constructor","options","_a","this","_isDisposed","_disposed","Signal","serverSettings","ServerConnection","makeSettings","dispose","isDisposed","emit","undefined","clearData","BuildManager","coreutils_1","_url","baseUrl","appUrl","URLExt","join","PageConfig","getOption","toLowerCase","getStatus","makeRequest","then","response","status","ResponseError","json","data","Error","message","build","method","cancel","ConfigWithDefaults","ConfigSection","__1","create","section","DefaultConfigSection","load","settings","encodeURIComponent","name","_data","newdata","assign","init","body","JSON","stringify","_b","_className","_section","_defaults","defaults","className","get","key","_classData","set","d","d2","update","__createBinding","o","m","k","k2","enumerable","__setModuleDefault","v","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","Drive","ContentsManager","Contents","algorithm_1","validate","Private","validateContentsModel","contents","validateCheckpointModel","checkpoint","_additionalDrives","Map","_fileChanged","_defaultDrive","defaultDrive","fileChanged","connect","_onFileChanged","addDrive","drive","getModelDBFactory","path","_driveForPath","modelDBFactory","localPath","parts","split","firstParts","length","has","PathExt","slice","removeSlash","normalize","resolvePath","root","driveName","resolved","resolve","contentsModel","listing","type","content","each","item","push","_toGlobalPath","getDownloadUrl","newUntitled","globalPath","delete","rename","newPath","drive1","path1","drive2","path2","save","copy","fromFile","toDir","createCheckpoint","listCheckpoints","restoreCheckpoint","checkpointID","deleteCheckpoint","sender","args","newValue","oldValue","_c","_apiEndpoint","apiEndpoint","url","_getUrl","params","objectToQueryString","encodeParts","xsrfTokenMatch","document","cookie","match","fullUrl","URL","searchParams","append","toString","Promise","ext","normalizeExtension","oldLocalPath","newLocalPath","copy_from","Array","isArray","i","map","extension","indexOf","validate_1","model","validateProperty","__exportStar","p","CommHandler","disposable_1","KernelMessage","DisposableDelegate","target","id","kernel","disposeCb","super","_target","_id","_kernel","_onClose","cb","_onMsg","open","metadata","buffers","msg","createMessage","msgType","channel","username","session","clientId","comm_id","target_name","sendShellMessage","send","disposeOnDone","close","future","onClose","KernelConnection","coreutils_2","comm_1","future_1","serialize","kernelspec_1","restapi","RESTARTING_KERNEL_SESSION","_d","_createSocket","_errorIfDisposed","_clearSocket","_updateConnectionStatus","partialUrl","wsUrl","KERNEL_SERVICE_URL","display","replace","console","debug","_clientId","token","appendToken","_ws","WebSocket","binaryType","onmessage","_onWSMessage","onopen","_onWSOpen","onclose","_onWSClose","onerror","evt","deserialize","validateMessage","error","_kernelSession","header","_msgChain","_handleMessage","catch","startsWith","_anyMessage","direction","_reconnect","_name","_status","_connectionStatus","_username","_reconnectLimit","_reconnectAttempt","_reconnectTimeout","_futures","_comms","_targetRegistry","_info","PromiseDelegate","_pendingMessages","_statusChanged","_connectionStatusChanged","_iopubMessage","_unhandledMessage","_displayIdToParentIds","_msgIdToDisplayIds","_noOp","UUID","uuid4","handleComms","promise","_specPromise","KernelSpecAPI","getSpecs","specs","kernelspecs","clone","_clearKernelState","expectReply","_sendKernelShellControl","KernelShellFutureHandler","sendControlMessage","KernelControlFutureHandler","ctor","_sendMessage","msgId","msg_id","displayIds","forEach","displayId","msgIds","idx","splice","queue","isInfoRequestMsg","connectionStatus","interruptKernel","_updateStatus","restartKernel","reconnect","fulfill","connectionStatusChanged","disconnect","reject","shutdownKernel","handleShutdown","reply","handleShellMessage","e","requestComplete","requestInspect","requestHistory","requestExecute","silent","store_history","user_expressions","allow_stdin","stop_on_error","requestDebug","requestIsComplete","requestCommInfo","sendInputReply","createComm","targetName","commId","comm","_unregisterComm","hasComm","registerCommTarget","callback","removeCommTarget","registerMessageHook","hook","removeMessageHook","parent_header","parentIds","updateMsg","JSONExt","deepCopy","msg_type","all","async","parentId","handleMsg","logKernelStatus","_sendPending","shift","clear","_assertCurrentMessage","loadObject","target_module","onMsg","clearTimeout","restarting","requestKernelInfo","sendPendingCalled","sendPendingOnce","timeoutHandle","setTimeout","handled","isDisplayDataMsg","isUpdateDisplayDataMsg","isExecuteResultMsg","transient","_handleDisplayId","parentHeader","owned","executionState","execution_state","_handleCommOpen","_handleCommMsg","_handleCommClose","timeout","getRandomIntInclusive","Math","pow","warn","floor","done","moduleName","registry","requirejs","min","max","ceil","random","KernelFutureHandler","_stdin","noOp","_iopub","_reply","_done","_hooks","HookList","_disposeOnDone","_msg","_setFlag","KernelFutureFlag","GotReply","add","remove","_testFlag","IsDone","_handleReply","_handleStdin","_handleIOPub","_replyMsg","GotIdle","_handleDone","stdin","process","iopub","isStatusMsg","flag","defer","requestAnimationFrame","setImmediate","index","_scheduleCompact","_processing","processing","continueHandling","err","_compactScheduled","_compact","numNulls","len","KernelAPI","Kernel","KernelManager","polling_1","basemanager_1","restapi_1","default_1","_isReady","_kernelConnections","Set","_models","_runningChanged","_connectionFailure","_pollModels","Poll","auto","factory","requestRunning","frequency","interval","backoff","standby","_ready","start","tick","x","connectTo","kc","kernelConnection","_onStarted","refreshRunning","running","iter","values","refresh","createOptions","connectOptions","startNew","keys","models","listRunning","NetworkError","size","every","existing","statusChanged","_onStatusChanged","disposed","_onDisposed","isInputReplyMsg","isInputRequestMsg","isDebugReplyMsg","isDebugRequestMsg","isExecuteReplyMsg","isCommMsgMsg","isCommCloseMsg","isCommOpenMsg","isDebugEventMsg","isClearOutputMsg","isErrorMsg","isExecuteInputMsg","isStreamMsg","_e","date","Date","toISOString","version","getKernelModel","validateModels","validateModel","parse","buf","DataView","nbufs","getUint32","offsets","jsonBytes","Uint8Array","TextDecoder","decode","stop","byteLength","deserializeBinary","encoder","TextEncoder","origBuffers","jsonUtf8","encode","buffer","b","ArrayBuffer","isView","msgBuf","view","setUint32","serializeBinary","HEADER_FIELDS","IOPUB_CONTENT_FIELDS","stream","text","display_data","execute_input","code","execution_count","execute_result","ename","evalue","traceback","clear_output","wait","comm_open","comm_msg","comm_close","shutdown_reply","restart","validateHeader","fields","names","validateIOPubContent","KernelSpec","KernelSpecManager","_specs","_specsChanged","requestSpecs","_","_pollSpecs","ready","deepEqual","validateSpecModels","validateSpecModel","spec","env","resources","language","display_name","argv","defaultSpec","default","ks","ServiceManager","builder_1","nbconvert_1","contents_1","session_1","setting_1","terminal_1","workspace_1","kernel_1","normalized","kernelManager","sessions","SessionManager","SettingManager","terminals","TerminalManager","builder","workspaces","WorkspaceManager","nbconvert","NbConvertManager","connectionFailure","_onConnectionFailure","readyList","isAvailable","_readyPromise","base","exportList","mimeType","output_mimetype","FETCH","HEADERS","REQUEST","WEBSOCKET","window","fetchMod","g","fetch","Request","Headers","handleRequest","statusText","TypeError","original","stack","pageBaseUrl","getBaseUrl","pageWsUrl","getWsUrl","cache","credentials","getToken","JEST_WORKER_ID","getHostName","test","getTime","request","authenticated","headers","xsrfToken","matches","getCookie","SessionConnection","_path","_type","_kernelChanged","_propertyChanged","_connectToKernel","connectToKernel","_kernelConnectionOptions","kernelConnectionOptions","setupKernel","oldModel","_handleModelChange","_patch","shutdownSession","onKernelStatus","onKernelConnectionStatus","unhandledMessage","onUnhandledMessage","iopubMessage","onIOPubMessage","anyMessage","onAnyMessage","state","updateSession","SessionAPI","Session","_sessionConnections","_kernelManager","sessionConnection","startSession","filter","shutdown","sc","propertyChanged","_onChanged","kernelChanged","getSessionModel","getSessionUrl","SESSION_SERVICE_URL","updateLegacySessionModel","validate_2","notebook","statedb_1","DataConnector","plugin","composite","user","ids","raw","TerminalConnection","event","_messageReceived","shutdownTerminal","getTermUrl","TERMINAL_SERVICE_URL","TerminalAPI","Terminal","_names","_terminalConnections","terminalConnection","includes","sort","tc","String","errorIfNotAvailable","object","typeName","valid","findIndex","workspace"],"sourceRoot":""}
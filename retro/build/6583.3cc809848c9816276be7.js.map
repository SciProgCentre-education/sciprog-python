{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/basemanager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/builder/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/config/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/contents/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/contents/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/comm.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/future.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/messages.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/serialize.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernel/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernelspec/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernelspec/kernelspec.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernelspec/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernelspec/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/kernelspec/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/nbconvert/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/serverconnection.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/session.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/session/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/setting/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/shim/ws.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/terminal/default.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/terminal/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/terminal/manager.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/terminal/restapi.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/terminal/terminal.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/validate.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/services/lib/workspace/index.js"],"names":["Object","defineProperty","exports","value","BaseManager","signaling_1","serverconnection_1","options","_a","this","_isDisposed","_disposed","Signal","serverSettings","ServerConnection","makeSettings","isDisposed","emit","undefined","clearData","BuildManager","coreutils_1","_url","baseUrl","appUrl","URLExt","join","PageConfig","getOption","toLowerCase","makeRequest","then","response","status","ResponseError","json","data","Error","message","method","ConfigWithDefaults","ConfigSection","__1","create","section","DefaultConfigSection","load","settings","encodeURIComponent","name","_data","newdata","assign","init","body","JSON","stringify","_b","_className","_section","_defaults","defaults","className","key","_classData","d","d2","update","__createBinding","o","m","k","k2","enumerable","get","__setModuleDefault","v","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","Drive","ContentsManager","Contents","algorithm_1","validate","Private","validateContentsModel","contents","validateCheckpointModel","checkpoint","_additionalDrives","Map","_fileChanged","_defaultDrive","defaultDrive","fileChanged","connect","_onFileChanged","drive","set","path","_driveForPath","modelDBFactory","parts","split","firstParts","length","has","PathExt","slice","removeSlash","normalize","root","driveName","localPath","resolved","resolve","contentsModel","listing","type","content","each","item","push","_toGlobalPath","getDownloadUrl","globalPath","newUntitled","delete","newPath","drive1","path1","drive2","path2","rename","save","fromFile","toDir","copy","createCheckpoint","listCheckpoints","checkpointID","restoreCheckpoint","deleteCheckpoint","sender","args","newValue","oldValue","_c","_apiEndpoint","apiEndpoint","url","_getUrl","params","objectToQueryString","encodeParts","xsrfTokenMatch","document","cookie","match","fullurl","URL","searchParams","append","toString","Promise","ext","normalizeExtension","oldLocalPath","newLocalPath","copy_from","Array","isArray","i","map","extension","indexOf","validate_1","model","validateProperty","__exportStar","p","CommHandler","disposable_1","KernelMessage","DisposableDelegate","target","id","kernel","disposeCb","super","_target","_id","_kernel","_onClose","cb","_onMsg","metadata","buffers","msg","createMessage","msgType","channel","username","session","clientId","comm_id","target_name","sendShellMessage","disposeOnDone","future","onClose","dispose","KernelConnection","coreutils_2","comm_1","future_1","serialize","kernelspec_1","restapi","RESTARTING_KERNEL_SESSION","_d","_createSocket","_errorIfDisposed","_clearSocket","_updateConnectionStatus","partialUrl","wsUrl","KERNEL_SERVICE_URL","display","replace","console","debug","_clientId","token","appendToken","_ws","WebSocket","binaryType","onmessage","_onWSMessage","onopen","_onWSOpen","onclose","_onWSClose","onerror","evt","deserialize","validateMessage","error","_kernelSession","header","_msgChain","_handleMessage","catch","startsWith","_anyMessage","direction","_reconnect","_name","_status","_connectionStatus","_username","_reconnectLimit","_reconnectAttempt","_reconnectTimeout","_futures","_comms","_targetRegistry","_info","PromiseDelegate","_pendingMessages","_statusChanged","_connectionStatusChanged","_iopubMessage","_unhandledMessage","_displayIdToParentIds","_msgIdToDisplayIds","_noOp","UUID","uuid4","handleComms","requestKernelInfo","promise","_specPromise","KernelSpecAPI","getSpecs","specs","kernelspecs","_clearKernelState","expectReply","_sendKernelShellControl","KernelShellFutureHandler","KernelControlFutureHandler","ctor","_sendMessage","msgId","msg_id","displayIds","forEach","displayId","msgIds","idx","splice","queue","isInfoRequestMsg","connectionStatus","send","interruptKernel","_updateStatus","restartKernel","reconnect","fulfill","connectionStatusChanged","disconnect","reject","shutdownKernel","handleShutdown","reply","handleShellMessage","e","silent","store_history","user_expressions","allow_stdin","stop_on_error","sendControlMessage","targetName","commId","comm","_unregisterComm","callback","hook","registerMessageHook","removeMessageHook","parent_header","parentIds","updateMsg","JSONExt","deepCopy","msg_type","all","async","parentId","handleMsg","close","logKernelStatus","shift","clear","_assertCurrentMessage","loadObject","target_module","onMsg","clearTimeout","restarting","sendPendingCalled","sendPendingOnce","timeoutHandle","_sendPending","setTimeout","handled","isDisplayDataMsg","isUpdateDisplayDataMsg","isExecuteResultMsg","transient","_handleDisplayId","parentHeader","owned","executionState","execution_state","_handleCommOpen","_handleCommMsg","_handleCommClose","timeout","getRandomIntInclusive","Math","pow","warn","floor","done","moduleName","registry","requirejs","min","max","ceil","random","KernelFutureHandler","_stdin","noOp","_iopub","_reply","_done","_hooks","HookList","_disposeOnDone","_msg","_setFlag","KernelFutureFlag","GotReply","add","remove","sendInputReply","_testFlag","IsDone","_handleReply","_handleStdin","_handleIOPub","_replyMsg","GotIdle","_handleDone","stdin","process","iopub","isStatusMsg","flag","defer","requestAnimationFrame","setImmediate","index","_scheduleCompact","_processing","processing","continueHandling","err","_compactScheduled","_compact","numNulls","len","KernelAPI","Kernel","KernelManager","polling_1","basemanager_1","restapi_1","default_1","_isReady","_kernelConnections","Set","_models","_runningChanged","_connectionFailure","_pollModels","Poll","auto","factory","requestRunning","frequency","interval","backoff","standby","_ready","start","tick","x","kc","kernelConnection","_onStarted","refreshRunning","iter","values","refresh","createOptions","connectOptions","startNew","connectTo","keys","models","listRunning","NetworkError","size","every","existing","statusChanged","_onStatusChanged","disposed","_onDisposed","isInputReplyMsg","isInputRequestMsg","isDebugReplyMsg","isDebugRequestMsg","isExecuteReplyMsg","isCommMsgMsg","isCommCloseMsg","isCommOpenMsg","isDebugEventMsg","isClearOutputMsg","isErrorMsg","isExecuteInputMsg","isStreamMsg","_e","date","Date","toISOString","version","getKernelModel","validateModels","validateModel","parse","buf","DataView","nbufs","getUint32","offsets","jsonBytes","Uint8Array","TextDecoder","decode","stop","byteLength","deserializeBinary","encoder","TextEncoder","origBuffers","jsonUtf8","encode","buffer","b","ArrayBuffer","isView","msgBuf","view","setUint32","serializeBinary","HEADER_FIELDS","IOPUB_CONTENT_FIELDS","stream","text","display_data","execute_input","code","execution_count","execute_result","ename","evalue","traceback","clear_output","wait","comm_open","comm_msg","comm_close","shutdown_reply","restart","validateHeader","fields","names","validateIOPubContent","KernelSpec","KernelSpecManager","_specs","_specsChanged","requestSpecs","_","_pollSpecs","ready","deepEqual","validateSpecModels","validateSpecModel","spec","env","resources","language","display_name","argv","defaultSpec","default","ks","ServiceManager","builder_1","nbconvert_1","contents_1","session_1","setting_1","terminal_1","workspace_1","kernel_1","normalized","kernelManager","sessions","SessionManager","SettingManager","terminals","TerminalManager","builder","workspaces","WorkspaceManager","nbconvert","NbConvertManager","connectionFailure","_onConnectionFailure","readyList","isAvailable","_readyPromise","base","exportList","mimeType","output_mimetype","FETCH","HEADERS","REQUEST","WEBSOCKET","window","fetchMod","g","fetch","Request","Headers","handleRequest","statusText","TypeError","original","stack","pageBaseUrl","getBaseUrl","pageWsUrl","getWsUrl","cache","credentials","getToken","JEST_WORKER_ID","getHostName","test","getTime","request","authenticated","headers","xsrfToken","matches","getCookie","SessionConnection","_path","_type","_kernelChanged","_propertyChanged","_connectToKernel","connectToKernel","_kernelConnectionOptions","kernelConnectionOptions","setupKernel","oldModel","_handleModelChange","_patch","shutdownSession","onKernelStatus","onKernelConnectionStatus","unhandledMessage","onUnhandledMessage","iopubMessage","onIOPubMessage","anyMessage","onAnyMessage","state","updateSession","SessionAPI","Session","_sessionConnections","_kernelManager","sessionConnection","startSession","filter","shutdown","sc","propertyChanged","_onChanged","kernelChanged","getSessionModel","getSessionUrl","SESSION_SERVICE_URL","updateLegacySessionModel","validate_2","notebook","statedb_1","DataConnector","plugin","composite","user","ids","raw","TerminalConnection","event","_messageReceived","shutdownTerminal","getTermUrl","TERMINAL_SERVICE_URL","TerminalAPI","Terminal","_names","_terminalConnections","terminalConnection","includes","sort","tc","String","errorIfNotAvailable","object","typeName","valid","findIndex","workspace"],"mappings":"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","file":"6583.3cc809848c9816276be7.js","sourcesContent":["\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseManager = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"./serverconnection\");\nclass BaseManager {\n    constructor(options) {\n        var _a;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * A signal emitted when the delegate is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Test whether the delegate has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._disposed.emit(undefined);\n        signaling_1.Signal.clearData(this);\n    }\n}\nexports.BaseManager = BaseManager;\n//# sourceMappingURL=basemanager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BuildManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab build service.\n */\nconst BUILD_SETTINGS_URL = 'api/build';\n/**\n * The build API service manager.\n */\nclass BuildManager {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this._url = '';\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n        const { baseUrl, appUrl } = this.serverSettings;\n        this._url = coreutils_1.URLExt.join(baseUrl, appUrl, BUILD_SETTINGS_URL);\n    }\n    /**\n     * Test whether the build service is available.\n     */\n    get isAvailable() {\n        return coreutils_1.PageConfig.getOption('buildAvailable').toLowerCase() === 'true';\n    }\n    /**\n     * Test whether to check build status automatically.\n     */\n    get shouldCheck() {\n        return coreutils_1.PageConfig.getOption('buildCheck').toLowerCase() === 'true';\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    getStatus() {\n        const { _url, serverSettings } = this;\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, {}, serverSettings);\n        return promise\n            .then(response => {\n            if (response.status !== 200) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n            return response.json();\n        })\n            .then(data => {\n            if (typeof data.status !== 'string') {\n                throw new Error('Invalid data');\n            }\n            if (typeof data.message !== 'string') {\n                throw new Error('Invalid data');\n            }\n            return data;\n        });\n    }\n    /**\n     * Build the application.\n     */\n    build() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'POST' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status === 400) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response, 'Build aborted');\n            }\n            if (response.status !== 200) {\n                const message = `Build failed with ${response.status}, please run 'jupyter lab build' on the server for full output`;\n                throw new serverconnection_1.ServerConnection.ResponseError(response, message);\n            }\n        });\n    }\n    /**\n     * Cancel an active build.\n     */\n    cancel() {\n        const { _url, serverSettings } = this;\n        const init = { method: 'DELETE' };\n        const promise = serverconnection_1.ServerConnection.makeRequest(_url, init, serverSettings);\n        return promise.then(response => {\n            if (response.status !== 204) {\n                throw new serverconnection_1.ServerConnection.ResponseError(response);\n            }\n        });\n    }\n}\nexports.BuildManager = BuildManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigWithDefaults = exports.ConfigSection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst __1 = require(\"..\");\n/**\n * The url for the config service.\n */\nconst SERVICE_CONFIG_URL = 'api/config';\n/**\n * The namespace for ConfigSection statics.\n */\nvar ConfigSection;\n(function (ConfigSection) {\n    /**\n     * Create a config section.\n     *\n     * @returns A Promise that is fulfilled with the config section is loaded.\n     */\n    function create(options) {\n        const section = new DefaultConfigSection(options);\n        return section.load().then(() => {\n            return section;\n        });\n    }\n    ConfigSection.create = create;\n})(ConfigSection = exports.ConfigSection || (exports.ConfigSection = {}));\n/**\n * Implementation of the Configurable data section.\n */\nclass DefaultConfigSection {\n    /**\n     * Construct a new config section.\n     */\n    constructor(options) {\n        var _a;\n        this._url = 'unknown';\n        const settings = (this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings());\n        this._url = coreutils_1.URLExt.join(settings.baseUrl, SERVICE_CONFIG_URL, encodeURIComponent(options.name));\n    }\n    /**\n     * Get the data for this section.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * Load the initial data for this section.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async load() {\n        const response = await __1.ServerConnection.makeRequest(this._url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n    }\n    /**\n     * Modify the stored config values.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Updates the local data immediately, sends the change to the server,\n     * and updates the local data with the response, and fulfils the promise\n     * with that data.\n     */\n    async update(newdata) {\n        this._data = Object.assign(Object.assign({}, this._data), newdata);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify(newdata)\n        };\n        const response = await __1.ServerConnection.makeRequest(this._url, init, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._data = await response.json();\n        return this._data;\n    }\n}\n/**\n * Configurable object with defaults.\n */\nclass ConfigWithDefaults {\n    /**\n     * Create a new config with defaults.\n     */\n    constructor(options) {\n        var _a, _b;\n        this._className = '';\n        this._section = options.section;\n        this._defaults = (_a = options.defaults) !== null && _a !== void 0 ? _a : {};\n        this._className = (_b = options.className) !== null && _b !== void 0 ? _b : '';\n    }\n    /**\n     * Get data from the config section or fall back to defaults.\n     */\n    get(key) {\n        const data = this._classData();\n        return key in data ? data[key] : this._defaults[key];\n    }\n    /**\n     * Set a config value.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * Sends the update to the server, and changes our local copy of the data\n     * immediately.\n     */\n    set(key, value) {\n        const d = {};\n        d[key] = value;\n        if (this._className) {\n            const d2 = {};\n            d2[this._className] = d;\n            return this._section.update(d2);\n        }\n        else {\n            return this._section.update(d);\n        }\n    }\n    /**\n     * Get data from the Section with our classname, if available.\n     *\n     * #### Notes\n     * If we have no classname, get all of the data in the Section\n     */\n    _classData() {\n        const data = this._section.data;\n        if (this._className && this._className in data) {\n            return data[this._className];\n        }\n        return data;\n    }\n}\nexports.ConfigWithDefaults = ConfigWithDefaults;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Drive = exports.ContentsManager = exports.Contents = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst validate = __importStar(require(\"./validate\"));\n/**\n * The url for the default drive service.\n */\nconst SERVICE_DRIVE_URL = 'api/contents';\n/**\n * The url for the file access.\n */\nconst FILES_URL = 'files';\n/**\n * A namespace for contents interfaces.\n */\nvar Contents;\n(function (Contents) {\n    /**\n     * Validates an IModel, throwing an error if it does not pass.\n     */\n    function validateContentsModel(contents) {\n        validate.validateContentsModel(contents);\n    }\n    Contents.validateContentsModel = validateContentsModel;\n    /**\n     * Validates an ICheckpointModel, thowing an error if it does not pass.\n     */\n    function validateCheckpointModel(checkpoint) {\n        validate.validateCheckpointModel(checkpoint);\n    }\n    Contents.validateCheckpointModel = validateCheckpointModel;\n})(Contents = exports.Contents || (exports.Contents = {}));\n/**\n * A contents manager that passes file operations to the server.\n * Multiple servers implementing the `IDrive` interface can be\n * attached to the contents manager, so that the same session can\n * perform file operations on multiple backends.\n *\n * This includes checkpointing with the normal file operations.\n */\nclass ContentsManager {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._additionalDrives = new Map();\n        this._fileChanged = new signaling_1.Signal(this);\n        const serverSettings = (this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings());\n        this._defaultDrive = (_b = options.defaultDrive) !== null && _b !== void 0 ? _b : new Drive({ serverSettings });\n        this._defaultDrive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Add an `IDrive` to the manager.\n     */\n    addDrive(drive) {\n        this._additionalDrives.set(drive.name, drive);\n        drive.fileChanged.connect(this._onFileChanged, this);\n    }\n    /**\n     * Given a path, get a ModelDB.IFactory from the\n     * relevant backend. Returns `undefined` if the backend\n     * does not provide one.\n     */\n    getModelDBFactory(path) {\n        var _a;\n        const [drive] = this._driveForPath(path);\n        return (_a = drive === null || drive === void 0 ? void 0 : drive.modelDBFactory) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the local part of it.\n     *\n     * @param path: the path.\n     *\n     * @returns The local part of the path.\n     */\n    localPath(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1 || !this._additionalDrives.has(firstParts[0])) {\n            return coreutils_1.PathExt.removeSlash(path);\n        }\n        return coreutils_1.PathExt.join(firstParts.slice(1).join(':'), ...parts.slice(1));\n    }\n    /**\n     * Normalize a global path. Reduces '..' and '.' parts, and removes\n     * leading slashes from the local part of the path, while retaining\n     * the drive name if it exists.\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    normalize(path) {\n        const parts = path.split(':');\n        if (parts.length === 1) {\n            return coreutils_1.PathExt.normalize(path);\n        }\n        return `${parts[0]}:${coreutils_1.PathExt.normalize(parts.slice(1).join(':'))}`;\n    }\n    /**\n     * Resolve a global path, starting from the root path. Behaves like\n     * posix-path.resolve, with 3 differences:\n     *  - will never prepend cwd\n     *  - if root has a drive name, the result is prefixed with \"<drive>:\"\n     *  - before adding drive name, leading slashes are removed\n     *\n     * @param path: the path.\n     *\n     * @returns The normalized path.\n     */\n    resolvePath(root, path) {\n        const driveName = this.driveName(root);\n        const localPath = this.localPath(root);\n        const resolved = coreutils_1.PathExt.resolve('/', localPath, path);\n        return driveName ? `${driveName}:${resolved}` : resolved;\n    }\n    /**\n     * Given a path of the form `drive:local/portion/of/it.txt`\n     * get the name of the drive. If the path is missing\n     * a drive portion, returns an empty string.\n     *\n     * @param path: the path.\n     *\n     * @returns The drive name for the path, or the empty string.\n     */\n    driveName(path) {\n        const parts = path.split('/');\n        const firstParts = parts[0].split(':');\n        if (firstParts.length === 1) {\n            return '';\n        }\n        if (this._additionalDrives.has(firstParts[0])) {\n            return firstParts[0];\n        }\n        return '';\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    get(path, options) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.get(localPath, options).then(contentsModel => {\n            const listing = [];\n            if (contentsModel.type === 'directory' && contentsModel.content) {\n                algorithm_1.each(contentsModel.content, (item) => {\n                    listing.push(Object.assign(Object.assign({}, item), { path: this._toGlobalPath(drive, item.path) }));\n                });\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath), content: listing });\n            }\n            else {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive, localPath) });\n            }\n        });\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param path - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.getDownloadUrl(localPath);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     */\n    newUntitled(options = {}) {\n        if (options.path) {\n            const globalPath = this.normalize(options.path);\n            const [drive, localPath] = this._driveForPath(globalPath);\n            return drive\n                .newUntitled(Object.assign(Object.assign({}, options), { path: localPath }))\n                .then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: coreutils_1.PathExt.join(globalPath, contentsModel.name) });\n            });\n        }\n        else {\n            return this._defaultDrive.newUntitled(options);\n        }\n    }\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     */\n    delete(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.delete(localPath);\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param newPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     */\n    rename(path, newPath) {\n        const [drive1, path1] = this._driveForPath(path);\n        const [drive2, path2] = this._driveForPath(newPath);\n        if (drive1 !== drive2) {\n            throw Error('ContentsManager: renaming files must occur within a Drive');\n        }\n        return drive1.rename(path1, path2).then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, path2) });\n        });\n    }\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     */\n    save(path, options = {}) {\n        const globalPath = this.normalize(path);\n        const [drive, localPath] = this._driveForPath(path);\n        return drive\n            .save(localPath, Object.assign(Object.assign({}, options), { path: localPath }))\n            .then(contentsModel => {\n            return Object.assign(Object.assign({}, contentsModel), { path: globalPath });\n        });\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     */\n    copy(fromFile, toDir) {\n        const [drive1, path1] = this._driveForPath(fromFile);\n        const [drive2, path2] = this._driveForPath(toDir);\n        if (drive1 === drive2) {\n            return drive1.copy(path1, path2).then(contentsModel => {\n                return Object.assign(Object.assign({}, contentsModel), { path: this._toGlobalPath(drive1, contentsModel.path) });\n            });\n        }\n        else {\n            throw Error('Copying files between drives is not currently implemented');\n        }\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    createCheckpoint(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.createCheckpoint(localPath);\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    listCheckpoints(path) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.listCheckpoints(localPath);\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    restoreCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.restoreCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    deleteCheckpoint(path, checkpointID) {\n        const [drive, localPath] = this._driveForPath(path);\n        return drive.deleteCheckpoint(localPath, checkpointID);\n    }\n    /**\n     * Given a drive and a local path, construct a fully qualified\n     * path. The inverse of `_driveForPath`.\n     *\n     * @param drive: an `IDrive`.\n     *\n     * @param localPath: the local path on the drive.\n     *\n     * @returns the fully qualified path.\n     */\n    _toGlobalPath(drive, localPath) {\n        if (drive === this._defaultDrive) {\n            return coreutils_1.PathExt.removeSlash(localPath);\n        }\n        else {\n            return `${drive.name}:${coreutils_1.PathExt.removeSlash(localPath)}`;\n        }\n    }\n    /**\n     * Given a path, get the `IDrive to which it refers,\n     * where the path satisfies the pattern\n     * `'driveName:path/to/file'`. If there is no `driveName`\n     * prepended to the path, it returns the default drive.\n     *\n     * @param path: a path to a file.\n     *\n     * @returns A tuple containing an `IDrive` object for the path,\n     * and a local path for that drive.\n     */\n    _driveForPath(path) {\n        const driveName = this.driveName(path);\n        const localPath = this.localPath(path);\n        if (driveName) {\n            return [this._additionalDrives.get(driveName), localPath];\n        }\n        else {\n            return [this._defaultDrive, localPath];\n        }\n    }\n    /**\n     * Respond to fileChanged signals from the drives attached to\n     * the manager. This prepends the drive name to the path if necessary,\n     * and then forwards the signal.\n     */\n    _onFileChanged(sender, args) {\n        var _a, _b;\n        if (sender === this._defaultDrive) {\n            this._fileChanged.emit(args);\n        }\n        else {\n            let newValue = null;\n            let oldValue = null;\n            if ((_a = args.newValue) === null || _a === void 0 ? void 0 : _a.path) {\n                newValue = Object.assign(Object.assign({}, args.newValue), { path: this._toGlobalPath(sender, args.newValue.path) });\n            }\n            if ((_b = args.oldValue) === null || _b === void 0 ? void 0 : _b.path) {\n                oldValue = Object.assign(Object.assign({}, args.oldValue), { path: this._toGlobalPath(sender, args.oldValue.path) });\n            }\n            this._fileChanged.emit({\n                type: args.type,\n                newValue,\n                oldValue\n            });\n        }\n    }\n}\nexports.ContentsManager = ContentsManager;\n/**\n * A default implementation for an `IDrive`, talking to the\n * server using the Jupyter REST API.\n */\nclass Drive {\n    /**\n     * Construct a new contents manager object.\n     *\n     * @param options - The options used to initialize the object.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c;\n        this._isDisposed = false;\n        this._fileChanged = new signaling_1.Signal(this);\n        this.name = (_a = options.name) !== null && _a !== void 0 ? _a : 'Default';\n        this._apiEndpoint = (_b = options.apiEndpoint) !== null && _b !== void 0 ? _b : SERVICE_DRIVE_URL;\n        this.serverSettings = (_c = options.serverSettings) !== null && _c !== void 0 ? _c : __1.ServerConnection.makeSettings();\n    }\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Test whether the manager has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Get a file or directory.\n     *\n     * @param localPath: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async get(localPath, options) {\n        let url = this._getUrl(localPath);\n        if (options) {\n            // The notebook type cannot take an format option.\n            if (options.type === 'notebook') {\n                delete options['format'];\n            }\n            const content = options.content ? '1' : '0';\n            const params = Object.assign(Object.assign({}, options), { content });\n            url += coreutils_1.URLExt.objectToQueryString(params);\n        }\n        const settings = this.serverSettings;\n        const response = await __1.ServerConnection.makeRequest(url, {}, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        return data;\n    }\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param localPath - An absolute POSIX file path on the server.\n     *\n     * #### Notes\n     * It is expected that the path contains no relative paths.\n     *\n     * The returned URL may include a query parameter.\n     */\n    getDownloadUrl(localPath) {\n        const baseUrl = this.serverSettings.baseUrl;\n        let url = coreutils_1.URLExt.join(baseUrl, FILES_URL, coreutils_1.URLExt.encodeParts(localPath));\n        const xsrfTokenMatch = document.cookie.match('\\\\b_xsrf=([^;]*)\\\\b');\n        if (xsrfTokenMatch) {\n            const fullurl = new URL(url);\n            fullurl.searchParams.append('_xsrf', xsrfTokenMatch[1]);\n            url = fullurl.toString();\n        }\n        return Promise.resolve(url);\n    }\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async newUntitled(options = {}) {\n        var _a;\n        let body = '{}';\n        if (options) {\n            if (options.ext) {\n                options.ext = Private.normalizeExtension(options.ext);\n            }\n            body = JSON.stringify(options);\n        }\n        const settings = this.serverSettings;\n        const url = this._getUrl((_a = options.path) !== null && _a !== void 0 ? _a : '');\n        const init = {\n            method: 'POST',\n            body\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Delete a file.\n     *\n     * @param localPath - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async delete(localPath) {\n        const url = this._getUrl(localPath);\n        const settings = this.serverSettings;\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // TODO: update IPEP27 to specify errors more precisely, so\n        // that error types can be detected here with certainty.\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        this._fileChanged.emit({\n            type: 'delete',\n            oldValue: { path: localPath },\n            newValue: null\n        });\n    }\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file contents model when\n     *   the file is renamed.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async rename(oldLocalPath, newLocalPath) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(oldLocalPath);\n        const init = {\n            method: 'PATCH',\n            body: JSON.stringify({ path: newLocalPath })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'rename',\n            oldValue: { path: oldLocalPath },\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Save a file.\n     *\n     * @param localPath - The desired file path.\n     *\n     * @param options - Optional overrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     *\n     * #### Notes\n     * Ensure that `model.content` is populated for the file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async save(localPath, options = {}) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(localPath);\n        const init = {\n            method: 'PUT',\n            body: JSON.stringify(options)\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        // will return 200 for an existing file and 201 for a new file\n        if (response.status !== 200 && response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'save',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param localPath - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new contents model when the\n     *  file is copied.\n     *\n     * #### Notes\n     * The server will select the name of the copied file.\n     *\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async copy(fromFile, toDir) {\n        const settings = this.serverSettings;\n        const url = this._getUrl(toDir);\n        const init = {\n            method: 'POST',\n            body: JSON.stringify({ copy_from: fromFile })\n        };\n        const response = await __1.ServerConnection.makeRequest(url, init, settings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateContentsModel(data);\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async createCheckpoint(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 201) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        validate.validateCheckpointModel(data);\n        return data;\n    }\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n     */\n    async listCheckpoints(localPath) {\n        const url = this._getUrl(localPath, 'checkpoints');\n        const response = await __1.ServerConnection.makeRequest(url, {}, this.serverSettings);\n        if (response.status !== 200) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        if (!Array.isArray(data)) {\n            throw new Error('Invalid Checkpoint list');\n        }\n        for (let i = 0; i < data.length; i++) {\n            validate.validateCheckpointModel(data[i]);\n        }\n        return data;\n    }\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async restoreCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'POST' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    async deleteCheckpoint(localPath, checkpointID) {\n        const url = this._getUrl(localPath, 'checkpoints', checkpointID);\n        const init = { method: 'DELETE' };\n        const response = await __1.ServerConnection.makeRequest(url, init, this.serverSettings);\n        if (response.status !== 204) {\n            const err = await __1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Get a REST url for a file given a path.\n     */\n    _getUrl(...args) {\n        const parts = args.map(path => coreutils_1.URLExt.encodeParts(path));\n        const baseUrl = this.serverSettings.baseUrl;\n        return coreutils_1.URLExt.join(baseUrl, this._apiEndpoint, ...parts);\n    }\n}\nexports.Drive = Drive;\n/**\n * A namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize a file extension to be of the type `'.foo'`.\n     *\n     * Adds a leading dot if not present and converts to lower case.\n     */\n    function normalizeExtension(extension) {\n        if (extension.length > 0 && extension.indexOf('.') !== 0) {\n            extension = `.${extension}`;\n        }\n        return extension;\n    }\n    Private.normalizeExtension = normalizeExtension;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateCheckpointModel = exports.validateContentsModel = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Validate an `Contents.IModel` object.\n */\nfunction validateContentsModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'path', 'string');\n    validate_1.validateProperty(model, 'type', 'string');\n    validate_1.validateProperty(model, 'created', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n    validate_1.validateProperty(model, 'mimetype', 'object');\n    validate_1.validateProperty(model, 'content', 'object');\n    validate_1.validateProperty(model, 'format', 'object');\n}\nexports.validateContentsModel = validateContentsModel;\n/**\n * Validate an `Contents.ICheckpointModel` object.\n */\nfunction validateCheckpointModel(model) {\n    validate_1.validateProperty(model, 'id', 'string');\n    validate_1.validateProperty(model, 'last_modified', 'string');\n}\nexports.validateCheckpointModel = validateCheckpointModel;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module services\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./config\"), exports);\n__exportStar(require(\"./contents\"), exports);\n__exportStar(require(\"./kernel\"), exports);\n__exportStar(require(\"./kernelspec\"), exports);\n__exportStar(require(\"./manager\"), exports);\n__exportStar(require(\"./serverconnection\"), exports);\n__exportStar(require(\"./session\"), exports);\n__exportStar(require(\"./setting\"), exports);\n__exportStar(require(\"./terminal\"), exports);\n__exportStar(require(\"./workspace\"), exports);\n__exportStar(require(\"./nbconvert\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommHandler = void 0;\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Comm channel handler.\n */\nclass CommHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new comm channel.\n     */\n    constructor(target, id, kernel, disposeCb) {\n        super(disposeCb);\n        this._target = '';\n        this._id = '';\n        this._id = id;\n        this._target = target;\n        this._kernel = kernel;\n    }\n    /**\n     * The unique id for the comm channel.\n     */\n    get commId() {\n        return this._id;\n    }\n    /**\n     * The target name for the comm channel.\n     */\n    get targetName() {\n        return this._target;\n    }\n    /**\n     * Get the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client.\n     *\n     * **See also:** [[ICommClose]], [[close]]\n     */\n    get onClose() {\n        return this._onClose;\n    }\n    /**\n     * Set the callback for a comm close event.\n     *\n     * #### Notes\n     * This is called when the comm is closed from either the server or client. If\n     * the function returns a promise, and the kernel was closed from the server,\n     * kernel message processing will pause until the returned promise is\n     * fulfilled.\n     *\n     * **See also:** [[close]]\n     */\n    set onClose(cb) {\n        this._onClose = cb;\n    }\n    /**\n     * Get the callback for a comm message received event.\n     */\n    get onMsg() {\n        return this._onMsg;\n    }\n    /**\n     * Set the callback for a comm message received event.\n     *\n     * #### Notes\n     * This is called when a comm message is received. If the function returns a\n     * promise, kernel message processing will pause until it is fulfilled.\n     */\n    set onMsg(cb) {\n        this._onMsg = cb;\n    }\n    /**\n     * Open a comm with optional data and metadata.\n     *\n     * #### Notes\n     * This sends a `comm_open` message to the server.\n     *\n     * **See also:** [[ICommOpen]]\n     */\n    open(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot open');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_open',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                target_name: this._target,\n                data: data !== null && data !== void 0 ? data : {}\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, true);\n    }\n    /**\n     * Send a `comm_msg` message to the kernel.\n     *\n     * #### Notes\n     * This is a no-op if the comm has been closed.\n     *\n     * **See also:** [[ICommMsg]]\n     */\n    send(data, metadata, buffers = [], disposeOnDone = true) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot send');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_msg',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: data\n            },\n            metadata,\n            buffers\n        });\n        return this._kernel.sendShellMessage(msg, false, disposeOnDone);\n    }\n    /**\n     * Close the comm.\n     *\n     * #### Notes\n     * This will send a `comm_close` message to the kernel, and call the\n     * `onClose` callback if set.\n     *\n     * This is a no-op if the comm is already closed.\n     *\n     * **See also:** [[ICommClose]], [[onClose]]\n     */\n    close(data, metadata, buffers = []) {\n        if (this.isDisposed || this._kernel.isDisposed) {\n            throw new Error('Cannot close');\n        }\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_close',\n            channel: 'shell',\n            username: this._kernel.username,\n            session: this._kernel.clientId,\n            content: {\n                comm_id: this._id,\n                data: data !== null && data !== void 0 ? data : {}\n            },\n            metadata,\n            buffers\n        });\n        const future = this._kernel.sendShellMessage(msg, false, true);\n        const onClose = this._onClose;\n        if (onClose) {\n            const ioMsg = KernelMessage.createMessage({\n                msgType: 'comm_close',\n                channel: 'iopub',\n                username: this._kernel.username,\n                session: this._kernel.clientId,\n                content: {\n                    comm_id: this._id,\n                    data: data !== null && data !== void 0 ? data : {}\n                },\n                metadata,\n                buffers\n            });\n            // In the future, we may want to communicate back to the user the possible\n            // promise returned from onClose.\n            void onClose(ioMsg);\n        }\n        this.dispose();\n        return future;\n    }\n}\nexports.CommHandler = CommHandler;\n//# sourceMappingURL=comm.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst comm_1 = require(\"./comm\");\nconst KernelMessage = __importStar(require(\"./messages\"));\nconst future_1 = require(\"./future\");\nconst serialize = __importStar(require(\"./serialize\"));\nconst validate = __importStar(require(\"./validate\"));\nconst kernelspec_1 = require(\"../kernelspec\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst KERNEL_INFO_TIMEOUT = 3000;\nconst RESTARTING_KERNEL_SESSION = '_RESTARTING_';\n/**\n * Implementation of the Kernel object.\n *\n * #### Notes\n * Messages from the server are handled in the order they were received and\n * asynchronously. Any message handler can return a promise, and message\n * handling will pause until the promise is fulfilled.\n */\nclass KernelConnection {\n    /**\n     * Construct a kernel object.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        /**\n         * Create the kernel websocket connection and add socket status handlers.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const settings = this.serverSettings;\n            const partialUrl = coreutils_1.URLExt.join(settings.wsUrl, restapi.KERNEL_SERVICE_URL, encodeURIComponent(this._id));\n            // Strip any authentication from the display string.\n            const display = partialUrl.replace(/^((?:\\w+:)?\\/\\/)(?:[^@\\/]+@)/, '$1');\n            console.debug(`Starting WebSocket: ${display}`);\n            let url = coreutils_1.URLExt.join(partialUrl, 'channels?session_id=' + encodeURIComponent(this._clientId));\n            // If token authentication is in use.\n            const token = settings.token;\n            if (settings.appendToken && token !== '') {\n                url = url + `&token=${encodeURIComponent(token)}`;\n            }\n            this._ws = new settings.WebSocket(url);\n            // Ensure incoming binary messages are not Blobs\n            this._ws.binaryType = 'arraybuffer';\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onopen = this._onWSOpen;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Make websocket callbacks arrow functions so they bind `this`.\n        /**\n         * Handle a websocket open event.\n         */\n        this._onWSOpen = (evt) => {\n            this._updateConnectionStatus('connected');\n        };\n        /**\n         * Handle a websocket message, validating and routing appropriately.\n         */\n        this._onWSMessage = (evt) => {\n            // Notify immediately if there is an error with the message.\n            let msg;\n            try {\n                msg = serialize.deserialize(evt.data);\n                validate.validateMessage(msg);\n            }\n            catch (error) {\n                error.message = `Kernel message validation error: ${error.message}`;\n                // We throw the error so that it bubbles up to the top, and displays the right stack.\n                throw error;\n            }\n            // Update the current kernel session id\n            this._kernelSession = msg.header.session;\n            // Handle the message asynchronously, in the order received.\n            this._msgChain = this._msgChain\n                .then(() => {\n                // Return so that any promises from handling a message are fulfilled\n                // before proceeding to the next message.\n                return this._handleMessage(msg);\n            })\n                .catch(error => {\n                // Log any errors in handling the message, thus resetting the _msgChain\n                // promise so we can process more messages.\n                // Ignore the \"Canceled\" errors that are thrown during kernel dispose.\n                if (error.message.startsWith('Canceled future for ')) {\n                    console.error(error);\n                }\n            });\n            // Emit the message receive signal\n            this._anyMessage.emit({ msg, direction: 'recv' });\n        };\n        /**\n         * Handle a websocket close event.\n         */\n        this._onWSClose = (evt) => {\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._id = '';\n        this._name = '';\n        this._status = 'unknown';\n        this._connectionStatus = 'connecting';\n        this._kernelSession = '';\n        this._isDisposed = false;\n        /**\n         * Websocket to communicate with kernel.\n         */\n        this._ws = null;\n        this._username = '';\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._reconnectTimeout = null;\n        this._futures = new Map();\n        this._comms = new Map();\n        this._targetRegistry = Object.create(null);\n        this._info = new coreutils_2.PromiseDelegate();\n        this._pendingMessages = [];\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._disposed = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._displayIdToParentIds = new Map();\n        this._msgIdToDisplayIds = new Map();\n        this._msgChain = Promise.resolve();\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._name = options.model.name;\n        this._id = options.model.id;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings();\n        this._clientId = (_b = options.clientId) !== null && _b !== void 0 ? _b : coreutils_2.UUID.uuid4();\n        this._username = (_c = options.username) !== null && _c !== void 0 ? _c : '';\n        this.handleComms = (_d = options.handleComms) !== null && _d !== void 0 ? _d : true;\n        this._createSocket();\n        // Immediately queue up a request for initial kernel info.\n        void this.requestKernelInfo();\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal emitted when the kernel status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal emitted for iopub kernel messages.\n     *\n     * #### Notes\n     * This signal is emitted after the iopub message is handled asynchronously.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal emitted for unhandled kernel message.\n     *\n     * #### Notes\n     * This signal is emitted for a message that was not handled. It is emitted\n     * during the asynchronous message handling code.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * The kernel model\n     */\n    get model() {\n        return {\n            id: this.id,\n            name: this.name\n        };\n    }\n    /**\n     * A signal emitted for any kernel message.\n     *\n     * #### Notes\n     * This signal is emitted when a message is received, before it is handled\n     * asynchronously.\n     *\n     * This message is emitted when a message is queued for sending (either in\n     * the websocket buffer, or our own pending message buffer). The message may\n     * actually be sent across the wire at a later time.\n     *\n     * The message emitted in this signal should not be modified in any way.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * The id of the server-side kernel.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * The name of the server-side kernel.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The client username.\n     */\n    get username() {\n        return this._username;\n    }\n    /**\n     * The client unique id.\n     */\n    get clientId() {\n        return this._clientId;\n    }\n    /**\n     * The current status of the kernel.\n     */\n    get status() {\n        return this._status;\n    }\n    /**\n     * The current connection status of the kernel connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n    /**\n     * Test whether the kernel has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The cached kernel info.\n     *\n     * @returns A promise that resolves to the kernel info.\n     */\n    get info() {\n        return this._info.promise;\n    }\n    /**\n     * The kernel spec.\n     *\n     * @returns A promise that resolves to the kernel spec.\n     */\n    get spec() {\n        if (this._specPromise) {\n            return this._specPromise;\n        }\n        this._specPromise = kernelspec_1.KernelSpecAPI.getSpecs(this.serverSettings).then(specs => {\n            return specs.kernelspecs[this._name];\n        });\n        return this._specPromise;\n    }\n    /**\n     * Clone the current kernel with a new clientId.\n     */\n    clone(options = {}) {\n        return new KernelConnection(Object.assign({ model: this.model, username: this.username, serverSettings: this.serverSettings, \n            // handleComms defaults to false since that is safer\n            handleComms: false }, options));\n    }\n    /**\n     * Dispose of the resources held by the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearKernelState();\n        this._pendingMessages = [];\n        this._clearSocket();\n        // Clear Lumino signals\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a shell message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's shell channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * shell reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendShellMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelShellFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    /**\n     * Send a control message to the kernel.\n     *\n     * #### Notes\n     * Send a message to the kernel's control channel, yielding a future object\n     * for accepting replies.\n     *\n     * If `expectReply` is given and `true`, the future is disposed when both a\n     * control reply and an idle status message are received. If `expectReply`\n     * is not given or is `false`, the future is resolved when an idle status\n     * message is received.\n     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n     *\n     * All replies are validated as valid kernel messages.\n     *\n     * If the kernel status is `dead`, this will throw an error.\n     */\n    sendControlMessage(msg, expectReply = false, disposeOnDone = true) {\n        return this._sendKernelShellControl(future_1.KernelControlFutureHandler, msg, expectReply, disposeOnDone);\n    }\n    _sendKernelShellControl(ctor, msg, expectReply = false, disposeOnDone = true) {\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n        const future = new ctor(() => {\n            const msgId = msg.header.msg_id;\n            this._futures.delete(msgId);\n            // Remove stored display id information.\n            const displayIds = this._msgIdToDisplayIds.get(msgId);\n            if (!displayIds) {\n                return;\n            }\n            displayIds.forEach(displayId => {\n                const msgIds = this._displayIdToParentIds.get(displayId);\n                if (msgIds) {\n                    const idx = msgIds.indexOf(msgId);\n                    if (idx === -1) {\n                        return;\n                    }\n                    if (msgIds.length === 1) {\n                        this._displayIdToParentIds.delete(displayId);\n                    }\n                    else {\n                        msgIds.splice(idx, 1);\n                        this._displayIdToParentIds.set(displayId, msgIds);\n                    }\n                }\n            });\n            this._msgIdToDisplayIds.delete(msgId);\n        }, msg, expectReply, disposeOnDone, this);\n        this._futures.set(msg.header.msg_id, future);\n        return future;\n    }\n    /**\n     * Send a message on the websocket.\n     *\n     * If queue is true, queue the message for later sending if we cannot send\n     * now. Otherwise throw an error.\n     *\n     * #### Notes\n     * As an exception to the queueing, if we are sending a kernel_info_request\n     * message while we think the kernel is restarting, we send the message\n     * immediately without queueing. This is so that we can trigger a message\n     * back, which will then clear the kernel restarting state.\n     */\n    _sendMessage(msg, queue = true) {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        // If we have a kernel_info_request and we are restarting, send the\n        // kernel_info_request immediately if we can, and if not throw an error so\n        // we can retry later. We do this because we must get at least one message\n        // from the kernel to reset the kernel session (thus clearing the restart\n        // status sentinel).\n        if (this._kernelSession === RESTARTING_KERNEL_SESSION &&\n            KernelMessage.isInfoRequestMsg(msg)) {\n            if (this.connectionStatus === 'connected') {\n                this._ws.send(serialize.serialize(msg));\n                return;\n            }\n            else {\n                throw new Error('Could not send message: status is not connected');\n            }\n        }\n        // If there are pending messages, add to the queue so we keep messages in order\n        if (queue && this._pendingMessages.length > 0) {\n            this._pendingMessages.push(msg);\n            return;\n        }\n        // Send if the ws allows it, otherwise queue the message.\n        if (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION) {\n            this._ws.send(serialize.serialize(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(msg);\n        }\n        else {\n            throw new Error('Could not send message');\n        }\n    }\n    /**\n     * Interrupt a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the kernel status is `Dead` or if the\n     * request fails or the response is invalid.\n     */\n    async interrupt() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        return restapi.interruptKernel(this.id, this.serverSettings);\n    }\n    /**\n     * Request a kernel restart.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels)\n     * and validates the response model.\n     *\n     * Any existing Future or Comm objects are cleared once the kernel has\n     * actually be restarted.\n     *\n     * The promise is fulfilled on a valid server response (after the kernel restarts)\n     * and rejected otherwise.\n     *\n     * It is assumed that the API call does not mutate the kernel id or name.\n     *\n     * The promise will be rejected if the request fails or the response is\n     * invalid.\n     */\n    async restart() {\n        if (this.status === 'dead') {\n            throw new Error('Kernel is dead');\n        }\n        this._updateStatus('restarting');\n        this._clearKernelState();\n        this._kernelSession = RESTARTING_KERNEL_SESSION;\n        await restapi.restartKernel(this.id, this.serverSettings);\n        // Reconnect to the kernel to address cases where kernel ports\n        // have changed during the restart.\n        await this.reconnect();\n    }\n    /**\n     * Reconnect to a kernel.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a kernel, and will sever any\n     * existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Kernel connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Shutdown a kernel.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n     *\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     *\n     * On a valid response, disposes this kernel connection.\n     *\n     * If the kernel is already `dead`, disposes this kernel connection without\n     * a server request.\n     */\n    async shutdown() {\n        if (this.status !== 'dead') {\n            await restapi.shutdownKernel(this.id, this.serverSettings);\n        }\n        this.handleShutdown();\n    }\n    /**\n     * Handles a kernel shutdown.\n     *\n     * #### Notes\n     * This method should be called if we know from outside information that a\n     * kernel is dead (for example, we cannot find the kernel model on the\n     * server).\n     */\n    handleShutdown() {\n        this._updateStatus('dead');\n        this.dispose();\n    }\n    /**\n     * Send a `kernel_info_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n     *\n     * Fulfills with the `kernel_info_response` content when the shell reply is\n     * received and validated.\n     */\n    async requestKernelInfo() {\n        const msg = KernelMessage.createMessage({\n            msgType: 'kernel_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: {}\n        });\n        let reply;\n        try {\n            reply = (await Private.handleShellMessage(this, msg));\n        }\n        catch (e) {\n            // If we rejected because the future was disposed, ignore and return.\n            if (this.isDisposed) {\n                return;\n            }\n            else {\n                throw e;\n            }\n        }\n        this._errorIfDisposed();\n        if (!reply) {\n            return;\n        }\n        // Kernels sometimes do not include a status field on kernel_info_reply\n        // messages, so set a default for now.\n        // See https://github.com/jupyterlab/jupyterlab/issues/6760\n        if (reply.content.status === undefined) {\n            reply.content.status = 'ok';\n        }\n        if (reply.content.status !== 'ok') {\n            this._info.reject('Kernel info reply errored');\n            return reply;\n        }\n        this._info.resolve(reply.content);\n        this._kernelSession = reply.header.session;\n        return reply;\n    }\n    /**\n     * Send a `complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n     *\n     * Fulfills with the `complete_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `inspect_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n     *\n     * Fulfills with the `inspect_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestInspect(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'inspect_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `history_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n     *\n     * Fulfills with the `history_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestHistory(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'history_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `execute_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n     *\n     * Future `onReply` is called with the `execute_reply` content when the\n     * shell reply is received and validated. The future will resolve when\n     * this message is received and the `idle` iopub status is received.\n     * The future will also be disposed at this point unless `disposeOnDone`\n     * is specified and `false`, in which case it is up to the caller to dispose\n     * of the future.\n     *\n     * **See also:** [[IExecuteReply]]\n     */\n    requestExecute(content, disposeOnDone = true, metadata) {\n        const defaults = {\n            silent: false,\n            store_history: true,\n            user_expressions: {},\n            allow_stdin: true,\n            stop_on_error: false\n        };\n        const msg = KernelMessage.createMessage({\n            msgType: 'execute_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content: Object.assign(Object.assign({}, defaults), content),\n            metadata\n        });\n        return this.sendShellMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an experimental `debug_request` message.\n     *\n     * @hidden\n     *\n     * #### Notes\n     * Debug messages are experimental messages that are not in the official\n     * kernel message specification. As such, this function is *NOT* considered\n     * part of the public API, and may change without notice.\n     */\n    requestDebug(content, disposeOnDone = true) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'debug_request',\n            channel: 'control',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return this.sendControlMessage(msg, true, disposeOnDone);\n    }\n    /**\n     * Send an `is_complete_request` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n     *\n     * Fulfills with the `is_complete_response` content when the shell reply is\n     * received and validated.\n     */\n    requestIsComplete(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'is_complete_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send a `comm_info_request` message.\n     *\n     * #### Notes\n     * Fulfills with the `comm_info_reply` content when the shell reply is\n     * received and validated.\n     */\n    requestCommInfo(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'comm_info_request',\n            channel: 'shell',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        return Private.handleShellMessage(this, msg);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * #### Notes\n     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n     */\n    sendInputReply(content) {\n        const msg = KernelMessage.createMessage({\n            msgType: 'input_reply',\n            channel: 'stdin',\n            username: this._username,\n            session: this._clientId,\n            content\n        });\n        this._sendMessage(msg);\n        this._anyMessage.emit({ msg, direction: 'send' });\n    }\n    /**\n     * Create a new comm.\n     *\n     * #### Notes\n     * If a client-side comm already exists with the given commId, an error is thrown.\n     * If the kernel does not handle comms, an error is thrown.\n     */\n    createComm(targetName, commId = coreutils_2.UUID.uuid4()) {\n        if (!this.handleComms) {\n            throw new Error('Comms are disabled on this kernel connection');\n        }\n        if (this._comms.has(commId)) {\n            throw new Error('Comm is already created');\n        }\n        const comm = new comm_1.CommHandler(targetName, commId, this, () => {\n            this._unregisterComm(commId);\n        });\n        this._comms.set(commId, comm);\n        return comm;\n    }\n    /**\n     * Check if a comm exists.\n     */\n    hasComm(commId) {\n        return this._comms.has(commId);\n    }\n    /**\n     * Register a comm target handler.\n     *\n     * @param targetName - The name of the comm target.\n     *\n     * @param callback - The callback invoked for a comm open message.\n     *\n     * @returns A disposable used to unregister the comm target.\n     *\n     * #### Notes\n     * Only one comm target can be registered to a target name at a time, an\n     * existing callback for the same target name will be overridden.  A registered\n     * comm target handler will take precedence over a comm which specifies a\n     * `target_module`.\n     *\n     * If the callback returns a promise, kernel message processing will pause\n     * until the returned promise is fulfilled.\n     */\n    registerCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        this._targetRegistry[targetName] = callback;\n    }\n    /**\n     * Remove a comm target handler.\n     *\n     * @param targetName - The name of the comm target to remove.\n     *\n     * @param callback - The callback to remove.\n     *\n     * #### Notes\n     * The comm target is only removed if the callback argument matches.\n     */\n    removeCommTarget(targetName, callback) {\n        if (!this.handleComms) {\n            return;\n        }\n        if (!this.isDisposed && this._targetRegistry[targetName] === callback) {\n            delete this._targetRegistry[targetName];\n        }\n    }\n    /**\n     * Register an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook will intercept.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages that are responses to a given message id.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     *\n     * See also [[IFuture.registerMessageHook]].\n     */\n    registerMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.registerMessageHook(hook);\n        }\n    }\n    /**\n     * Remove an IOPub message hook.\n     *\n     * @param msg_id - The parent_header message id the hook intercepted.\n     *\n     * @param hook - The callback invoked for the message.\n     *\n     */\n    removeMessageHook(msgId, hook) {\n        var _a;\n        const future = (_a = this._futures) === null || _a === void 0 ? void 0 : _a.get(msgId);\n        if (future) {\n            future.removeMessageHook(hook);\n        }\n    }\n    /**\n     * Handle a message with a display id.\n     *\n     * @returns Whether the message was handled.\n     */\n    async _handleDisplayId(displayId, msg) {\n        var _a, _b;\n        const msgId = msg.parent_header.msg_id;\n        let parentIds = this._displayIdToParentIds.get(displayId);\n        if (parentIds) {\n            // We've seen it before, update existing outputs with same display_id\n            // by handling display_data as update_display_data.\n            const updateMsg = {\n                header: coreutils_2.JSONExt.deepCopy(msg.header),\n                parent_header: coreutils_2.JSONExt.deepCopy(msg.parent_header),\n                metadata: coreutils_2.JSONExt.deepCopy(msg.metadata),\n                content: coreutils_2.JSONExt.deepCopy(msg.content),\n                channel: msg.channel,\n                buffers: msg.buffers ? msg.buffers.slice() : []\n            };\n            updateMsg.header.msg_type = 'update_display_data';\n            await Promise.all(parentIds.map(async (parentId) => {\n                const future = this._futures && this._futures.get(parentId);\n                if (future) {\n                    await future.handleMsg(updateMsg);\n                }\n            }));\n        }\n        // We're done here if it's update_display.\n        if (msg.header.msg_type === 'update_display_data') {\n            // It's an update, don't proceed to the normal display.\n            return true;\n        }\n        // Regular display_data with id, record it for future updating\n        // in _displayIdToParentIds for future lookup.\n        parentIds = (_a = this._displayIdToParentIds.get(displayId)) !== null && _a !== void 0 ? _a : [];\n        if (parentIds.indexOf(msgId) === -1) {\n            parentIds.push(msgId);\n        }\n        this._displayIdToParentIds.set(displayId, parentIds);\n        // Add to our map of display ids for this message.\n        const displayIds = (_b = this._msgIdToDisplayIds.get(msgId)) !== null && _b !== void 0 ? _b : [];\n        if (displayIds.indexOf(msgId) === -1) {\n            displayIds.push(msgId);\n        }\n        this._msgIdToDisplayIds.set(msgId, displayIds);\n        // Let the message propagate to the intended recipient.\n        return false;\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Handle status iopub messages from the kernel.\n     */\n    _updateStatus(status) {\n        if (this._status === status || this._status === 'dead') {\n            return;\n        }\n        this._status = status;\n        Private.logKernelStatus(this);\n        this._statusChanged.emit(status);\n        if (status === 'dead') {\n            this.dispose();\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._kernelSession !== RESTARTING_KERNEL_SESSION &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Clear the internal state.\n     */\n    _clearKernelState() {\n        this._kernelSession = '';\n        this._pendingMessages = [];\n        this._futures.forEach(future => {\n            future.dispose();\n        });\n        this._comms.forEach(comm => {\n            comm.dispose();\n        });\n        this._msgChain = Promise.resolve();\n        this._futures = new Map();\n        this._comms = new Map();\n        this._displayIdToParentIds.clear();\n        this._msgIdToDisplayIds.clear();\n    }\n    /**\n     * Check to make sure it is okay to proceed to handle a message.\n     *\n     * #### Notes\n     * Because we handle messages asynchronously, before a message is handled the\n     * kernel might be disposed or restarted (and have a different session id).\n     * This function throws an error in each of these cases. This is meant to be\n     * called at the start of an asynchronous message handler to cancel message\n     * processing if the message no longer is valid.\n     */\n    _assertCurrentMessage(msg) {\n        this._errorIfDisposed();\n        if (msg.header.session !== this._kernelSession) {\n            throw new Error(`Canceling handling of old message: ${msg.header.msg_type}`);\n        }\n    }\n    /**\n     * Handle a `comm_open` kernel message.\n     */\n    async _handleCommOpen(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = new comm_1.CommHandler(content.target_name, content.comm_id, this, () => {\n            this._unregisterComm(content.comm_id);\n        });\n        this._comms.set(content.comm_id, comm);\n        try {\n            const target = await Private.loadObject(content.target_name, content.target_module, this._targetRegistry);\n            await target(comm, msg);\n        }\n        catch (e) {\n            // Close the comm asynchronously. We cannot block message processing on\n            // kernel messages to wait for another kernel message.\n            comm.close();\n            console.error('Exception opening new comm');\n            throw e;\n        }\n    }\n    /**\n     * Handle 'comm_close' kernel message.\n     */\n    async _handleCommClose(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            console.error('Comm not found for comm id ' + content.comm_id);\n            return;\n        }\n        this._unregisterComm(comm.commId);\n        const onClose = comm.onClose;\n        if (onClose) {\n            // tslint:disable-next-line:await-promise\n            await onClose(msg);\n        }\n        comm.dispose();\n    }\n    /**\n     * Handle a 'comm_msg' kernel message.\n     */\n    async _handleCommMsg(msg) {\n        this._assertCurrentMessage(msg);\n        const content = msg.content;\n        const comm = this._comms.get(content.comm_id);\n        if (!comm) {\n            return;\n        }\n        const onMsg = comm.onMsg;\n        if (onMsg) {\n            // tslint:disable-next-line:await-promise\n            await onMsg(msg);\n        }\n    }\n    /**\n     * Unregister a comm instance.\n     */\n    _unregisterComm(commId) {\n        this._comms.delete(commId);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', reset any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        if (this.status !== 'dead') {\n            if (connectionStatus === 'connected') {\n                let restarting = this._kernelSession === RESTARTING_KERNEL_SESSION;\n                // Send a kernel info request to make sure we send at least one\n                // message to get kernel status back. Always request kernel info\n                // first, to get kernel status back and ensure iopub is fully\n                // established. If we are restarting, this message will skip the queue\n                // and be sent immediately.\n                let p = this.requestKernelInfo();\n                // Send any pending messages after the kernelInfo resolves, or after a\n                // timeout as a failsafe.\n                let sendPendingCalled = false;\n                let sendPendingOnce = () => {\n                    if (sendPendingCalled) {\n                        return;\n                    }\n                    sendPendingCalled = true;\n                    if (restarting && this._kernelSession === RESTARTING_KERNEL_SESSION) {\n                        // We were restarting and a message didn't arrive to set the\n                        // session, but we just assume the restart succeeded and send any\n                        // pending messages.\n                        // FIXME: it would be better to retry the kernel_info_request here\n                        this._kernelSession = '';\n                    }\n                    clearTimeout(timeoutHandle);\n                    if (this._pendingMessages.length > 0) {\n                        this._sendPending();\n                    }\n                };\n                void p.then(sendPendingOnce);\n                // FIXME: if sent while zmq subscriptions are not established,\n                // kernelInfo may not resolve, so use a timeout to ensure we don't hang forever.\n                // It may be preferable to retry kernelInfo rather than give up after one timeout.\n                let timeoutHandle = setTimeout(sendPendingOnce, KERNEL_INFO_TIMEOUT);\n            }\n            else {\n                // If the connection is down, then we do not know what is happening\n                // with the kernel, so set the status to unknown.\n                this._updateStatus('unknown');\n            }\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    async _handleMessage(msg) {\n        var _a, _b;\n        let handled = false;\n        // Check to see if we have a display_id we need to reroute.\n        if (msg.parent_header &&\n            msg.channel === 'iopub' &&\n            (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isUpdateDisplayDataMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg))) {\n            // display_data messages may re-route based on their display_id.\n            const transient = ((_a = msg.content.transient) !== null && _a !== void 0 ? _a : {});\n            const displayId = transient['display_id'];\n            if (displayId) {\n                handled = await this._handleDisplayId(displayId, msg);\n                // The await above may make this message out of date, so check again.\n                this._assertCurrentMessage(msg);\n            }\n        }\n        if (!handled && msg.parent_header) {\n            const parentHeader = msg.parent_header;\n            const future = (_b = this._futures) === null || _b === void 0 ? void 0 : _b.get(parentHeader.msg_id);\n            if (future) {\n                await future.handleMsg(msg);\n                this._assertCurrentMessage(msg);\n            }\n            else {\n                // If the message was sent by us and was not iopub, it is orphaned.\n                const owned = parentHeader.session === this.clientId;\n                if (msg.channel !== 'iopub' && owned) {\n                    this._unhandledMessage.emit(msg);\n                }\n            }\n        }\n        if (msg.channel === 'iopub') {\n            switch (msg.header.msg_type) {\n                case 'status': {\n                    // Updating the status is synchronous, and we call no async user code\n                    const executionState = msg.content\n                        .execution_state;\n                    if (executionState === 'restarting') {\n                        // The kernel has been auto-restarted by the server. After\n                        // processing for this message is completely done, we want to\n                        // handle this restart, so we don't await, but instead schedule\n                        // the work as a microtask (i.e., in a promise resolution). We\n                        // schedule this here so that it comes before any microtasks that\n                        // might be scheduled in the status signal emission below.\n                        void Promise.resolve().then(async () => {\n                            this._updateStatus('autorestarting');\n                            this._clearKernelState();\n                            // We must reconnect since the kernel connection information may have\n                            // changed, and the server only refreshes its zmq connection when a new\n                            // websocket is opened.\n                            await this.reconnect();\n                        });\n                    }\n                    this._updateStatus(executionState);\n                    break;\n                }\n                case 'comm_open':\n                    if (this.handleComms) {\n                        await this._handleCommOpen(msg);\n                    }\n                    break;\n                case 'comm_msg':\n                    if (this.handleComms) {\n                        await this._handleCommMsg(msg);\n                    }\n                    break;\n                case 'comm_close':\n                    if (this.handleComms) {\n                        await this._handleCommClose(msg);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            // If the message was a status dead message, we might have disposed ourselves.\n            if (!this.isDisposed) {\n                this._assertCurrentMessage(msg);\n                // the message wouldn't be emitted if we were disposed anyway.\n                this._iopubMessage.emit(msg);\n            }\n        }\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attempts should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.warn(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Kernel connection is disposed');\n        }\n    }\n}\nexports.KernelConnection = KernelConnection;\n/**\n * A private namespace for the Kernel.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Log the current kernel status.\n     */\n    function logKernelStatus(kernel) {\n        switch (kernel.status) {\n            case 'idle':\n            case 'busy':\n            case 'unknown':\n                return;\n            default:\n                console.debug(`Kernel: ${kernel.status} (${kernel.id})`);\n                break;\n        }\n    }\n    Private.logKernelStatus = logKernelStatus;\n    /**\n     * Send a kernel message to the kernel and resolve the reply message.\n     */\n    async function handleShellMessage(kernel, msg) {\n        const future = kernel.sendShellMessage(msg, true);\n        return future.done;\n    }\n    Private.handleShellMessage = handleShellMessage;\n    /**\n     * Try to load an object from a module or a registry.\n     *\n     * Try to load an object from a module asynchronously if a module\n     * is specified, otherwise tries to load an object from the global\n     * registry, if the global registry is provided.\n     *\n     * #### Notes\n     * Loading a module uses requirejs.\n     */\n    function loadObject(name, moduleName, registry) {\n        return new Promise((resolve, reject) => {\n            // Try loading the module using require.js\n            if (moduleName) {\n                if (typeof requirejs === 'undefined') {\n                    throw new Error('requirejs not found');\n                }\n                requirejs([moduleName], (mod) => {\n                    if (mod[name] === void 0) {\n                        const msg = `Object '${name}' not found in module '${moduleName}'`;\n                        reject(new Error(msg));\n                    }\n                    else {\n                        resolve(mod[name]);\n                    }\n                }, reject);\n            }\n            else {\n                if (registry === null || registry === void 0 ? void 0 : registry[name]) {\n                    resolve(registry[name]);\n                }\n                else {\n                    reject(new Error(`Object '${name}' not found in registry`));\n                }\n            }\n        });\n    }\n    Private.loadObject = loadObject;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelShellFutureHandler = exports.KernelControlFutureHandler = exports.KernelFutureHandler = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst disposable_1 = require(\"@lumino/disposable\");\nconst KernelMessage = __importStar(require(\"./messages\"));\n/**\n * Implementation of a kernel future.\n *\n * If a reply is expected, the Future is considered done when both a `reply`\n * message and an `idle` iopub status message have been received.  Otherwise, it\n * is considered done when the `idle` status is received.\n *\n */\nclass KernelFutureHandler extends disposable_1.DisposableDelegate {\n    /**\n     * Construct a new KernelFutureHandler.\n     */\n    constructor(cb, msg, expectReply, disposeOnDone, kernel) {\n        super(cb);\n        this._status = 0;\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._done = new coreutils_1.PromiseDelegate();\n        this._hooks = new Private.HookList();\n        this._disposeOnDone = true;\n        this._msg = msg;\n        if (!expectReply) {\n            this._setFlag(Private.KernelFutureFlag.GotReply);\n        }\n        this._disposeOnDone = disposeOnDone;\n        this._kernel = kernel;\n    }\n    /**\n     * Get the original outgoing message.\n     */\n    get msg() {\n        return this._msg;\n    }\n    /**\n     * A promise that resolves when the future is done.\n     */\n    get done() {\n        return this._done.promise;\n    }\n    /**\n     * Get the reply handler.\n     */\n    get onReply() {\n        return this._reply;\n    }\n    /**\n     * Set the reply handler.\n     */\n    set onReply(cb) {\n        this._reply = cb;\n    }\n    /**\n     * Get the iopub handler.\n     */\n    get onIOPub() {\n        return this._iopub;\n    }\n    /**\n     * Set the iopub handler.\n     */\n    set onIOPub(cb) {\n        this._iopub = cb;\n    }\n    /**\n     * Get the stdin handler.\n     */\n    get onStdin() {\n        return this._stdin;\n    }\n    /**\n     * Set the stdin handler.\n     */\n    set onStdin(cb) {\n        this._stdin = cb;\n    }\n    /**\n     * Register hook for IOPub messages.\n     *\n     * @param hook - The callback invoked for an IOPub message.\n     *\n     * #### Notes\n     * The IOPub hook system allows you to preempt the handlers for IOPub\n     * messages handled by the future.\n     *\n     * The most recently registered hook is run first. A hook can return a\n     * boolean or a promise to a boolean, in which case all kernel message\n     * processing pauses until the promise is fulfilled. If a hook return value\n     * resolves to false, any later hooks will not run and the function will\n     * return a promise resolving to false. If a hook throws an error, the error\n     * is logged to the console and the next hook is run. If a hook is\n     * registered during the hook processing, it will not run until the next\n     * message. If a hook is removed during the hook processing, it will be\n     * deactivated immediately.\n     */\n    registerMessageHook(hook) {\n        if (this.isDisposed) {\n            throw new Error('Kernel future is disposed');\n        }\n        this._hooks.add(hook);\n    }\n    /**\n     * Remove a hook for IOPub messages.\n     *\n     * @param hook - The hook to remove.\n     *\n     * #### Notes\n     * If a hook is removed during the hook processing, it will be deactivated immediately.\n     */\n    removeMessageHook(hook) {\n        if (this.isDisposed) {\n            return;\n        }\n        this._hooks.remove(hook);\n    }\n    /**\n     * Send an `input_reply` message.\n     */\n    sendInputReply(content) {\n        this._kernel.sendInputReply(content);\n    }\n    /**\n     * Dispose and unregister the future.\n     */\n    dispose() {\n        this._stdin = Private.noOp;\n        this._iopub = Private.noOp;\n        this._reply = Private.noOp;\n        this._hooks = null;\n        if (!this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            // TODO: Uncomment the following logging code, and check for any tests that trigger it.\n            // let status = [];\n            // if (!this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            //   status.push('idle');\n            // }\n            // if (!this._testFlag(Private.KernelFutureFlag.GotReply)) {\n            //   status.push('reply');\n            // }\n            // console.warn(\n            //   `*************** DISPOSED BEFORE DONE: K${this._kernel.id.slice(\n            //     0,\n            //     6\n            //   )} M${this._msg.header.msg_id.slice(0, 6)} missing ${status.join(' ')}`\n            // );\n            // Reject the `done` promise, but catch its error here in case no one else\n            // is waiting for the promise to resolve. This prevents the error from\n            // being displayed in the console, but does not prevent it from being\n            // caught by a client who is waiting for it.\n            this._done.promise.catch(() => {\n                /* no-op */\n            });\n            this._done.reject(new Error(`Canceled future for ${this.msg.header.msg_type} message before replies were done`));\n        }\n        super.dispose();\n    }\n    /**\n     * Handle an incoming kernel message.\n     */\n    async handleMsg(msg) {\n        switch (msg.channel) {\n            case 'control':\n            case 'shell':\n                if (msg.channel === this.msg.channel &&\n                    msg.parent_header.msg_id === this.msg.header.msg_id) {\n                    await this._handleReply(msg);\n                }\n                break;\n            case 'stdin':\n                await this._handleStdin(msg);\n                break;\n            case 'iopub':\n                await this._handleIOPub(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    async _handleReply(msg) {\n        const reply = this._reply;\n        if (reply) {\n            // tslint:disable-next-line:await-promise\n            await reply(msg);\n        }\n        this._replyMsg = msg;\n        this._setFlag(Private.KernelFutureFlag.GotReply);\n        if (this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n            this._handleDone();\n        }\n    }\n    async _handleStdin(msg) {\n        const stdin = this._stdin;\n        if (stdin) {\n            // tslint:disable-next-line:await-promise\n            await stdin(msg);\n        }\n    }\n    async _handleIOPub(msg) {\n        const process = await this._hooks.process(msg);\n        const iopub = this._iopub;\n        if (process && iopub) {\n            // tslint:disable-next-line:await-promise\n            await iopub(msg);\n        }\n        if (KernelMessage.isStatusMsg(msg) &&\n            msg.content.execution_state === 'idle') {\n            this._setFlag(Private.KernelFutureFlag.GotIdle);\n            if (this._testFlag(Private.KernelFutureFlag.GotReply)) {\n                this._handleDone();\n            }\n        }\n    }\n    _handleDone() {\n        if (this._testFlag(Private.KernelFutureFlag.IsDone)) {\n            return;\n        }\n        this._setFlag(Private.KernelFutureFlag.IsDone);\n        this._done.resolve(this._replyMsg);\n        if (this._disposeOnDone) {\n            this.dispose();\n        }\n    }\n    /**\n     * Test whether the given future flag is set.\n     */\n    _testFlag(flag) {\n        // tslint:disable-next-line\n        return (this._status & flag) !== 0;\n    }\n    /**\n     * Set the given future flag.\n     */\n    _setFlag(flag) {\n        // tslint:disable-next-line\n        this._status |= flag;\n    }\n}\nexports.KernelFutureHandler = KernelFutureHandler;\nclass KernelControlFutureHandler extends KernelFutureHandler {\n}\nexports.KernelControlFutureHandler = KernelControlFutureHandler;\nclass KernelShellFutureHandler extends KernelFutureHandler {\n}\nexports.KernelShellFutureHandler = KernelShellFutureHandler;\nvar Private;\n(function (Private) {\n    /**\n     * A no-op function.\n     */\n    Private.noOp = () => {\n        /* no-op */\n    };\n    /**\n     * Defer a computation.\n     *\n     * #### NOTES\n     * We can't just use requestAnimationFrame since it is not available in node.\n     * This implementation is from Phosphor:\n     * https://github.com/phosphorjs/phosphor/blob/e88e4321289bb1198f3098e7bda40736501f2ed8/tests/test-messaging/src/index.spec.ts#L63\n     */\n    const defer = (() => {\n        const ok = typeof requestAnimationFrame === 'function';\n        return ok ? requestAnimationFrame : setImmediate;\n    })();\n    class HookList {\n        constructor() {\n            this._hooks = [];\n        }\n        /**\n         * Register a hook.\n         *\n         * @param hook - The callback to register.\n         */\n        add(hook) {\n            this.remove(hook);\n            this._hooks.push(hook);\n        }\n        /**\n         * Remove a hook, if it exists in the hook list.\n         *\n         * @param hook - The callback to remove.\n         */\n        remove(hook) {\n            const index = this._hooks.indexOf(hook);\n            if (index >= 0) {\n                this._hooks[index] = null;\n                this._scheduleCompact();\n            }\n        }\n        /**\n         * Process a message through the hooks.\n         *\n         * @returns a promise resolving to false if any hook resolved as false,\n         * otherwise true\n         *\n         * #### Notes\n         * The most recently registered hook is run first. A hook can return a\n         * boolean or a promise to a boolean, in which case processing pauses until\n         * the promise is fulfilled. If a hook return value resolves to false, any\n         * later hooks will not run and the function will return a promise resolving\n         * to false. If a hook throws an error, the error is logged to the console\n         * and the next hook is run. If a hook is registered during the hook\n         * processing, it will not run until the next message. If a hook is removed\n         * during the hook processing, it will be deactivated immediately.\n         */\n        async process(msg) {\n            // Wait until we can start a new process run.\n            await this._processing;\n            // Start the next process run.\n            const processing = new coreutils_1.PromiseDelegate();\n            this._processing = processing.promise;\n            let continueHandling;\n            // Call the end hook (most recently-added) first. Starting at the end also\n            // guarantees that hooks added during the processing will not be run in\n            // this process run.\n            for (let i = this._hooks.length - 1; i >= 0; i--) {\n                const hook = this._hooks[i];\n                // If the hook has been removed, continue to the next one.\n                if (hook === null) {\n                    continue;\n                }\n                // Execute the hook and log any errors.\n                try {\n                    // tslint:disable-next-line:await-promise\n                    continueHandling = await hook(msg);\n                }\n                catch (err) {\n                    continueHandling = true;\n                    console.error(err);\n                }\n                // If the hook resolved to false, stop processing and return.\n                if (continueHandling === false) {\n                    processing.resolve(undefined);\n                    return false;\n                }\n            }\n            // All hooks returned true (or errored out), so return true.\n            processing.resolve(undefined);\n            return true;\n        }\n        /**\n         * Schedule a cleanup of the list, removing any hooks that have been nulled out.\n         */\n        _scheduleCompact() {\n            if (!this._compactScheduled) {\n                this._compactScheduled = true;\n                // Schedule a compaction in between processing runs. We do the\n                // scheduling in an animation frame to rate-limit our compactions. If we\n                // need to compact more frequently, we can change this to directly\n                // schedule the compaction.\n                defer(() => {\n                    this._processing = this._processing.then(() => {\n                        this._compactScheduled = false;\n                        this._compact();\n                    });\n                });\n            }\n        }\n        /**\n         * Compact the list, removing any nulls.\n         */\n        _compact() {\n            let numNulls = 0;\n            for (let i = 0, len = this._hooks.length; i < len; i++) {\n                const hook = this._hooks[i];\n                if (this._hooks[i] === null) {\n                    numNulls++;\n                }\n                else {\n                    this._hooks[i - numNulls] = hook;\n                }\n            }\n            this._hooks.length -= numNulls;\n        }\n    }\n    Private.HookList = HookList;\n    /**\n     * Bit flags for the kernel future state.\n     */\n    let KernelFutureFlag;\n    (function (KernelFutureFlag) {\n        KernelFutureFlag[KernelFutureFlag[\"GotReply\"] = 1] = \"GotReply\";\n        KernelFutureFlag[KernelFutureFlag[\"GotIdle\"] = 2] = \"GotIdle\";\n        KernelFutureFlag[KernelFutureFlag[\"IsDone\"] = 4] = \"IsDone\";\n        KernelFutureFlag[KernelFutureFlag[\"DisposeOnDone\"] = 8] = \"DisposeOnDone\";\n    })(KernelFutureFlag = Private.KernelFutureFlag || (Private.KernelFutureFlag = {}));\n})(Private || (Private = {}));\n//# sourceMappingURL=future.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelAPI = exports.KernelMessage = exports.Kernel = void 0;\n// Namespace some of our modules for convenience and backwards compatibility.\nconst Kernel = __importStar(require(\"./kernel\"));\nexports.Kernel = Kernel;\nconst KernelMessage = __importStar(require(\"./messages\"));\nexports.KernelMessage = KernelMessage;\nconst KernelAPI = __importStar(require(\"./restapi\"));\nexports.KernelAPI = KernelAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernel.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * An implementation of a kernel manager.\n */\nclass KernelManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._kernelConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Start model and specs polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running kernels change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._kernelConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Connect to an existing kernel.\n     *\n     * @returns The new kernel connection.\n     *\n     * #### Notes\n     * This will use the manager's server settings and ignore any server\n     * settings passed in the options.\n     */\n    connectTo(options) {\n        var _a;\n        const { id } = options.model;\n        let handleComms = (_a = options.handleComms) !== null && _a !== void 0 ? _a : true;\n        // By default, handle comms only if no other kernel connection is.\n        if (options.handleComms === undefined) {\n            for (const kc of this._kernelConnections) {\n                if (kc.id === id && kc.handleComms) {\n                    handleComms = false;\n                    break;\n                }\n            }\n        }\n        const kernelConnection = new default_1.KernelConnection(Object.assign(Object.assign({ handleComms }, options), { serverSettings: this.serverSettings }));\n        this._onStarted(kernelConnection);\n        if (!this._models.has(id)) {\n            // We trust the user to connect to an existing kernel, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return kernelConnection;\n    }\n    /**\n     * Create an iterator over the most recent running kernels.\n     *\n     * @returns A new iterator over the running kernels.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running kernels.\n     *\n     * @returns A promise that resolves when the running list has been refreshed.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new kernel.\n     *\n     * @param createOptions - The kernel creation options\n     *\n     * @param connectOptions - The kernel connection options\n     *\n     * @returns A promise that resolves with the kernel connection.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be always be used.\n     */\n    async startNew(createOptions = {}, connectOptions = {}) {\n        const model = await restapi_1.startNew(createOptions, this.serverSettings);\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownKernel(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all kernels.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownKernel(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a kernel by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves with the kernel's model.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return existing.name === x.name;\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        // For any kernel connection to a kernel that doesn't exist, notify it of\n        // the shutdown.\n        this._kernelConnections.forEach(kc => {\n            if (!this._models.has(kc.id)) {\n                kc.handleShutdown();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a kernel starting.\n     */\n    _onStarted(kernelConnection) {\n        this._kernelConnections.add(kernelConnection);\n        kernelConnection.statusChanged.connect(this._onStatusChanged, this);\n        kernelConnection.disposed.connect(this._onDisposed, this);\n    }\n    _onDisposed(kernelConnection) {\n        this._kernelConnections.delete(kernelConnection);\n        // A dispose emission could mean the server session is deleted, or that\n        // the kernel JS object is disposed and the kernel still exists on the\n        // server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onStatusChanged(kernelConnection, status) {\n        if (status === 'dead') {\n            // We asynchronously update our list of kernels, which asynchronously\n            // will dispose them. We do not want to immediately dispose them because\n            // there may be other signal handlers that want to be called.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n    }\n}\nexports.KernelManager = KernelManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isInputReplyMsg = exports.isInputRequestMsg = exports.isDebugReplyMsg = exports.isDebugRequestMsg = exports.isExecuteReplyMsg = exports.isInfoRequestMsg = exports.isCommMsgMsg = exports.isCommCloseMsg = exports.isCommOpenMsg = exports.isDebugEventMsg = exports.isClearOutputMsg = exports.isStatusMsg = exports.isErrorMsg = exports.isExecuteResultMsg = exports.isExecuteInputMsg = exports.isUpdateDisplayDataMsg = exports.isDisplayDataMsg = exports.isStreamMsg = exports.createMessage = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nfunction createMessage(options) {\n    var _a, _b, _c, _d, _e;\n    return {\n        buffers: (_a = options.buffers) !== null && _a !== void 0 ? _a : [],\n        channel: options.channel,\n        content: options.content,\n        header: {\n            date: new Date().toISOString(),\n            msg_id: (_b = options.msgId) !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4(),\n            msg_type: options.msgType,\n            session: options.session,\n            username: (_c = options.username) !== null && _c !== void 0 ? _c : '',\n            version: '5.2'\n        },\n        metadata: (_d = options.metadata) !== null && _d !== void 0 ? _d : {},\n        parent_header: (_e = options.parentHeader) !== null && _e !== void 0 ? _e : {}\n    };\n}\nexports.createMessage = createMessage;\n/**\n * Test whether a kernel message is a `'stream'` message.\n */\nfunction isStreamMsg(msg) {\n    return msg.header.msg_type === 'stream';\n}\nexports.isStreamMsg = isStreamMsg;\n/**\n * Test whether a kernel message is an `'display_data'` message.\n */\nfunction isDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'display_data';\n}\nexports.isDisplayDataMsg = isDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'update_display_data'` message.\n */\nfunction isUpdateDisplayDataMsg(msg) {\n    return msg.header.msg_type === 'update_display_data';\n}\nexports.isUpdateDisplayDataMsg = isUpdateDisplayDataMsg;\n/**\n * Test whether a kernel message is an `'execute_input'` message.\n */\nfunction isExecuteInputMsg(msg) {\n    return msg.header.msg_type === 'execute_input';\n}\nexports.isExecuteInputMsg = isExecuteInputMsg;\n/**\n * Test whether a kernel message is an `'execute_result'` message.\n */\nfunction isExecuteResultMsg(msg) {\n    return msg.header.msg_type === 'execute_result';\n}\nexports.isExecuteResultMsg = isExecuteResultMsg;\n/**\n * Test whether a kernel message is an `'error'` message.\n */\nfunction isErrorMsg(msg) {\n    return msg.header.msg_type === 'error';\n}\nexports.isErrorMsg = isErrorMsg;\n/**\n * Test whether a kernel message is a `'status'` message.\n */\nfunction isStatusMsg(msg) {\n    return msg.header.msg_type === 'status';\n}\nexports.isStatusMsg = isStatusMsg;\n/**\n * Test whether a kernel message is a `'clear_output'` message.\n */\nfunction isClearOutputMsg(msg) {\n    return msg.header.msg_type === 'clear_output';\n}\nexports.isClearOutputMsg = isClearOutputMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_event'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugEventMsg(msg) {\n    return msg.header.msg_type === 'debug_event';\n}\nexports.isDebugEventMsg = isDebugEventMsg;\n/**\n * Test whether a kernel message is a `'comm_open'` message.\n */\nfunction isCommOpenMsg(msg) {\n    return msg.header.msg_type === 'comm_open';\n}\nexports.isCommOpenMsg = isCommOpenMsg;\n/**\n * Test whether a kernel message is a `'comm_close'` message.\n */\nfunction isCommCloseMsg(msg) {\n    return msg.header.msg_type === 'comm_close';\n}\nexports.isCommCloseMsg = isCommCloseMsg;\n/**\n * Test whether a kernel message is a `'comm_msg'` message.\n */\nfunction isCommMsgMsg(msg) {\n    return msg.header.msg_type === 'comm_msg';\n}\nexports.isCommMsgMsg = isCommMsgMsg;\n/**\n * Test whether a kernel message is a `'kernel_info_request'` message.\n */\nfunction isInfoRequestMsg(msg) {\n    return msg.header.msg_type === 'kernel_info_request';\n}\nexports.isInfoRequestMsg = isInfoRequestMsg;\n/**\n * Test whether a kernel message is an `'execute_reply'` message.\n */\nfunction isExecuteReplyMsg(msg) {\n    return msg.header.msg_type === 'execute_reply';\n}\nexports.isExecuteReplyMsg = isExecuteReplyMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_request'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugRequestMsg(msg) {\n    return msg.header.msg_type === 'debug_request';\n}\nexports.isDebugRequestMsg = isDebugRequestMsg;\n/**\n * Test whether a kernel message is an experimental `'debug_reply'` message.\n *\n * @hidden\n *\n * #### Notes\n * Debug messages are experimental messages that are not in the official\n * kernel message specification. As such, this is *NOT* considered\n * part of the public API, and may change without notice.\n */\nfunction isDebugReplyMsg(msg) {\n    return msg.header.msg_type === 'debug_reply';\n}\nexports.isDebugReplyMsg = isDebugReplyMsg;\n/**\n * Test whether a kernel message is an `'input_request'` message.\n */\nfunction isInputRequestMsg(msg) {\n    return msg.header.msg_type === 'input_request';\n}\nexports.isInputRequestMsg = isInputRequestMsg;\n/**\n * Test whether a kernel message is an `'input_reply'` message.\n */\nfunction isInputReplyMsg(msg) {\n    return msg.header.msg_type === 'input_reply';\n}\nexports.isInputReplyMsg = isInputReplyMsg;\n//# sourceMappingURL=messages.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKernelModel = exports.shutdownKernel = exports.interruptKernel = exports.restartKernel = exports.startNew = exports.listRunning = exports.KERNEL_SERVICE_URL = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the kernel service.\n */\nexports.KERNEL_SERVICE_URL = 'api/kernels';\n/**\n * Fetch the running kernels.\n *\n * @param settings - The optional server settings.\n *\n * @returns A promise that resolves with the list of running kernels.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModels(data);\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Start a new kernel.\n *\n * @param options - The options used to create the kernel.\n *\n * @returns A promise that resolves with a kernel connection object.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function startNew(options = {}, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startNew = startNew;\n/**\n * Restart a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response (and thus after a restart) and rejected otherwise.\n */\nasync function restartKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'restart');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n}\nexports.restartKernel = restartKernel;\n/**\n * Interrupt a kernel.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function interruptKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id), 'interrupt');\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.interruptKernel = interruptKernel;\n/**\n * Shut down a kernel.\n *\n * @param id - The id of the running kernel.\n *\n * @param settings - The server settings for the request.\n *\n * @returns A promise that resolves when the kernel is shut down.\n *\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function shutdownKernel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const msg = `The kernel \"${id}\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownKernel = shutdownKernel;\n/**\n * Get a full kernel model from the server by kernel id string.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n *\n * The promise is fulfilled on a valid response and rejected otherwise.\n */\nasync function getKernelModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.KERNEL_SERVICE_URL, encodeURIComponent(id));\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status === 404) {\n        return undefined;\n    }\n    else if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getKernelModel = getKernelModel;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = exports.deserialize = void 0;\n/**\n * Deserialize and return the unpacked message.\n *\n * #### Notes\n * Handles JSON blob strings and binary messages.\n */\nfunction deserialize(data) {\n    let value;\n    if (typeof data === 'string') {\n        value = JSON.parse(data);\n    }\n    else {\n        value = deserializeBinary(data);\n    }\n    return value;\n}\nexports.deserialize = deserialize;\n/**\n * Serialize a kernel message for transport.\n *\n * #### Notes\n * If there is binary content, an `ArrayBuffer` is returned,\n * otherwise the message is converted to a JSON string.\n */\nfunction serialize(msg) {\n    var _a;\n    let value;\n    if ((_a = msg.buffers) === null || _a === void 0 ? void 0 : _a.length) {\n        value = serializeBinary(msg);\n    }\n    else {\n        value = JSON.stringify(msg);\n    }\n    return value;\n}\nexports.serialize = serialize;\n/**\n * Deserialize a binary message to a Kernel Message.\n */\nfunction deserializeBinary(buf) {\n    const data = new DataView(buf);\n    // read the header: 1 + nbufs 32b integers\n    const nbufs = data.getUint32(0);\n    const offsets = [];\n    if (nbufs < 2) {\n        throw new Error('Invalid incoming Kernel Message');\n    }\n    for (let i = 1; i <= nbufs; i++) {\n        offsets.push(data.getUint32(i * 4));\n    }\n    const jsonBytes = new Uint8Array(buf.slice(offsets[0], offsets[1]));\n    const msg = JSON.parse(new TextDecoder('utf8').decode(jsonBytes));\n    // the remaining chunks are stored as DataViews in msg.buffers\n    msg.buffers = [];\n    for (let i = 1; i < nbufs; i++) {\n        const start = offsets[i];\n        const stop = offsets[i + 1] || buf.byteLength;\n        msg.buffers.push(new DataView(buf.slice(start, stop)));\n    }\n    return msg;\n}\n/**\n * Implement the binary serialization protocol.\n *\n * Serialize Kernel message to ArrayBuffer.\n */\nfunction serializeBinary(msg) {\n    const offsets = [];\n    const buffers = [];\n    const encoder = new TextEncoder();\n    let origBuffers = [];\n    if (msg.buffers !== undefined) {\n        origBuffers = msg.buffers;\n        delete msg['buffers'];\n    }\n    const jsonUtf8 = encoder.encode(JSON.stringify(msg));\n    buffers.push(jsonUtf8.buffer);\n    for (let i = 0; i < origBuffers.length; i++) {\n        // msg.buffers elements could be either views or ArrayBuffers\n        // buffers elements are ArrayBuffers\n        const b = origBuffers[i];\n        buffers.push(ArrayBuffer.isView(b) ? b.buffer : b);\n    }\n    const nbufs = buffers.length;\n    offsets.push(4 * (nbufs + 1));\n    for (let i = 0; i + 1 < buffers.length; i++) {\n        offsets.push(offsets[offsets.length - 1] + buffers[i].byteLength);\n    }\n    const msgBuf = new Uint8Array(offsets[offsets.length - 1] + buffers[buffers.length - 1].byteLength);\n    // use DataView.setUint32 for network byte-order\n    const view = new DataView(msgBuf.buffer);\n    // write nbufs to first 4 bytes\n    view.setUint32(0, nbufs);\n    // write offsets to next 4 * nbufs bytes\n    for (let i = 0; i < offsets.length; i++) {\n        view.setUint32(4 * (i + 1), offsets[i]);\n    }\n    // write all the buffers at their respective offsets\n    for (let i = 0; i < buffers.length; i++) {\n        msgBuf.set(new Uint8Array(buffers[i]), offsets[i]);\n    }\n    return msgBuf.buffer;\n}\n//# sourceMappingURL=serialize.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateModels = exports.validateModel = exports.validateMessage = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Required fields for `IKernelHeader`.\n */\nconst HEADER_FIELDS = ['username', 'version', 'session', 'msg_id', 'msg_type'];\n/**\n * Required fields and types for contents of various types of `kernel.IMessage`\n * messages on the iopub channel.\n */\nconst IOPUB_CONTENT_FIELDS = {\n    stream: { name: 'string', text: 'string' },\n    display_data: { data: 'object', metadata: 'object' },\n    execute_input: { code: 'string', execution_count: 'number' },\n    execute_result: {\n        execution_count: 'number',\n        data: 'object',\n        metadata: 'object'\n    },\n    error: { ename: 'string', evalue: 'string', traceback: 'object' },\n    status: {\n        execution_state: [\n            'string',\n            ['starting', 'idle', 'busy', 'restarting', 'dead']\n        ]\n    },\n    clear_output: { wait: 'boolean' },\n    comm_open: { comm_id: 'string', target_name: 'string', data: 'object' },\n    comm_msg: { comm_id: 'string', data: 'object' },\n    comm_close: { comm_id: 'string' },\n    shutdown_reply: { restart: 'boolean' } // Emitted by the IPython kernel.\n};\n/**\n * Validate the header of a kernel message.\n */\nfunction validateHeader(header) {\n    for (let i = 0; i < HEADER_FIELDS.length; i++) {\n        validate_1.validateProperty(header, HEADER_FIELDS[i], 'string');\n    }\n}\n/**\n * Validate a kernel message object.\n */\nfunction validateMessage(msg) {\n    validate_1.validateProperty(msg, 'metadata', 'object');\n    validate_1.validateProperty(msg, 'content', 'object');\n    validate_1.validateProperty(msg, 'channel', 'string');\n    validateHeader(msg.header);\n    if (msg.channel === 'iopub') {\n        validateIOPubContent(msg);\n    }\n}\nexports.validateMessage = validateMessage;\n/**\n * Validate content an kernel message on the iopub channel.\n */\nfunction validateIOPubContent(msg) {\n    if (msg.channel === 'iopub') {\n        const fields = IOPUB_CONTENT_FIELDS[msg.header.msg_type];\n        // Check for unknown message type.\n        if (fields === undefined) {\n            return;\n        }\n        const names = Object.keys(fields);\n        const content = msg.content;\n        for (let i = 0; i < names.length; i++) {\n            let args = fields[names[i]];\n            if (!Array.isArray(args)) {\n                args = [args];\n            }\n            validate_1.validateProperty(content, names[i], ...args);\n        }\n    }\n}\n/**\n * Validate a `Kernel.IModel` object.\n */\nfunction validateModel(model) {\n    validate_1.validateProperty(model, 'name', 'string');\n    validate_1.validateProperty(model, 'id', 'string');\n}\nexports.validateModel = validateModel;\n/**\n * Validate an array of `IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid kernel list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelSpecAPI = exports.KernelSpec = void 0;\nconst KernelSpec = __importStar(require(\"./kernelspec\"));\nexports.KernelSpec = KernelSpec;\nconst KernelSpecAPI = __importStar(require(\"./restapi\"));\nexports.KernelSpecAPI = KernelSpecAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=kernelspec.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KernelSpecManager = void 0;\nconst coreutils_1 = require(\"@lumino/coreutils\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst restapi = __importStar(require(\"./restapi\"));\nconst basemanager_1 = require(\"../basemanager\");\n/**\n * An implementation of a kernel spec manager.\n */\nclass KernelSpecManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new kernel spec manager.\n     *\n     * @param options - The default options for kernel.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._specs = null;\n        this._specsChanged = new signaling_1.Signal(this);\n        // Initialize internal data.\n        this._ready = Promise.all([this.requestSpecs()])\n            .then(_ => undefined)\n            .catch(_ => undefined)\n            .then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isReady = true;\n        });\n        this._pollSpecs = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestSpecs(),\n            frequency: {\n                interval: 61 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:KernelSpecManager#specs`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        void this.ready.then(() => {\n            void this._pollSpecs.start();\n        });\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * Get the most recently fetched kernel specs.\n     */\n    get specs() {\n        return this._specs;\n    }\n    /**\n     * A signal emitted when the specs change.\n     */\n    get specsChanged() {\n        return this._specsChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        this._pollSpecs.dispose();\n        super.dispose();\n    }\n    /**\n     * Force a refresh of the specs from the server.\n     *\n     * @returns A promise that resolves when the specs are fetched.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshSpecs() {\n        await this._pollSpecs.refresh();\n        await this._pollSpecs.tick;\n    }\n    /**\n     * Execute a request to the server to poll specs and update state.\n     */\n    async requestSpecs() {\n        const specs = await restapi.getSpecs(this.serverSettings);\n        if (this.isDisposed) {\n            return;\n        }\n        if (!coreutils_1.JSONExt.deepEqual(specs, this._specs)) {\n            this._specs = specs;\n            this._specsChanged.emit(specs);\n        }\n    }\n}\nexports.KernelSpecManager = KernelSpecManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSpecs = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst validate_1 = require(\"./validate\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\n/**\n * The url for the kernelspec service.\n */\nconst KERNELSPEC_SERVICE_URL = 'api/kernelspecs';\n/**\n * Fetch all of the kernel specs.\n *\n * @param settings - The optional server settings.\n * @param useCache - Whether to use the cache. If false, always request.\n *\n * @returns A promise that resolves with the kernel specs.\n *\n * #### Notes\n * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).\n */\nasync function getSpecs(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, KERNELSPEC_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    return validate_1.validateSpecModels(data);\n}\nexports.getSpecs = getSpecs;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSpecModels = exports.validateSpecModel = void 0;\nconst validate_1 = require(\"../validate\");\n/**\n * Validate a server kernelspec model to a client side model.\n */\nfunction validateSpecModel(data) {\n    const spec = data.spec;\n    if (!spec) {\n        throw new Error('Invalid kernel spec');\n    }\n    validate_1.validateProperty(data, 'name', 'string');\n    validate_1.validateProperty(data, 'resources', 'object');\n    validate_1.validateProperty(spec, 'language', 'string');\n    validate_1.validateProperty(spec, 'display_name', 'string');\n    validate_1.validateProperty(spec, 'argv', 'array');\n    let metadata = null;\n    if (spec.hasOwnProperty('metadata')) {\n        validate_1.validateProperty(spec, 'metadata', 'object');\n        metadata = spec.metadata;\n    }\n    let env = null;\n    if (spec.hasOwnProperty('env')) {\n        validate_1.validateProperty(spec, 'env', 'object');\n        env = spec.env;\n    }\n    return {\n        name: data.name,\n        resources: data.resources,\n        language: spec.language,\n        display_name: spec.display_name,\n        argv: spec.argv,\n        metadata,\n        env\n    };\n}\nexports.validateSpecModel = validateSpecModel;\n/**\n * Validate a `Kernel.ISpecModels` object.\n */\nfunction validateSpecModels(data) {\n    if (!data.hasOwnProperty('kernelspecs')) {\n        throw new Error('No kernelspecs found');\n    }\n    let keys = Object.keys(data.kernelspecs);\n    const kernelspecs = Object.create(null);\n    let defaultSpec = data.default;\n    for (let i = 0; i < keys.length; i++) {\n        const ks = data.kernelspecs[keys[i]];\n        try {\n            kernelspecs[keys[i]] = validateSpecModel(ks);\n        }\n        catch (err) {\n            // Remove the errant kernel spec.\n            console.warn(`Removing errant kernel spec: ${keys[i]}`);\n        }\n    }\n    keys = Object.keys(kernelspecs);\n    if (!keys.length) {\n        throw new Error('No valid kernelspecs found');\n    }\n    if (!defaultSpec ||\n        typeof defaultSpec !== 'string' ||\n        !(defaultSpec in kernelspecs)) {\n        defaultSpec = keys[0];\n        console.warn(`Default kernel not found, using '${keys[0]}'`);\n    }\n    return {\n        default: defaultSpec,\n        kernelspecs\n    };\n}\nexports.validateSpecModels = validateSpecModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceManager = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst builder_1 = require(\"./builder\");\nconst nbconvert_1 = require(\"./nbconvert\");\nconst contents_1 = require(\"./contents\");\nconst kernelspec_1 = require(\"./kernelspec\");\nconst session_1 = require(\"./session\");\nconst setting_1 = require(\"./setting\");\nconst terminal_1 = require(\"./terminal\");\nconst serverconnection_1 = require(\"./serverconnection\");\nconst workspace_1 = require(\"./workspace\");\nconst kernel_1 = require(\"./kernel\");\n/**\n * A Jupyter services manager.\n */\nclass ServiceManager {\n    /**\n     * Construct a new services provider.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._isDisposed = false;\n        this._connectionFailure = new signaling_1.Signal(this);\n        this._isReady = false;\n        const defaultDrive = options.defaultDrive;\n        const serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n        const standby = (_b = options.standby) !== null && _b !== void 0 ? _b : 'when-hidden';\n        const normalized = { defaultDrive, serverSettings, standby };\n        const kernelManager = new kernel_1.KernelManager(normalized);\n        this.serverSettings = serverSettings;\n        this.contents = new contents_1.ContentsManager(normalized);\n        this.sessions = new session_1.SessionManager(Object.assign(Object.assign({}, normalized), { kernelManager: kernelManager }));\n        this.settings = new setting_1.SettingManager(normalized);\n        this.terminals = new terminal_1.TerminalManager(normalized);\n        this.builder = new builder_1.BuildManager(normalized);\n        this.workspaces = new workspace_1.WorkspaceManager(normalized);\n        this.nbconvert = new nbconvert_1.NbConvertManager(normalized);\n        this.kernelspecs = new kernelspec_1.KernelSpecManager(normalized);\n        // Relay connection failures from the service managers that poll\n        // the server for current information.\n        this.kernelspecs.connectionFailure.connect(this._onConnectionFailure, this);\n        this.sessions.connectionFailure.connect(this._onConnectionFailure, this);\n        this.terminals.connectionFailure.connect(this._onConnectionFailure, this);\n        const readyList = [this.sessions.ready, this.kernelspecs.ready];\n        if (this.terminals.isAvailable()) {\n            readyList.push(this.terminals.ready);\n        }\n        this._readyPromise = Promise.all(readyList).then(() => {\n            this._isReady = true;\n        });\n    }\n    /**\n     * A signal emitted when there is a connection failure with the kernel.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Test whether the service manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        signaling_1.Signal.clearData(this);\n        this.contents.dispose();\n        this.sessions.dispose();\n        this.terminals.dispose();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._readyPromise;\n    }\n    _onConnectionFailure(sender, err) {\n        this._connectionFailure.emit(err);\n    }\n}\nexports.ServiceManager = ServiceManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NbConvertManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab nbconvert service.\n */\nconst NBCONVERT_SETTINGS_URL = 'api/nbconvert';\n/**\n * The nbconvert API service manager.\n */\nclass NbConvertManager {\n    /**\n     * Create a new nbconvert manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Get whether the application should be built.\n     */\n    async getExportFormats() {\n        const base = this.serverSettings.baseUrl;\n        const url = coreutils_1.URLExt.join(base, NBCONVERT_SETTINGS_URL);\n        const { serverSettings } = this;\n        const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n            throw err;\n        }\n        const data = await response.json();\n        const exportList = {};\n        const keys = Object.keys(data);\n        keys.forEach(function (key) {\n            const mimeType = data[key].output_mimetype;\n            exportList[key] = { output_mimetype: mimeType };\n        });\n        return exportList;\n    }\n}\nexports.NbConvertManager = NbConvertManager;\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nlet FETCH;\nlet HEADERS;\nlet REQUEST;\nlet WEBSOCKET;\nif (typeof window === 'undefined') {\n    // Mangle the require statements so it does not get picked up in the\n    // browser assets.\n    /* tslint:disable */\n    const fetchMod = require('node-fetch');\n    FETCH = (_a = global.fetch) !== null && _a !== void 0 ? _a : fetchMod;\n    REQUEST = (_b = global.Request) !== null && _b !== void 0 ? _b : fetchMod.Request;\n    HEADERS = (_c = global.Headers) !== null && _c !== void 0 ? _c : fetchMod.Headers;\n    WEBSOCKET = require('ws');\n    /* tslint:enable */\n}\nelse {\n    FETCH = fetch;\n    REQUEST = Request;\n    HEADERS = Headers;\n    WEBSOCKET = WebSocket;\n}\n/**\n * The namespace for ServerConnection functions.\n *\n * #### Notes\n * This is only intended to manage communication with the Jupyter server.\n *\n * The default values can be used in a JupyterLab or Jupyter Notebook context.\n *\n * We use `token` authentication if available, falling back on an XSRF\n * cookie if one has been provided on the `document`.\n *\n * A content type of `'application/json'` is added when using authentication\n * and there is no body data to allow the server to prevent malicious forms.\n */\nvar ServerConnection;\n(function (ServerConnection) {\n    /**\n     * Create a settings object given a subset of options.\n     *\n     * @param options - An optional partial set of options.\n     *\n     * @returns The full settings object.\n     */\n    function makeSettings(options) {\n        return Private.makeSettings(options);\n    }\n    ServerConnection.makeSettings = makeSettings;\n    /**\n     * Make an request to the notebook server.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The initialization options for the request.\n     *\n     * @param settings - The server settings to apply to the request.\n     *\n     * @returns a Promise that resolves with the response.\n     *\n     * @throws If the url of the request is not a notebook server url.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings are\n     * merged with `settings.init`, with `init` taking precedence.\n     * The headers in the two objects are not merged.\n     * If there is no body data, we set the content type to `application/json`\n     * because it is required by the Notebook server.\n     */\n    function makeRequest(url, init, settings) {\n        return Private.handleRequest(url, init, settings);\n    }\n    ServerConnection.makeRequest = makeRequest;\n    /**\n     * A wrapped error for a fetch response.\n     */\n    class ResponseError extends Error {\n        /**\n         * Create a new response error.\n         */\n        constructor(response, message = `Invalid response: ${response.status} ${response.statusText}`, traceback = '') {\n            super(message);\n            this.response = response;\n            this.traceback = traceback;\n        }\n        /**\n         * Create a ResponseError from a response, handling the traceback and message\n         * as appropriate.\n         *\n         * @param response The response object.\n         *\n         * @returns A promise that resolves with a `ResponseError` object.\n         */\n        static async create(response) {\n            try {\n                const data = await response.json();\n                if (data['traceback']) {\n                    console.error(data['traceback']);\n                }\n                if (data['message']) {\n                    return new ResponseError(response, data['message']);\n                }\n                return new ResponseError(response);\n            }\n            catch (e) {\n                console.debug(e);\n                return new ResponseError(response);\n            }\n        }\n    }\n    ServerConnection.ResponseError = ResponseError;\n    /**\n     * A wrapped error for a network error.\n     */\n    class NetworkError extends TypeError {\n        /**\n         * Create a new network error.\n         */\n        constructor(original) {\n            super(original.message);\n            this.stack = original.stack;\n        }\n    }\n    ServerConnection.NetworkError = NetworkError;\n})(ServerConnection = exports.ServerConnection || (exports.ServerConnection = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle the server connection settings, returning a new value.\n     */\n    function makeSettings(options = {}) {\n        const pageBaseUrl = coreutils_1.PageConfig.getBaseUrl();\n        const pageWsUrl = coreutils_1.PageConfig.getWsUrl();\n        const baseUrl = coreutils_1.URLExt.normalize(options.baseUrl) || pageBaseUrl;\n        let wsUrl = options.wsUrl;\n        // Prefer the default wsUrl if we are using the default baseUrl.\n        if (!wsUrl && baseUrl === pageBaseUrl) {\n            wsUrl = pageWsUrl;\n        }\n        // Otherwise convert the baseUrl to a wsUrl if possible.\n        if (!wsUrl && baseUrl.indexOf('http') === 0) {\n            wsUrl = 'ws' + baseUrl.slice(4);\n        }\n        // Otherwise fall back on the default wsUrl.\n        wsUrl = wsUrl !== null && wsUrl !== void 0 ? wsUrl : pageWsUrl;\n        return Object.assign(Object.assign({ init: { cache: 'no-store', credentials: 'same-origin' }, fetch: FETCH, Headers: HEADERS, Request: REQUEST, WebSocket: WEBSOCKET, token: coreutils_1.PageConfig.getToken(), appUrl: coreutils_1.PageConfig.getOption('appUrl'), appendToken: typeof window === 'undefined' ||\n                process.env.JEST_WORKER_ID !== undefined ||\n                coreutils_1.URLExt.getHostName(pageBaseUrl) !== coreutils_1.URLExt.getHostName(wsUrl) }, options), { baseUrl,\n            wsUrl });\n    }\n    Private.makeSettings = makeSettings;\n    /**\n     * Handle a request.\n     *\n     * @param url - The url for the request.\n     *\n     * @param init - The overrides for the request init.\n     *\n     * @param settings - The settings object for the request.\n     *\n     * #### Notes\n     * The `url` must start with `settings.baseUrl`.  The `init` settings\n     * take precedence over `settings.init`.\n     */\n    function handleRequest(url, init, settings) {\n        var _a;\n        // Handle notebook server requests.\n        if (url.indexOf(settings.baseUrl) !== 0) {\n            throw new Error('Can only be used for notebook server requests');\n        }\n        // Use explicit cache buster when `no-store` is set since\n        // not all browsers use it properly.\n        const cache = (_a = init.cache) !== null && _a !== void 0 ? _a : settings.init.cache;\n        if (cache === 'no-store') {\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n            url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n        }\n        const request = new settings.Request(url, Object.assign(Object.assign({}, settings.init), init));\n        // Handle authentication. Authentication can be overdetermined by\n        // settings token and XSRF token.\n        let authenticated = false;\n        if (settings.token) {\n            authenticated = true;\n            request.headers.append('Authorization', `token ${settings.token}`);\n        }\n        if (typeof document !== 'undefined' && (document === null || document === void 0 ? void 0 : document.cookie)) {\n            const xsrfToken = getCookie('_xsrf');\n            if (xsrfToken !== undefined) {\n                authenticated = true;\n                request.headers.append('X-XSRFToken', xsrfToken);\n            }\n        }\n        // Set the content type if there is no given data and we are\n        // using an authenticated connection.\n        if (!request.headers.has('Content-Type') && authenticated) {\n            request.headers.set('Content-Type', 'application/json');\n        }\n        // Use `call` to avoid a `TypeError` in the browser.\n        return settings.fetch.call(null, request).catch((e) => {\n            // Convert the TypeError into a more specific error.\n            throw new ServerConnection.NetworkError(e);\n        });\n        // TODO: *this* is probably where we need a system-wide connectionFailure\n        // signal we can hook into.\n    }\n    Private.handleRequest = handleRequest;\n    /**\n     * Get a cookie from the document.\n     */\n    function getCookie(name) {\n        // From http://www.tornadoweb.org/en/stable/guide/security.html\n        const matches = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n        return matches === null || matches === void 0 ? void 0 : matches[1];\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=serverconnection.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionConnection = void 0;\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\nconst coreutils_1 = require(\"@lumino/coreutils\");\n/**\n * Session object for accessing the session REST api. The session\n * should be used to start kernels and then shut them down -- for\n * all other kernel operations, the kernel object should be used.\n */\nclass SessionConnection {\n    /**\n     * Construct a new session.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        this._id = '';\n        this._path = '';\n        this._name = '';\n        this._type = '';\n        this._kernel = null;\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._kernelChanged = new signaling_1.Signal(this);\n        this._statusChanged = new signaling_1.Signal(this);\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._iopubMessage = new signaling_1.Signal(this);\n        this._unhandledMessage = new signaling_1.Signal(this);\n        this._anyMessage = new signaling_1.Signal(this);\n        this._propertyChanged = new signaling_1.Signal(this);\n        this._id = options.model.id;\n        this._name = options.model.name;\n        this._path = options.model.path;\n        this._type = options.model.type;\n        this._username = (_a = options.username) !== null && _a !== void 0 ? _a : '';\n        this._clientId = (_b = options.clientId) !== null && _b !== void 0 ? _b : coreutils_1.UUID.uuid4();\n        this._connectToKernel = options.connectToKernel;\n        this._kernelConnectionOptions = (_c = options.kernelConnectionOptions) !== null && _c !== void 0 ? _c : {};\n        this.serverSettings = (_d = options.serverSettings) !== null && _d !== void 0 ? _d : __1.ServerConnection.makeSettings();\n        this.setupKernel(options.model.kernel);\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when the kernel changes.\n     */\n    get kernelChanged() {\n        return this._kernelChanged;\n    }\n    /**\n     * A signal proxied from the connection about the kernel status.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about the connection status.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * A signal proxied from the kernel about iopub kernel messages.\n     */\n    get iopubMessage() {\n        return this._iopubMessage;\n    }\n    /**\n     * A signal proxied from the kernel for an unhandled kernel message.\n     */\n    get unhandledMessage() {\n        return this._unhandledMessage;\n    }\n    /**\n     * A signal proxied from the kernel emitted for any kernel message.\n     *\n     * #### Notes\n     * The behavior is undefined if the message is modified during message\n     * handling. As such, it should be treated as read-only.\n     */\n    get anyMessage() {\n        return this._anyMessage;\n    }\n    /**\n     * A signal emitted when a session property changes.\n     */\n    get propertyChanged() {\n        return this._propertyChanged;\n    }\n    /**\n     * Get the session id.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the session kernel connection object.\n     *\n     * #### Notes\n     * This is a read-only property, and can be altered by [changeKernel].\n     */\n    get kernel() {\n        return this._kernel;\n    }\n    /**\n     * Get the session path.\n     */\n    get path() {\n        return this._path;\n    }\n    /**\n     * Get the session type.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Get the session name.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model associated with the session.\n     */\n    get model() {\n        return {\n            id: this.id,\n            kernel: this.kernel && { id: this.kernel.id, name: this.kernel.name },\n            path: this._path,\n            type: this._type,\n            name: this._name\n        };\n    }\n    /**\n     * Test whether the session has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Update the session based on a session model from the server.\n     *\n     * #### Notes\n     * This only updates this session connection instance. Use `setPath`,\n     * `setName`, `setType`, and `changeKernel` to change the session values on\n     * the server.\n     */\n    update(model) {\n        const oldModel = this.model;\n        this._path = model.path;\n        this._name = model.name;\n        this._type = model.type;\n        if ((this._kernel === null && model.kernel !== null) ||\n            (this._kernel !== null && model.kernel === null) ||\n            (this._kernel !== null &&\n                model.kernel !== null &&\n                this._kernel.id !== model.kernel.id)) {\n            if (this._kernel !== null) {\n                this._kernel.dispose();\n            }\n            const oldValue = this._kernel || null;\n            this.setupKernel(model.kernel);\n            const newValue = this._kernel || null;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        this._handleModelChange(oldModel);\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        if (this._kernel) {\n            this._kernel.dispose();\n            const oldValue = this._kernel;\n            this._kernel = null;\n            const newValue = this._kernel;\n            this._kernelChanged.emit({ name: 'kernel', oldValue, newValue });\n        }\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Change the session path.\n     *\n     * @param path - The new session path.\n     *\n     * @returns A promise that resolves when the session has renamed.\n     *\n     * #### Notes\n     * This uses the Jupyter REST API, and the response is validated.\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    async setPath(path) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ path });\n    }\n    /**\n     * Change the session name.\n     */\n    async setName(name) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ name });\n    }\n    /**\n     * Change the session type.\n     */\n    async setType(type) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ type });\n    }\n    /**\n     * Change the kernel.\n     *\n     * @params options - The name or id of the new kernel.\n     *\n     * #### Notes\n     * This shuts down the existing kernel and creates a new kernel,\n     * keeping the existing session ID and session path.\n     */\n    async changeKernel(options) {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await this._patch({ kernel: options });\n        return this.kernel;\n    }\n    /**\n     * Kill the kernel and shutdown the session.\n     *\n     * @returns - The promise fulfilled on a valid response from the server.\n     *\n     * #### Notes\n     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n     * Disposes of the session and emits a [sessionDied] signal on success.\n     */\n    async shutdown() {\n        if (this.isDisposed) {\n            throw new Error('Session is disposed');\n        }\n        await restapi_1.shutdownSession(this.id, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Create a new kernel connection and connect to its signals.\n     *\n     * #### Notes\n     * This method is not meant to be subclassed.\n     */\n    setupKernel(model) {\n        if (model === null) {\n            this._kernel = null;\n            return;\n        }\n        const kc = this._connectToKernel(Object.assign(Object.assign({}, this._kernelConnectionOptions), { model, username: this._username, clientId: this._clientId, serverSettings: this.serverSettings }));\n        this._kernel = kc;\n        kc.statusChanged.connect(this.onKernelStatus, this);\n        kc.connectionStatusChanged.connect(this.onKernelConnectionStatus, this);\n        kc.unhandledMessage.connect(this.onUnhandledMessage, this);\n        kc.iopubMessage.connect(this.onIOPubMessage, this);\n        kc.anyMessage.connect(this.onAnyMessage, this);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelStatus(sender, state) {\n        this._statusChanged.emit(state);\n    }\n    /**\n     * Handle to changes in the Kernel status.\n     */\n    onKernelConnectionStatus(sender, state) {\n        this._connectionStatusChanged.emit(state);\n    }\n    /**\n     * Handle iopub kernel messages.\n     */\n    onIOPubMessage(sender, msg) {\n        this._iopubMessage.emit(msg);\n    }\n    /**\n     * Handle unhandled kernel messages.\n     */\n    onUnhandledMessage(sender, msg) {\n        this._unhandledMessage.emit(msg);\n    }\n    /**\n     * Handle any kernel messages.\n     */\n    onAnyMessage(sender, args) {\n        this._anyMessage.emit(args);\n    }\n    /**\n     * Send a PATCH to the server, updating the session path or the kernel.\n     */\n    async _patch(body) {\n        const model = await restapi_1.updateSession(Object.assign(Object.assign({}, body), { id: this._id }), this.serverSettings);\n        this.update(model);\n        return model;\n    }\n    /**\n     * Handle a change to the model.\n     */\n    _handleModelChange(oldModel) {\n        if (oldModel.name !== this._name) {\n            this._propertyChanged.emit('name');\n        }\n        if (oldModel.type !== this._type) {\n            this._propertyChanged.emit('type');\n        }\n        if (oldModel.path !== this._path) {\n            this._propertyChanged.emit('path');\n        }\n    }\n}\nexports.SessionConnection = SessionConnection;\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionAPI = exports.Session = void 0;\nconst Session = __importStar(require(\"./session\"));\nexports.Session = Session;\nconst SessionAPI = __importStar(require(\"./restapi\"));\nexports.SessionAPI = SessionAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SessionManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst serverconnection_1 = require(\"../serverconnection\");\nconst basemanager_1 = require(\"../basemanager\");\nconst default_1 = require(\"./default\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a session manager.\n */\nclass SessionManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new session manager.\n     *\n     * @param options - The default options for each session.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        this._sessionConnections = new Set();\n        this._models = new Map();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // We define these here so they bind `this` correctly\n        this._connectToKernel = (options) => {\n            return this._kernelManager.connectTo(options);\n        };\n        this._kernelManager = options.kernelManager;\n        // Start model polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:SessionManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            await this._kernelManager.ready;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running sessions change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._models.clear();\n        this._sessionConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /*\n     * Connect to a running session.  See also [[connectToSession]].\n     */\n    connectTo(options) {\n        const sessionConnection = new default_1.SessionConnection(Object.assign(Object.assign({}, options), { connectToKernel: this._connectToKernel, serverSettings: this.serverSettings }));\n        this._onStarted(sessionConnection);\n        if (!this._models.has(options.model.id)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return sessionConnection;\n    }\n    /**\n     * Create an iterator over the most recent running sessions.\n     *\n     * @returns A new iterator over the running sessions.\n     */\n    running() {\n        return algorithm_1.iter([...this._models.values()]);\n    }\n    /**\n     * Force a refresh of the running sessions.\n     *\n     * @returns A promise that with the list of running sessions.\n     *\n     * #### Notes\n     * This is not typically meant to be called by the user, since the\n     * manager maintains its own internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Start a new session.  See also [[startNewSession]].\n     *\n     * @param createOptions - Options for creating the session\n     *\n     * @param connectOptions - Options for connecting to the session\n     */\n    async startNew(createOptions, connectOptions = {}) {\n        const model = await restapi_1.startSession(createOptions, this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo(Object.assign(Object.assign({}, connectOptions), { model }));\n    }\n    /**\n     * Shut down a session by id.\n     */\n    async shutdown(id) {\n        await restapi_1.shutdownSession(id, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all sessions.\n     *\n     * @returns A promise that resolves when all of the kernels are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all([...this._models.keys()].map(id => restapi_1.shutdownSession(id, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Find a session associated with a path and stop it if it is the only session\n     * using that kernel.\n     *\n     * @param path - The path in question.\n     *\n     * @returns A promise that resolves when the relevant sessions are stopped.\n     */\n    async stopIfNeeded(path) {\n        try {\n            const sessions = await restapi_1.listRunning(this.serverSettings);\n            const matches = sessions.filter(value => value.path === path);\n            if (matches.length === 1) {\n                const id = matches[0].id;\n                await this.shutdown(id);\n            }\n        }\n        catch (error) {\n            /* Always succeed. */\n        }\n    }\n    /**\n     * Find a session by id.\n     */\n    async findById(id) {\n        if (this._models.has(id)) {\n            return this._models.get(id);\n        }\n        await this.refreshRunning();\n        return this._models.get(id);\n    }\n    /**\n     * Find a session by path.\n     */\n    async findByPath(path) {\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        await this.refreshRunning();\n        for (const m of this._models.values()) {\n            if (m.path === path) {\n                return m;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Execute a request to the server to poll running kernels and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof serverconnection_1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        if (this._models.size === models.length &&\n            algorithm_1.every(models, x => {\n                var _a, _b, _c, _d;\n                const existing = this._models.get(x.id);\n                if (!existing) {\n                    return false;\n                }\n                return (((_a = existing.kernel) === null || _a === void 0 ? void 0 : _a.id) === ((_b = x.kernel) === null || _b === void 0 ? void 0 : _b.id) &&\n                    ((_c = existing.kernel) === null || _c === void 0 ? void 0 : _c.name) === ((_d = x.kernel) === null || _d === void 0 ? void 0 : _d.name) &&\n                    existing.name === x.name &&\n                    existing.path === x.path &&\n                    existing.type === x.type);\n            })) {\n            // Identical models list (presuming models does not contain duplicate\n            // ids), so just return\n            return;\n        }\n        this._models = new Map(models.map(x => [x.id, x]));\n        this._sessionConnections.forEach(sc => {\n            if (this._models.has(sc.id)) {\n                sc.update(this._models.get(sc.id));\n            }\n            else {\n                sc.dispose();\n            }\n        });\n        this._runningChanged.emit(models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(sessionConnection) {\n        this._sessionConnections.add(sessionConnection);\n        sessionConnection.disposed.connect(this._onDisposed, this);\n        sessionConnection.propertyChanged.connect(this._onChanged, this);\n        sessionConnection.kernelChanged.connect(this._onChanged, this);\n    }\n    _onDisposed(sessionConnection) {\n        this._sessionConnections.delete(sessionConnection);\n        // A session termination emission could mean the server session is deleted,\n        // or that the session JS object is disposed and the session still exists on\n        // the server, so we refresh from the server to make sure we reflect the\n        // server state.\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    _onChanged() {\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n}\nexports.SessionManager = SessionManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateSession = exports.startSession = exports.getSessionModel = exports.shutdownSession = exports.getSessionUrl = exports.listRunning = exports.SESSION_SERVICE_URL = void 0;\nconst serverconnection_1 = require(\"../serverconnection\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst validate_1 = require(\"./validate\");\n/**\n * The url for the session service.\n */\nexports.SESSION_SERVICE_URL = 'api/sessions';\n/**\n * List the running sessions.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid Session list');\n    }\n    data.forEach(m => {\n        validate_1.updateLegacySessionModel(m);\n        validate_1.validateModel(m);\n    });\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Get a session url.\n */\nfunction getSessionUrl(baseUrl, id) {\n    return coreutils_1.URLExt.join(baseUrl, exports.SESSION_SERVICE_URL, id);\n}\nexports.getSessionUrl = getSessionUrl;\n/**\n * Shut down a session by id.\n */\nasync function shutdownSession(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    const url = getSessionUrl(settings.baseUrl, id);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message) !== null && _a !== void 0 ? _a : `The session \"${id}\"\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status === 410) {\n        throw new serverconnection_1.ServerConnection.ResponseError(response, 'The kernel was deleted but the session was not');\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownSession = shutdownSession;\n/**\n * Get a full session model from the server by session id string.\n */\nasync function getSessionModel(id, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, id);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.getSessionModel = getSessionModel;\n/**\n * Create a new session, or return an existing session if the session path\n * already exists.\n */\nasync function startSession(options, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.SESSION_SERVICE_URL);\n    const init = {\n        method: 'POST',\n        body: JSON.stringify(options)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 201) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.startSession = startSession;\n/**\n * Send a PATCH to the server, updating the session path or the kernel.\n */\nasync function updateSession(model, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    const url = getSessionUrl(settings.baseUrl, model.id);\n    const init = {\n        method: 'PATCH',\n        body: JSON.stringify(model)\n    };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    validate_1.updateLegacySessionModel(data);\n    validate_1.validateModel(data);\n    return data;\n}\nexports.updateSession = updateSession;\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=session.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateModels = exports.updateLegacySessionModel = exports.validateModel = void 0;\nconst validate_1 = require(\"../kernel/validate\");\nconst validate_2 = require(\"../validate\");\n/**\n * Validate an `Session.IModel` object.\n */\nfunction validateModel(data) {\n    validate_2.validateProperty(data, 'id', 'string');\n    validate_2.validateProperty(data, 'type', 'string');\n    validate_2.validateProperty(data, 'name', 'string');\n    validate_2.validateProperty(data, 'path', 'string');\n    validate_2.validateProperty(data, 'kernel', 'object');\n    validate_1.validateModel(data.kernel);\n}\nexports.validateModel = validateModel;\n/**\n * Update model from legacy session data.\n */\nfunction updateLegacySessionModel(data) {\n    if (data.path === undefined && data.notebook !== undefined) {\n        data.path = data.notebook.path;\n        data.type = 'notebook';\n        data.name = '';\n    }\n}\nexports.updateLegacySessionModel = updateLegacySessionModel;\n/**\n * Validate an array of `Session.IModel` objects.\n */\nfunction validateModels(models) {\n    if (!Array.isArray(models)) {\n        throw new Error('Invalid session list');\n    }\n    models.forEach(d => validateModel(d));\n}\nexports.validateModels = validateModels;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SettingManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab settings service.\n */\nconst SERVICE_SETTINGS_URL = 'api/settings';\n/**\n * The settings API service manager.\n */\nclass SettingManager extends statedb_1.DataConnector {\n    /**\n     * Create a new setting manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Fetch a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        if (!id) {\n            throw new Error('Plugin `id` parameter is required for settings fetch.');\n        }\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        // Assert what type the server response is returning.\n        return response.json();\n    }\n    /**\n     * Fetch the list of all plugin setting bundles.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        var _a, _b;\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            throw new ResponseError(response);\n        }\n        const json = await response.json();\n        const values = (_b = (_a = json === null || json === void 0 ? void 0 : json['settings']) === null || _a === void 0 ? void 0 : _a.map((plugin) => {\n            plugin.data = { composite: {}, user: {} };\n            return plugin;\n        })) !== null && _b !== void 0 ? _b : [];\n        const ids = values.map(plugin => plugin.id);\n        return { ids, values };\n    }\n    /**\n     * Save a plugin's settings.\n     *\n     * @param id - The plugin's ID.\n     *\n     * @param raw - The user setting values as a raw string of JSON with comments.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, raw) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        // NOTE: 'raw' is JSON5 (not valid JSON), so we encode it as a string in a valid JSON body\n        const init = { body: JSON.stringify({ raw }), method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            throw new ResponseError(response);\n        }\n    }\n}\nexports.SettingManager = SettingManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a plugin's settings.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_SETTINGS_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = WebSocket;\n//# sourceMappingURL=ws.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalConnection = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst restapi_1 = require(\"./restapi\");\n/**\n * An implementation of a terminal interface.\n */\nclass TerminalConnection {\n    /**\n     * Construct a new terminal session.\n     */\n    constructor(options) {\n        var _a;\n        /**\n         * Create the terminal websocket connection and add socket status handlers.\n         *\n         * #### Notes\n         * You are responsible for updating the connection status as appropriate.\n         */\n        this._createSocket = () => {\n            this._errorIfDisposed();\n            // Make sure the socket is clear\n            this._clearSocket();\n            // Update the connection status to reflect opening a new connection.\n            this._updateConnectionStatus('connecting');\n            const name = this._name;\n            const settings = this.serverSettings;\n            let url = coreutils_1.URLExt.join(settings.wsUrl, 'terminals', 'websocket', encodeURIComponent(name));\n            // If token authentication is in use.\n            const token = settings.token;\n            if (settings.appendToken && token !== '') {\n                url = url + `?token=${encodeURIComponent(token)}`;\n            }\n            this._ws = new settings.WebSocket(url);\n            this._ws.onmessage = this._onWSMessage;\n            this._ws.onclose = this._onWSClose;\n            this._ws.onerror = this._onWSClose;\n        };\n        // Websocket messages events are defined as variables to bind `this`\n        this._onWSMessage = (event) => {\n            if (this._isDisposed) {\n                return;\n            }\n            const data = JSON.parse(event.data);\n            // Handle a disconnect message.\n            if (data[0] === 'disconnect') {\n                this.dispose();\n            }\n            if (this._connectionStatus === 'connecting') {\n                // After reconnection, ignore all messages until a 'setup' message\n                // before we are truly connected. Setting the connection status to\n                // connected only then means that if we do not get a setup message\n                // before our retry timeout, we will delete the websocket and try again.\n                if (data[0] === 'setup') {\n                    this._updateConnectionStatus('connected');\n                }\n                return;\n            }\n            this._messageReceived.emit({\n                type: data[0],\n                content: data.slice(1)\n            });\n        };\n        this._onWSClose = (event) => {\n            console.warn(`Terminal websocket closed: ${event.code}`);\n            if (!this.isDisposed) {\n                this._reconnect();\n            }\n        };\n        this._connectionStatus = 'connecting';\n        this._connectionStatusChanged = new signaling_1.Signal(this);\n        this._isDisposed = false;\n        this._disposed = new signaling_1.Signal(this);\n        this._messageReceived = new signaling_1.Signal(this);\n        this._reconnectTimeout = null;\n        this._ws = null;\n        this._noOp = () => {\n            /* no-op */\n        };\n        this._reconnectLimit = 7;\n        this._reconnectAttempt = 0;\n        this._pendingMessages = [];\n        this._name = options.model.name;\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : __1.ServerConnection.makeSettings();\n        this._createSocket();\n    }\n    /**\n     * A signal emitted when the session is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * A signal emitted when a message is received from the server.\n     */\n    get messageReceived() {\n        return this._messageReceived;\n    }\n    /**\n     * Get the name of the terminal session.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Get the model for the terminal session.\n     */\n    get model() {\n        return { name: this._name };\n    }\n    /**\n     * Test whether the session is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the session.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit();\n        this._updateConnectionStatus('disconnected');\n        this._clearSocket();\n        signaling_1.Signal.clearData(this);\n    }\n    /**\n     * Send a message to the terminal session.\n     *\n     * #### Notes\n     * If the connection is down, the message will be queued for sending when\n     * the connection comes back up.\n     */\n    send(message) {\n        this._sendMessage(message);\n    }\n    /**\n     * Send a message on the websocket, or possibly queue for later sending.\n     *\n     * @param queue - whether to queue the message if it cannot be sent\n     */\n    _sendMessage(message, queue = true) {\n        if (this._isDisposed || !message.content) {\n            return;\n        }\n        if (this.connectionStatus === 'connected' && this._ws) {\n            const msg = [message.type, ...message.content];\n            this._ws.send(JSON.stringify(msg));\n        }\n        else if (queue) {\n            this._pendingMessages.push(message);\n        }\n        else {\n            throw new Error(`Could not send message: ${JSON.stringify(message)}`);\n        }\n    }\n    /**\n     * Send pending messages to the kernel.\n     */\n    _sendPending() {\n        // We check to make sure we are still connected each time. For\n        // example, if a websocket buffer overflows, it may close, so we should\n        // stop sending messages.\n        while (this.connectionStatus === 'connected' &&\n            this._pendingMessages.length > 0) {\n            this._sendMessage(this._pendingMessages[0], false);\n            // We shift the message off the queue after the message is sent so that\n            // if there is an exception, the message is still pending.\n            this._pendingMessages.shift();\n        }\n    }\n    /**\n     * Reconnect to a terminal.\n     *\n     * #### Notes\n     * This may try multiple times to reconnect to a terminal, and will sever\n     * any existing connection.\n     */\n    reconnect() {\n        this._errorIfDisposed();\n        const result = new coreutils_2.PromiseDelegate();\n        // Set up a listener for the connection status changing, which accepts or\n        // rejects after the retries are done.\n        const fulfill = (sender, status) => {\n            if (status === 'connected') {\n                result.resolve();\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n            else if (status === 'disconnected') {\n                result.reject(new Error('Terminal connection disconnected'));\n                this.connectionStatusChanged.disconnect(fulfill, this);\n            }\n        };\n        this.connectionStatusChanged.connect(fulfill, this);\n        // Reset the reconnect limit so we start the connection attempts fresh\n        this._reconnectAttempt = 0;\n        // Start the reconnection process, which will also clear any existing\n        // connection.\n        this._reconnect();\n        // Return the promise that should resolve on connection or reject if the\n        // retries don't work.\n        return result.promise;\n    }\n    /**\n     * Attempt a connection if we have not exhausted connection attempts.\n     */\n    _reconnect() {\n        this._errorIfDisposed();\n        // Clear any existing reconnection attempt\n        clearTimeout(this._reconnectTimeout);\n        // Update the connection status and schedule a possible reconnection.\n        if (this._reconnectAttempt < this._reconnectLimit) {\n            this._updateConnectionStatus('connecting');\n            // The first reconnect attempt should happen immediately, and subsequent\n            // attemps should pick a random number in a growing range so that we\n            // don't overload the server with synchronized reconnection attempts\n            // across multiple kernels.\n            const timeout = Private.getRandomIntInclusive(0, 1e3 * (Math.pow(2, this._reconnectAttempt) - 1));\n            console.error(`Connection lost, reconnecting in ${Math.floor(timeout / 1000)} seconds.`);\n            this._reconnectTimeout = setTimeout(this._createSocket, timeout);\n            this._reconnectAttempt += 1;\n        }\n        else {\n            this._updateConnectionStatus('disconnected');\n        }\n        // Clear the websocket event handlers and the socket itself.\n        this._clearSocket();\n    }\n    /**\n     * Forcefully clear the socket state.\n     *\n     * #### Notes\n     * This will clear all socket state without calling any handlers and will\n     * not update the connection status. If you call this method, you are\n     * responsible for updating the connection status as needed and recreating\n     * the socket if you plan to reconnect.\n     */\n    _clearSocket() {\n        if (this._ws !== null) {\n            // Clear the websocket event handlers and the socket itself.\n            this._ws.onopen = this._noOp;\n            this._ws.onclose = this._noOp;\n            this._ws.onerror = this._noOp;\n            this._ws.onmessage = this._noOp;\n            this._ws.close();\n            this._ws = null;\n        }\n    }\n    /**\n     * Shut down the terminal session.\n     */\n    async shutdown() {\n        await restapi_1.shutdownTerminal(this.name, this.serverSettings);\n        this.dispose();\n    }\n    /**\n     * Clone the current terminal connection.\n     */\n    clone() {\n        return new TerminalConnection(this);\n    }\n    /**\n     * Handle connection status changes.\n     */\n    _updateConnectionStatus(connectionStatus) {\n        if (this._connectionStatus === connectionStatus) {\n            return;\n        }\n        this._connectionStatus = connectionStatus;\n        // If we are not 'connecting', stop any reconnection attempts.\n        if (connectionStatus !== 'connecting') {\n            this._reconnectAttempt = 0;\n            clearTimeout(this._reconnectTimeout);\n        }\n        // Send the pending messages if we just connected.\n        if (connectionStatus === 'connected') {\n            this._sendPending();\n        }\n        // Notify others that the connection status changed.\n        this._connectionStatusChanged.emit(connectionStatus);\n    }\n    /**\n     * Utility function to throw an error if this instance is disposed.\n     */\n    _errorIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('Terminal connection is disposed');\n        }\n    }\n    /**\n     * A signal emitted when the terminal connection status changes.\n     */\n    get connectionStatusChanged() {\n        return this._connectionStatusChanged;\n    }\n    /**\n     * The current connection status of the terminal connection.\n     */\n    get connectionStatus() {\n        return this._connectionStatus;\n    }\n}\nexports.TerminalConnection = TerminalConnection;\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a terminal.\n     */\n    function getTermUrl(baseUrl, name) {\n        return coreutils_1.URLExt.join(baseUrl, restapi_1.TERMINAL_SERVICE_URL, encodeURIComponent(name));\n    }\n    Private.getTermUrl = getTermUrl;\n    /**\n     * Get a random integer between min and max, inclusive of both.\n     *\n     * #### Notes\n     * From\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\n     *\n     * From the MDN page: It might be tempting to use Math.round() to accomplish\n     * that, but doing so would cause your random numbers to follow a non-uniform\n     * distribution, which may not be acceptable for your needs.\n     */\n    function getRandomIntInclusive(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    Private.getRandomIntInclusive = getRandomIntInclusive;\n})(Private || (Private = {}));\n//# sourceMappingURL=default.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalAPI = exports.Terminal = void 0;\nconst Terminal = __importStar(require(\"./terminal\"));\nexports.Terminal = Terminal;\nconst TerminalAPI = __importStar(require(\"./restapi\"));\nexports.TerminalAPI = TerminalAPI;\n__exportStar(require(\"./manager\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TerminalManager = void 0;\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst polling_1 = require(\"@lumino/polling\");\nconst signaling_1 = require(\"@lumino/signaling\");\nconst __1 = require(\"..\");\nconst basemanager_1 = require(\"../basemanager\");\nconst restapi_1 = require(\"./restapi\");\nconst default_1 = require(\"./default\");\n/**\n * A terminal session manager.\n */\nclass TerminalManager extends basemanager_1.BaseManager {\n    /**\n     * Construct a new terminal manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super(options);\n        this._isReady = false;\n        // As an optimization, we unwrap the models to just store the names.\n        this._names = [];\n        this._terminalConnections = new Set();\n        this._runningChanged = new signaling_1.Signal(this);\n        this._connectionFailure = new signaling_1.Signal(this);\n        // Check if terminals are available\n        if (!this.isAvailable()) {\n            this._ready = Promise.reject('Terminals unavailable');\n            this._ready.catch(_ => undefined);\n            return;\n        }\n        // Start polling with exponential backoff.\n        this._pollModels = new polling_1.Poll({\n            auto: false,\n            factory: () => this.requestRunning(),\n            frequency: {\n                interval: 10 * 1000,\n                backoff: true,\n                max: 300 * 1000\n            },\n            name: `@jupyterlab/services:TerminalManager#models`,\n            standby: (_a = options.standby) !== null && _a !== void 0 ? _a : 'when-hidden'\n        });\n        // Initialize internal data.\n        this._ready = (async () => {\n            await this._pollModels.start();\n            await this._pollModels.tick;\n            this._isReady = true;\n        })();\n    }\n    /**\n     * Test whether the manager is ready.\n     */\n    get isReady() {\n        return this._isReady;\n    }\n    /**\n     * A promise that fulfills when the manager is ready.\n     */\n    get ready() {\n        return this._ready;\n    }\n    /**\n     * A signal emitted when the running terminals change.\n     */\n    get runningChanged() {\n        return this._runningChanged;\n    }\n    /**\n     * A signal emitted when there is a connection failure.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * Dispose of the resources used by the manager.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._names.length = 0;\n        this._terminalConnections.forEach(x => x.dispose());\n        this._pollModels.dispose();\n        super.dispose();\n    }\n    /**\n     * Whether the terminal service is available.\n     */\n    isAvailable() {\n        return restapi_1.isAvailable();\n    }\n    /*\n     * Connect to a running terminal.\n     *\n     * @param name - The name of the target terminal.\n     *\n     * @param options - The options used to connect to the terminal.\n     *\n     * @returns A promise that resolves to the new terminal connection instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used.\n     */\n    connectTo(options) {\n        const terminalConnection = new default_1.TerminalConnection(Object.assign(Object.assign({}, options), { serverSettings: this.serverSettings }));\n        this._onStarted(terminalConnection);\n        if (!this._names.includes(options.model.name)) {\n            // We trust the user to connect to an existing session, but we verify\n            // asynchronously.\n            void this.refreshRunning().catch(() => {\n                /* no-op */\n            });\n        }\n        return terminalConnection;\n    }\n    /**\n     * Create an iterator over the most recent running terminals.\n     *\n     * @returns A new iterator over the running terminals.\n     */\n    running() {\n        return algorithm_1.iter(this._models);\n    }\n    /**\n     * Force a refresh of the running terminals.\n     *\n     * @returns A promise that with the list of running terminals.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    async refreshRunning() {\n        await this._pollModels.refresh();\n        await this._pollModels.tick;\n    }\n    /**\n     * Create a new terminal session.\n     *\n     * @returns A promise that resolves with the terminal instance.\n     *\n     * #### Notes\n     * The manager `serverSettings` will be used unless overridden in the\n     * options.\n     */\n    async startNew() {\n        const model = await restapi_1.startNew(this.serverSettings);\n        await this.refreshRunning();\n        return this.connectTo({ model });\n    }\n    /**\n     * Shut down a terminal session by name.\n     */\n    async shutdown(name) {\n        await restapi_1.shutdownTerminal(name, this.serverSettings);\n        await this.refreshRunning();\n    }\n    /**\n     * Shut down all terminal sessions.\n     *\n     * @returns A promise that resolves when all of the sessions are shut down.\n     */\n    async shutdownAll() {\n        // Update the list of models to make sure our list is current.\n        await this.refreshRunning();\n        // Shut down all models.\n        await Promise.all(this._names.map(name => restapi_1.shutdownTerminal(name, this.serverSettings)));\n        // Update the list of models to clear out our state.\n        await this.refreshRunning();\n    }\n    /**\n     * Execute a request to the server to poll running terminals and update state.\n     */\n    async requestRunning() {\n        var _a;\n        let models;\n        try {\n            models = await restapi_1.listRunning(this.serverSettings);\n        }\n        catch (err) {\n            // Check for a network error, or a 503 error, which is returned\n            // by a JupyterHub when a server is shut down.\n            if (err instanceof __1.ServerConnection.NetworkError ||\n                ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 503) {\n                this._connectionFailure.emit(err);\n            }\n            throw err;\n        }\n        if (this.isDisposed) {\n            return;\n        }\n        const names = models.map(({ name }) => name).sort();\n        if (names === this._names) {\n            // Identical models list, so just return\n            return;\n        }\n        this._names = names;\n        this._terminalConnections.forEach(tc => {\n            if (!names.includes(tc.name)) {\n                tc.dispose();\n            }\n        });\n        this._runningChanged.emit(this._models);\n    }\n    /**\n     * Handle a session starting.\n     */\n    _onStarted(terminalConnection) {\n        this._terminalConnections.add(terminalConnection);\n        terminalConnection.disposed.connect(this._onDisposed, this);\n    }\n    /**\n     * Handle a session terminating.\n     */\n    _onDisposed(terminalConnection) {\n        this._terminalConnections.delete(terminalConnection);\n        // Update the running models to make sure we reflect the server state\n        void this.refreshRunning().catch(() => {\n            /* no-op */\n        });\n    }\n    get _models() {\n        return this._names.map(name => {\n            return { name };\n        });\n    }\n}\nexports.TerminalManager = TerminalManager;\n//# sourceMappingURL=manager.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shutdownTerminal = exports.listRunning = exports.startNew = exports.isAvailable = exports.TERMINAL_SERVICE_URL = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the terminal service.\n */\nexports.TERMINAL_SERVICE_URL = 'api/terminals';\n/**\n * Whether the terminal service is available.\n */\nfunction isAvailable() {\n    const available = String(coreutils_1.PageConfig.getOption('terminalsAvailable'));\n    return available.toLowerCase() === 'true';\n}\nexports.isAvailable = isAvailable;\n/**\n * Start a new terminal session.\n *\n * @param options - The session options to use.\n *\n * @returns A promise that resolves with the session instance.\n */\nasync function startNew(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const init = { method: 'POST' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    // TODO: Validate model\n    return data;\n}\nexports.startNew = startNew;\n/**\n * List the running terminal sessions.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves with the list of running session models.\n */\nasync function listRunning(settings = serverconnection_1.ServerConnection.makeSettings()) {\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL);\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, {}, settings);\n    if (response.status !== 200) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n        throw new Error('Invalid terminal list');\n    }\n    // TODO: validate each model\n    return data;\n}\nexports.listRunning = listRunning;\n/**\n * Shut down a terminal session by name.\n *\n * @param name - The name of the target session.\n *\n * @param settings - The server settings to use.\n *\n * @returns A promise that resolves when the session is shut down.\n */\nasync function shutdownTerminal(name, settings = serverconnection_1.ServerConnection.makeSettings()) {\n    var _a;\n    Private.errorIfNotAvailable();\n    const url = coreutils_1.URLExt.join(settings.baseUrl, exports.TERMINAL_SERVICE_URL, name);\n    const init = { method: 'DELETE' };\n    const response = await serverconnection_1.ServerConnection.makeRequest(url, init, settings);\n    if (response.status === 404) {\n        const data = await response.json();\n        const msg = (_a = data.message) !== null && _a !== void 0 ? _a : `The terminal session \"${name}\"\" does not exist on the server`;\n        console.warn(msg);\n    }\n    else if (response.status !== 204) {\n        const err = await serverconnection_1.ServerConnection.ResponseError.create(response);\n        throw err;\n    }\n}\nexports.shutdownTerminal = shutdownTerminal;\nvar Private;\n(function (Private) {\n    /**\n     * Throw an error if terminals are not available.\n     */\n    function errorIfNotAvailable() {\n        if (!isAvailable()) {\n            throw new Error('Terminals Unavailable');\n        }\n    }\n    Private.errorIfNotAvailable = errorIfNotAvailable;\n})(Private || (Private = {}));\n//# sourceMappingURL=restapi.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAvailable = void 0;\nconst restapi_1 = require(\"./restapi\");\nObject.defineProperty(exports, \"isAvailable\", { enumerable: true, get: function () { return restapi_1.isAvailable; } });\n//# sourceMappingURL=terminal.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateProperty = void 0;\n/**\n * Validate a property as being on an object, and optionally\n * of a given type and among a given set of values.\n */\nfunction validateProperty(object, name, typeName, values = []) {\n    if (!object.hasOwnProperty(name)) {\n        throw Error(`Missing property '${name}'`);\n    }\n    const value = object[name];\n    if (typeName !== void 0) {\n        let valid = true;\n        switch (typeName) {\n            case 'array':\n                valid = Array.isArray(value);\n                break;\n            case 'object':\n                valid = typeof value !== 'undefined';\n                break;\n            default:\n                valid = typeof value === typeName;\n        }\n        if (!valid) {\n            throw new Error(`Property '${name}' is not of type '${typeName}'`);\n        }\n        if (values.length > 0) {\n            let valid = true;\n            switch (typeName) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                    valid = values.includes(value);\n                    break;\n                default:\n                    valid = values.findIndex(v => v === value) >= 0;\n                    break;\n            }\n            if (!valid) {\n                throw new Error(`Property '${name}' is not one of the valid values ${JSON.stringify(values)}`);\n            }\n        }\n    }\n}\nexports.validateProperty = validateProperty;\n//# sourceMappingURL=validate.js.map","\"use strict\";\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceManager = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst statedb_1 = require(\"@jupyterlab/statedb\");\nconst serverconnection_1 = require(\"../serverconnection\");\n/**\n * The url for the lab workspaces service.\n */\nconst SERVICE_WORKSPACES_URL = 'api/workspaces';\n/**\n * The workspaces API service manager.\n */\nclass WorkspaceManager extends statedb_1.DataConnector {\n    /**\n     * Create a new workspace manager.\n     */\n    constructor(options = {}) {\n        var _a;\n        super();\n        this.serverSettings = (_a = options.serverSettings) !== null && _a !== void 0 ? _a : serverconnection_1.ServerConnection.makeSettings();\n    }\n    /**\n     * Fetch a workspace.\n     *\n     * @param id - The workspace's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async fetch(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        return response.json();\n    }\n    /**\n     * Fetch the list of workspace IDs that exist on the server.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async list() {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, '');\n        const response = await makeRequest(url, {}, serverSettings);\n        if (response.status !== 200) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n        const result = await response.json();\n        return result.workspaces;\n    }\n    /**\n     * Remove a workspace from the server.\n     *\n     * @param id - The workspaces's ID.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async remove(id) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { method: 'DELETE' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n    /**\n     * Save a workspace.\n     *\n     * @param id - The workspace's ID.\n     *\n     * @param workspace - The workspace being saved.\n     *\n     * @returns A promise that resolves if successful.\n     */\n    async save(id, workspace) {\n        const { serverSettings } = this;\n        const { baseUrl, appUrl } = serverSettings;\n        const { makeRequest, ResponseError } = serverconnection_1.ServerConnection;\n        const base = baseUrl + appUrl;\n        const url = Private.url(base, id);\n        const init = { body: JSON.stringify(workspace), method: 'PUT' };\n        const response = await makeRequest(url, init, serverSettings);\n        if (response.status !== 204) {\n            const err = await ResponseError.create(response);\n            throw err;\n        }\n    }\n}\nexports.WorkspaceManager = WorkspaceManager;\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the url for a workspace.\n     */\n    function url(base, id) {\n        return coreutils_1.URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n    }\n    Private.url = url;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
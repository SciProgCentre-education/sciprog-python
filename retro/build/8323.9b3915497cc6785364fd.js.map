{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/codemirror-ipython.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/codemirror-ipythongfm.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/mode.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/factory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/syntaxstatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codemirror/lib/index.js"],"names":["config","modeOptions","pythonConf","prop","hasOwnProperty","name","singleOperators","RegExp","identifiers","ext","mime","mode","gfmMode","tokenTypeOverrides","list3","texMode","inMathMode","open","close","delimStyle","Mode","Private","specLoaders","loader","async","spec","rank","Promise","resolve","reject","findBest","_a","modename","mimetype","findByExtension","IEditorMimeTypeService","i","length","getModeInfo","run","code","el","ensure","specLoader","addSpecLoader","item","index","ArrayExt","itemCmp","findByMIME","findByName","findByFileName","basename","PathExt","first","second","READ_ONLY_CLASS","CodeMirrorEditor","options","this","edgeRequested","Signal","selectionMarkers","_keydownHandlers","Array","_changeGuard","_uuid","_needsRefresh","_isDisposed","_lastChange","host","translator","nullTranslator","_trans","load","classList","add","addEventListener","uuid","UUID","style","selectionStyle","_selectionStyle","Object","assign","CodeEditor","model","_model","fullConfig","_config","defaultConfig","editor","_editor","createEditor","_initializeEditorBinding","sharedModelSwitched","connect","getDoc","_onMimeTypeChanged","_onCursorActivity","_poll","Poll","factory","_checkSync","frequency","interval","backoff","standby","mimeTypeChanged","selections","changed","_onSelectionsChanged","event","handler","preventDefault","onKeydown","instance","change","origin","hasFocus","refresh","on","codemirrorIgnore","getWrapperElement","_yeditorBinding","destroy","sharedModel","opts","undoManager","yUndoManager","awareness","ysource","value","doc","lineCount","defaultTextHeight","defaultCharWidth","isDisposed","removeEventListener","dispose","option","setOption","startOperation","key","operation","endOperation","line","getLine","position","indexFromPos","ch","column","offset","posFromIndex","undo","redo","_b","clear","focus","contains","document","activeElement","getInputField","blur","_clearHover","addOverlay","removeOverlay","query","start","caseFold","getSearchCursor","getCursor","state","fn","firstLine","lastLine","pos","margin","scrollIntoView","where","cursorCoords","from","to","seperator","getRange","push","DisposableDelegate","val","dimension","setSize","width","height","cmPosition","_toCodeMirrorPosition","selection","range","end","charCoords","coordinate","_toPosition","coordsChar","cursor","setCursor","undefined","set","getSelections","setSelections","listSelections","map","_toSelection","anchor","head","cmSelections","_toCodeMirrorSelections","text","replaceSelection","tokens","lineTokens","getLineTokens","t","getOffsetAt","string","type","concat","token","getTokenAt","execCommand","command","getCursorPosition","keyCode","shiftKey","emit","lastCh","_toCodeMirrorSelection","mimeType","extraKeys","getOption","then","args","_cleanSelections","newValue","_markSelections","markers","forEach","marker","collaborator","_hoverId","modelDB","collaborators","get","JSONExt","caret","_getCaret","setBookmark","widget","forward","markerOptions","_toTextMarkerOptions","color","markText","css","parseInt","slice","className","title","displayName","replaceRange","setValue","inserted","join","remove","insert","_evtFocus","_evtBlur","_evtScroll","_caretHover","window","clearTimeout","_hoverTimeout","body","removeChild","createElement","borderBottomColor","onmouseenter","sessionId","rect","getBoundingClientRect","hover","left","String","top","bottom","textContent","backgroundColor","onmouseleave","setTimeout","appendChild","getValue","showDialog","__","console","warn","JSON","stringify","view","lineSep","theme","smartIndent","electricChars","keyMap","gutters","fixedGutter","showCursorWhenSelecting","coverGutterNextToScrollbar","dragDrop","lineSeparator","scrollbarStyle","lineWiseCopyCut","scrollPastEnd","styleActiveLine","styleSelectedText","selectionPointer","rulers","foldGutter","handlePaste","addCommand","posEq","a","b","getActiveGutters","classToSwitch","keys","filter","gutter","autoClosingBrackets","fontFamily","fontSize","insertSpaces","lineHeight","lineWrap","wordWrapColumn","tabSize","readOnly","otherOptions","s","e","p","prototype","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","bareConfig","autoCloseBrackets","indentUnit","indentWithTabs","lineWrapping","toString","querySelector","maxWidth","indentMoreOrinsertTab","cm","before","test","delSpaceToPrevTabStop","ranges","substring","match","prevTabStop","Math","ceil","findPosH","lines","setProperty","toggle","CodeMirrorEditorFactory","defaults","newInlineEditor","dataset","inlineCodeMirrorConfig","newDocumentEditor","documentCodeMirrorConfig","End","Tab","lineNumbers","CodeMirrorMimeTypeService","info","file_extension","codemirror_mode","split","path","EditorSyntaxComponent","props","TextItem","source","onClick","handleClick","EditorSyntaxStatus","VDomRenderer","super","Model","_handleClick","modeMenu","Menu","commands","_commands","_popup","sort","aName","bName","localeCompare","addItem","showPopup","align","trans","addClass","interactiveItem","caption","VDomModel","arguments","_onMIMETypeChange","oldMode","_mode","_triggerChange","oldEditor","disconnect","oldState","newState","stateChanged","ICodeMirror","Token","editorServices","factoryService","mimeTypeService"],"mappings":"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","file":"8323.9b3915497cc6785364fd.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/meta';\nimport 'codemirror/mode/python/python';\n/**\n * Define an IPython codemirror mode.\n *\n * It is a slightly altered Python Mode with a `?` operator.\n */\nCodeMirror.defineMode('ipython', (config, modeOptions) => {\n    const pythonConf = {};\n    for (const prop in modeOptions) {\n        if (modeOptions.hasOwnProperty(prop)) {\n            pythonConf[prop] = modeOptions[prop];\n        }\n    }\n    pythonConf.name = 'python';\n    pythonConf.singleOperators = new RegExp('^[\\\\+\\\\-\\\\*/%&|@\\\\^~<>!\\\\?]');\n    pythonConf.identifiers = new RegExp('^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*');\n    return CodeMirror.getMode(config, pythonConf);\n}, 'python');\nCodeMirror.defineMIME('text/x-ipython', 'ipython');\nCodeMirror.modeInfo.push({\n    ext: [],\n    mime: 'text/x-ipython',\n    mode: 'ipython',\n    name: 'ipython'\n});\n//# sourceMappingURL=codemirror-ipython.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/stex/stex';\nimport 'codemirror/mode/gfm/gfm';\nimport 'codemirror/addon/mode/multiplex';\n/**\n * Define an IPython GFM (GitHub Flavored Markdown) mode.\n *\n * Is just a slightly altered GFM Mode with support for LaTeX.\n * LaTeX support was supported by Codemirror GFM as of\n *   https://github.com/codemirror/CodeMirror/pull/567\n *  But was later removed in\n *   https://github.com/codemirror/CodeMirror/commit/d9c9f1b1ffe984aee41307f3e927f80d1f23590c\n */\nCodeMirror.defineMode('ipythongfm', (config, modeOptions) => {\n    const gfmMode = CodeMirror.getMode(config, {\n        name: 'gfm',\n        // Override list3 with an under-used token, rather than `keyword`\n        tokenTypeOverrides: { list3: 'string-2' }\n    });\n    const texMode = CodeMirror.getMode(config, {\n        name: 'stex',\n        inMathMode: true\n    });\n    return CodeMirror.multiplexingMode(gfmMode, {\n        open: '$$',\n        close: '$$',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '$',\n        close: '$',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '\\\\(',\n        close: '\\\\)',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '\\\\[',\n        close: '\\\\]',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }\n    // .. more multiplexed styles can follow here\n    );\n}, 'gfm');\nCodeMirror.defineMIME('text/x-ipythongfm', 'ipythongfm');\nCodeMirror.modeInfo.push({\n    ext: [],\n    mime: 'text/x-ipythongfm',\n    mode: 'ipythongfm',\n    name: 'ipythongfm'\n});\n//# sourceMappingURL=codemirror-ipythongfm.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt } from '@lumino/algorithm';\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/meta';\nimport 'codemirror/addon/runmode/runmode';\nimport './codemirror-ipython';\nimport './codemirror-ipythongfm';\n// Bundle other common modes\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/julia/julia';\nimport 'codemirror/mode/r/r';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/clike/clike';\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/mode/sql/sql';\nimport { PathExt } from '@jupyterlab/coreutils';\n/**\n * The namespace for CodeMirror Mode functionality.\n */\nexport var Mode;\n(function (Mode) {\n    const specLoaders = [\n        {\n            // Simplest, cheapest check by mode name.\n            loader: async (spec) => CodeMirror.modes.hasOwnProperty(spec.mode),\n            rank: 0\n        },\n        {\n            // Fetch the mode asynchronously.\n            loader: function (spec) {\n                return new Promise((resolve, reject) => {\n                    // An arrow function below seems to miscompile in our current webpack to\n                    // invalid js.\n                    require([\n                        `codemirror/mode/${spec.mode}/${spec.mode}.js`\n                    ], function () {\n                        resolve(true);\n                    });\n                });\n            },\n            rank: 99\n        }\n    ];\n    /**\n     * Get the raw list of available modes specs.\n     */\n    function getModeInfo() {\n        return CodeMirror.modeInfo;\n    }\n    Mode.getModeInfo = getModeInfo;\n    /**\n     * Running a CodeMirror mode outside of an editor.\n     */\n    function run(code, mode, el) {\n        CodeMirror.runMode(code, mode, el);\n    }\n    Mode.run = run;\n    /**\n     * Ensure a codemirror mode is available by name or Codemirror spec.\n     *\n     * @param mode - The mode to ensure.  If it is a string, uses [findBest]\n     *   to get the appropriate spec.\n     *\n     * @returns A promise that resolves when the mode is available.\n     */\n    async function ensure(mode) {\n        const spec = findBest(mode);\n        for (const specLoader of specLoaders) {\n            if (await specLoader.loader(spec)) {\n                return spec;\n            }\n        }\n        return null;\n    }\n    Mode.ensure = ensure;\n    function addSpecLoader(loader, rank) {\n        const item = { loader, rank };\n        const index = ArrayExt.upperBound(specLoaders, item, Private.itemCmp);\n        ArrayExt.insert(specLoaders, index, item);\n    }\n    Mode.addSpecLoader = addSpecLoader;\n    /**\n     * Find a codemirror mode by name or CodeMirror spec.\n     */\n    function findBest(mode) {\n        var _a;\n        const modename = typeof mode === 'string' ? mode : mode.mode || mode.name;\n        const mimetype = typeof mode !== 'string' ? mode.mime : modename;\n        const ext = typeof mode !== 'string' ? (_a = mode.ext) !== null && _a !== void 0 ? _a : [] : [];\n        return (CodeMirror.findModeByName(modename || '') ||\n            CodeMirror.findModeByMIME(mimetype || '') ||\n            findByExtension(ext) ||\n            CodeMirror.findModeByMIME(IEditorMimeTypeService.defaultMimeType) ||\n            CodeMirror.findModeByMIME('text/plain'));\n    }\n    Mode.findBest = findBest;\n    /**\n     * Find a codemirror mode by MIME.\n     */\n    function findByMIME(mime) {\n        return CodeMirror.findModeByMIME(mime);\n    }\n    Mode.findByMIME = findByMIME;\n    /**\n     * Find a codemirror mode by name.\n     */\n    function findByName(name) {\n        return CodeMirror.findModeByName(name);\n    }\n    Mode.findByName = findByName;\n    /**\n     * Find a codemirror mode by filename.\n     */\n    function findByFileName(name) {\n        const basename = PathExt.basename(name);\n        return CodeMirror.findModeByFileName(basename);\n    }\n    Mode.findByFileName = findByFileName;\n    /**\n     * Find a codemirror mode by extension.\n     */\n    function findByExtension(ext) {\n        if (typeof ext === 'string') {\n            return CodeMirror.findModeByExtension(ext);\n        }\n        for (let i = 0; i < ext.length; i++) {\n            const mode = CodeMirror.findModeByExtension(ext[i]);\n            if (mode) {\n                return mode;\n            }\n        }\n        return null;\n    }\n    Mode.findByExtension = findByExtension;\n})(Mode || (Mode = {}));\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for the loader rank\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=mode.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// / <reference types=\"codemirror\"/>\n// / <reference types=\"codemirror/searchcursor\"/>\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport CodeMirror from 'codemirror';\nimport { showDialog } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { CodemirrorBinding } from 'y-codemirror';\nimport { Mode } from './mode';\nimport 'codemirror/addon/comment/comment.js';\nimport 'codemirror/addon/display/rulers.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/fold/foldcode.js';\nimport 'codemirror/addon/fold/foldgutter.js';\nimport 'codemirror/addon/fold/brace-fold.js';\nimport 'codemirror/addon/fold/indent-fold.js';\nimport 'codemirror/addon/fold/markdown-fold.js';\nimport 'codemirror/addon/fold/xml-fold.js';\nimport 'codemirror/addon/fold/comment-fold.js';\nimport 'codemirror/addon/scroll/scrollpastend.js';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/selection/mark-selection';\nimport 'codemirror/addon/selection/selection-pointer';\nimport 'codemirror/addon/mode/simple';\nimport 'codemirror/keymap/emacs.js';\nimport 'codemirror/keymap/sublime.js';\n// import 'codemirror/keymap/vim.js';  lazy loading of vim mode is available in ../codemirror-extension/index.ts\n/**\n * The class name added to CodeMirrorWidget instances.\n */\nconst EDITOR_CLASS = 'jp-CodeMirrorEditor';\n/**\n * The class name added to read only cell editor widgets.\n */\nconst READ_ONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_CURSOR_CLASS = 'jp-CollaboratorCursor';\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_HOVER_CLASS = 'jp-CollaboratorCursor-hover';\n/**\n * The key code for the up arrow key.\n */\nconst UP_ARROW = 38;\n/**\n * The key code for the down arrow key.\n */\nconst DOWN_ARROW = 40;\n/**\n * The time that a collaborator name hover persists.\n */\nconst HOVER_TIMEOUT = 1000;\n// @todo Remove the duality of having a modeldb and a y-codemirror\n// binding as it just introduces a lot of additional complexity without gaining anything.\nconst USE_YCODEMIRROR_BINDING = true;\n/**\n * CodeMirror editor.\n */\nexport class CodeMirrorEditor {\n    /**\n     * Construct a CodeMirror editor.\n     */\n    constructor(options) {\n        /**\n         * A signal emitted when either the top or bottom edge is requested.\n         */\n        this.edgeRequested = new Signal(this);\n        this.selectionMarkers = {};\n        this._keydownHandlers = new Array();\n        this._changeGuard = false;\n        this._uuid = '';\n        this._needsRefresh = false;\n        this._isDisposed = false;\n        this._lastChange = null;\n        const host = (this.host = options.host);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        host.classList.add(EDITOR_CLASS);\n        host.classList.add('jp-Editor');\n        host.addEventListener('focus', this, true);\n        host.addEventListener('blur', this, true);\n        host.addEventListener('scroll', this, true);\n        this._uuid = options.uuid || UUID.uuid4();\n        // Handle selection style.\n        const style = options.selectionStyle || {};\n        this._selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), style);\n        const model = (this._model = options.model);\n        const config = options.config || {};\n        const fullConfig = (this._config = Object.assign(Object.assign({}, CodeMirrorEditor.defaultConfig), config));\n        const editor = (this._editor = Private.createEditor(host, fullConfig));\n        this._initializeEditorBinding();\n        // every time the model is switched, we need to re-initialize the editor binding\n        this.model.sharedModelSwitched.connect(this._initializeEditorBinding, this);\n        const doc = editor.getDoc();\n        // Handle initial values for text, mimetype, and selections.\n        if (!USE_YCODEMIRROR_BINDING) {\n            doc.setValue(model.value.text);\n        }\n        this._onMimeTypeChanged();\n        this._onCursorActivity();\n        this._poll = new Poll({\n            factory: async () => {\n                this._checkSync();\n            },\n            frequency: { interval: 3000, backoff: false },\n            standby: () => {\n                // If changed, only stand by when hidden, otherwise always stand by.\n                return this._lastChange ? 'when-hidden' : true;\n            }\n        });\n        // Connect to changes.\n        if (!USE_YCODEMIRROR_BINDING) {\n            model.value.changed.connect(this._onValueChanged, this);\n        }\n        model.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n        model.selections.changed.connect(this._onSelectionsChanged, this);\n        CodeMirror.on(editor, 'keydown', (editor, event) => {\n            const index = ArrayExt.findFirstIndex(this._keydownHandlers, handler => {\n                if (handler(this, event) === true) {\n                    event.preventDefault();\n                    return true;\n                }\n                return false;\n            });\n            if (index === -1) {\n                this.onKeydown(event);\n            }\n        });\n        CodeMirror.on(editor, 'cursorActivity', () => this._onCursorActivity());\n        if (!USE_YCODEMIRROR_BINDING) {\n            CodeMirror.on(editor.getDoc(), 'beforeChange', (instance, change) => {\n                this._beforeDocChanged(instance, change);\n            });\n        }\n        CodeMirror.on(editor.getDoc(), 'change', (instance, change) => {\n            // Manually refresh after setValue to make sure editor is properly sized.\n            if (change.origin === 'setValue' && this.hasFocus()) {\n                this.refresh();\n            }\n            this._lastChange = change;\n        });\n        // Turn off paste handling in codemirror since sometimes we want to\n        // replace it with our own.\n        editor.on('paste', (instance, event) => {\n            var _a;\n            const handlePaste = (_a = this._config['handlePaste']) !== null && _a !== void 0 ? _a : true;\n            if (!handlePaste) {\n                event.codemirrorIgnore = true;\n            }\n        });\n        // Manually refresh on paste to make sure editor is properly sized.\n        editor.getWrapperElement().addEventListener('paste', () => {\n            if (this.hasFocus()) {\n                this.refresh();\n            }\n        });\n    }\n    /**\n     * Initialize the editor binding.\n     */\n    _initializeEditorBinding() {\n        var _a;\n        if (!USE_YCODEMIRROR_BINDING) {\n            return;\n        }\n        (_a = this._yeditorBinding) === null || _a === void 0 ? void 0 : _a.destroy();\n        const sharedModel = this.model.sharedModel;\n        const opts = sharedModel.undoManager\n            ? { yUndoManager: sharedModel.undoManager }\n            : {};\n        const awareness = sharedModel.awareness;\n        this._yeditorBinding = new CodemirrorBinding(sharedModel.ysource, this.editor, awareness, opts);\n    }\n    /**\n     * The uuid of this editor;\n     */\n    get uuid() {\n        return this._uuid;\n    }\n    set uuid(value) {\n        this._uuid = value;\n    }\n    /**\n     * The selection style of this editor.\n     */\n    get selectionStyle() {\n        return this._selectionStyle;\n    }\n    set selectionStyle(value) {\n        this._selectionStyle = value;\n    }\n    /**\n     * Get the codemirror editor wrapped by the editor.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * Get the codemirror doc wrapped by the widget.\n     */\n    get doc() {\n        return this._editor.getDoc();\n    }\n    /**\n     * Get the number of lines in the editor.\n     */\n    get lineCount() {\n        return this.doc.lineCount();\n    }\n    /**\n     * Returns a model for this editor.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * The height of a line in the editor in pixels.\n     */\n    get lineHeight() {\n        return this._editor.defaultTextHeight();\n    }\n    /**\n     * The widget of a character in the editor in pixels.\n     */\n    get charWidth() {\n        return this._editor.defaultCharWidth();\n    }\n    /**\n     * Tests whether the editor is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.host.removeEventListener('focus', this, true);\n        this.host.removeEventListener('blur', this, true);\n        this.host.removeEventListener('scroll', this, true);\n        if (this._yeditorBinding) {\n            this._yeditorBinding.destroy();\n        }\n        this._keydownHandlers.length = 0;\n        this._poll.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get a config option for the editor.\n     */\n    getOption(option) {\n        return this._config[option];\n    }\n    /**\n     * Set a config option for the editor.\n     */\n    setOption(option, value) {\n        // Don't bother setting the option if it is already the same.\n        if (this._config[option] !== value) {\n            this._config[option] = value;\n            Private.setOption(this.editor, option, value, this._config);\n        }\n    }\n    /**\n     * Set config options for the editor.\n     *\n     * This method is prefered when setting several options. The\n     * options are set within an operation, which only performs\n     * the costly update at the end, and not after every option\n     * is set.\n     */\n    setOptions(options) {\n        const editor = this._editor;\n        editor.startOperation();\n        for (let key in options) {\n            editor.operation(() => {\n                this.setOption(key, options[key]);\n            });\n        }\n        editor.endOperation();\n    }\n    /**\n     * Returns the content for the given line number.\n     */\n    getLine(line) {\n        return this.doc.getLine(line);\n    }\n    /**\n     * Find an offset for the given position.\n     */\n    getOffsetAt(position) {\n        return this.doc.indexFromPos({\n            ch: position.column,\n            line: position.line\n        });\n    }\n    /**\n     * Find a position for the given offset.\n     */\n    getPositionAt(offset) {\n        const { ch, line } = this.doc.posFromIndex(offset);\n        return { line, column: ch };\n    }\n    /**\n     * Undo one edit (if any undo events are stored).\n     */\n    undo() {\n        this.model.sharedModel.undo();\n    }\n    /**\n     * Redo one undone edit.\n     */\n    redo() {\n        this.model.sharedModel.redo();\n    }\n    /**\n     * Clear the undo history.\n     */\n    clearHistory() {\n        var _a, _b;\n        (_b = (_a = this._yeditorBinding) === null || _a === void 0 ? void 0 : _a.yUndoManager) === null || _b === void 0 ? void 0 : _b.clear();\n    }\n    /**\n     * Brings browser focus to this editor text.\n     */\n    focus() {\n        this._editor.focus();\n    }\n    /**\n     * Test whether the editor has keyboard focus.\n     */\n    hasFocus() {\n        return this._editor.getWrapperElement().contains(document.activeElement);\n    }\n    /**\n     * Explicitly blur the editor.\n     */\n    blur() {\n        this._editor.getInputField().blur();\n    }\n    /**\n     * Repaint editor.\n     */\n    refresh() {\n        this._editor.refresh();\n        this._needsRefresh = false;\n    }\n    /**\n     * Refresh the editor if it is focused;\n     * otherwise postpone refreshing till focusing.\n     */\n    resizeToFit() {\n        if (this.hasFocus()) {\n            this.refresh();\n        }\n        else {\n            this._needsRefresh = true;\n        }\n        this._clearHover();\n    }\n    // todo: docs, maybe define overlay options as a type?\n    addOverlay(mode, options) {\n        this._editor.addOverlay(mode, options);\n    }\n    removeOverlay(mode) {\n        this._editor.removeOverlay(mode);\n    }\n    getSearchCursor(query, start, caseFold) {\n        return this._editor.getDoc().getSearchCursor(query, start, caseFold);\n    }\n    getCursor(start) {\n        return this._editor.getDoc().getCursor(start);\n    }\n    get state() {\n        return this._editor.state;\n    }\n    operation(fn) {\n        return this._editor.operation(fn);\n    }\n    firstLine() {\n        return this._editor.getDoc().firstLine();\n    }\n    lastLine() {\n        return this._editor.getDoc().lastLine();\n    }\n    scrollIntoView(pos, margin) {\n        this._editor.scrollIntoView(pos, margin);\n    }\n    cursorCoords(where, mode) {\n        return this._editor.cursorCoords(where, mode);\n    }\n    getRange(from, to, seperator) {\n        return this._editor.getDoc().getRange(from, to, seperator);\n    }\n    /**\n     * Add a keydown handler to the editor.\n     *\n     * @param handler - A keydown handler.\n     *\n     * @returns A disposable that can be used to remove the handler.\n     */\n    addKeydownHandler(handler) {\n        this._keydownHandlers.push(handler);\n        return new DisposableDelegate(() => {\n            ArrayExt.removeAllWhere(this._keydownHandlers, val => val === handler);\n        });\n    }\n    /**\n     * Set the size of the editor in pixels.\n     */\n    setSize(dimension) {\n        if (dimension) {\n            this._editor.setSize(dimension.width, dimension.height);\n        }\n        else {\n            this._editor.setSize(null, null);\n        }\n        this._needsRefresh = false;\n    }\n    /**\n     * Reveal the given position in the editor.\n     */\n    revealPosition(position) {\n        const cmPosition = this._toCodeMirrorPosition(position);\n        this._editor.scrollIntoView(cmPosition);\n    }\n    /**\n     * Reveal the given selection in the editor.\n     */\n    revealSelection(selection) {\n        const range = {\n            from: this._toCodeMirrorPosition(selection.start),\n            to: this._toCodeMirrorPosition(selection.end)\n        };\n        this._editor.scrollIntoView(range);\n    }\n    /**\n     * Get the window coordinates given a cursor position.\n     */\n    getCoordinateForPosition(position) {\n        const pos = this._toCodeMirrorPosition(position);\n        const rect = this.editor.charCoords(pos, 'page');\n        return rect;\n    }\n    /**\n     * Get the cursor position given window coordinates.\n     *\n     * @param coordinate - The desired coordinate.\n     *\n     * @returns The position of the coordinates, or null if not\n     *   contained in the editor.\n     */\n    getPositionForCoordinate(coordinate) {\n        return this._toPosition(this.editor.coordsChar(coordinate)) || null;\n    }\n    /**\n     * Returns the primary position of the cursor, never `null`.\n     */\n    getCursorPosition() {\n        const cursor = this.doc.getCursor();\n        return this._toPosition(cursor);\n    }\n    /**\n     * Set the primary position of the cursor.\n     *\n     * #### Notes\n     * This will remove any secondary cursors.\n     */\n    setCursorPosition(position, options) {\n        const cursor = this._toCodeMirrorPosition(position);\n        this.doc.setCursor(cursor, undefined, options);\n        // If the editor does not have focus, this cursor change\n        // will get screened out in _onCursorsChanged(). Make an\n        // exception for this method.\n        if (!this.editor.hasFocus()) {\n            this.model.selections.set(this.uuid, this.getSelections());\n        }\n    }\n    /**\n     * Returns the primary selection, never `null`.\n     */\n    getSelection() {\n        return this.getSelections()[0];\n    }\n    /**\n     * Set the primary selection. This will remove any secondary cursors.\n     */\n    setSelection(selection) {\n        this.setSelections([selection]);\n    }\n    /**\n     * Gets the selections for all the cursors, never `null` or empty.\n     */\n    getSelections() {\n        const selections = this.doc.listSelections();\n        if (selections.length > 0) {\n            return selections.map(selection => this._toSelection(selection));\n        }\n        const cursor = this.doc.getCursor();\n        const selection = this._toSelection({ anchor: cursor, head: cursor });\n        return [selection];\n    }\n    /**\n     * Sets the selections for all the cursors, should not be empty.\n     * Cursors will be removed or added, as necessary.\n     * Passing an empty array resets a cursor position to the start of a document.\n     */\n    setSelections(selections) {\n        const cmSelections = this._toCodeMirrorSelections(selections);\n        this.doc.setSelections(cmSelections, 0);\n    }\n    /**\n     * Replaces the current selection with the given text.\n     *\n     * @param text The text to be inserted.\n     */\n    replaceSelection(text) {\n        this.doc.replaceSelection(text);\n    }\n    /**\n     * Get a list of tokens for the current editor text content.\n     */\n    getTokens() {\n        let tokens = [];\n        for (let i = 0; i < this.lineCount; ++i) {\n            const lineTokens = this.editor.getLineTokens(i).map(t => ({\n                offset: this.getOffsetAt({ column: t.start, line: i }),\n                value: t.string,\n                type: t.type || ''\n            }));\n            tokens = tokens.concat(lineTokens);\n        }\n        return tokens;\n    }\n    /**\n     * Get the token at a given editor position.\n     */\n    getTokenForPosition(position) {\n        var _a;\n        const cursor = this._toCodeMirrorPosition(position);\n        const token = this.editor.getTokenAt(cursor);\n        return {\n            offset: this.getOffsetAt({ column: token.start, line: cursor.line }),\n            value: token.string,\n            type: (_a = token.type) !== null && _a !== void 0 ? _a : undefined\n        };\n    }\n    /**\n     * Insert a new indented line at the current cursor position.\n     */\n    newIndentedLine() {\n        this.execCommand('newlineAndIndent');\n    }\n    /**\n     * Execute a codemirror command on the editor.\n     *\n     * @param command - The name of the command to execute.\n     */\n    execCommand(command) {\n        this._editor.execCommand(command);\n    }\n    /**\n     * Handle keydown events from the editor.\n     */\n    onKeydown(event) {\n        const position = this.getCursorPosition();\n        const { line, column } = position;\n        if (line === 0 && column === 0 && event.keyCode === UP_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('top');\n            }\n            return false;\n        }\n        if (line === 0 && event.keyCode === UP_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('topLine');\n            }\n            return false;\n        }\n        const lastLine = this.lineCount - 1;\n        const lastCh = this.getLine(lastLine).length;\n        if (line === lastLine &&\n            column === lastCh &&\n            event.keyCode === DOWN_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('bottom');\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     * Converts selections to code mirror selections.\n     */\n    _toCodeMirrorSelections(selections) {\n        if (selections.length > 0) {\n            return selections.map(selection => this._toCodeMirrorSelection(selection));\n        }\n        const position = { line: 0, ch: 0 };\n        return [{ anchor: position, head: position }];\n    }\n    /**\n     * Handles a mime type change.\n     */\n    _onMimeTypeChanged() {\n        const mime = this._model.mimeType;\n        const editor = this._editor;\n        const extraKeys = (editor.getOption('extraKeys') ||\n            {});\n        const isCode = mime !== 'text/plain' && mime !== 'text/x-ipythongfm';\n        if (isCode) {\n            extraKeys['Backspace'] = 'delSpaceToPrevTabStop';\n        }\n        else {\n            delete extraKeys['Backspace'];\n        }\n        this.setOption('extraKeys', extraKeys);\n        // TODO: should we provide a hook for when the mode is done being set?\n        void Mode.ensure(mime).then(spec => {\n            var _a;\n            this.setOption('mode', (_a = spec === null || spec === void 0 ? void 0 : spec.mime) !== null && _a !== void 0 ? _a : 'null');\n        });\n    }\n    /**\n     * Handles a selections change.\n     */\n    _onSelectionsChanged(selections, args) {\n        const uuid = args.key;\n        if (uuid !== this.uuid) {\n            this._cleanSelections(uuid);\n            if (args.type !== 'remove' && args.newValue) {\n                this._markSelections(uuid, args.newValue);\n            }\n        }\n    }\n    /**\n     * Clean selections for the given uuid.\n     */\n    _cleanSelections(uuid) {\n        const markers = this.selectionMarkers[uuid];\n        if (markers) {\n            markers.forEach(marker => {\n                marker.clear();\n            });\n        }\n        delete this.selectionMarkers[uuid];\n    }\n    /**\n     * Marks selections.\n     */\n    _markSelections(uuid, selections) {\n        const markers = [];\n        // If we are marking selections corresponding to an active hover,\n        // remove it.\n        if (uuid === this._hoverId) {\n            this._clearHover();\n        }\n        // If we can id the selection to a specific collaborator,\n        // use that information.\n        let collaborator;\n        if (this._model.modelDB.collaborators) {\n            collaborator = this._model.modelDB.collaborators.get(uuid);\n        }\n        // Style each selection for the uuid.\n        selections.forEach(selection => {\n            // Only render selections if the start is not equal to the end.\n            // In that case, we don't need to render the cursor.\n            if (!JSONExt.deepEqual(selection.start, selection.end)) {\n                // Selections only appear to render correctly if the anchor\n                // is before the head in the document. That is, reverse selections\n                // do not appear as intended.\n                const forward = selection.start.line < selection.end.line ||\n                    (selection.start.line === selection.end.line &&\n                        selection.start.column <= selection.end.column);\n                const anchor = this._toCodeMirrorPosition(forward ? selection.start : selection.end);\n                const head = this._toCodeMirrorPosition(forward ? selection.end : selection.start);\n                let markerOptions;\n                if (collaborator) {\n                    markerOptions = this._toTextMarkerOptions(Object.assign(Object.assign({}, selection.style), { color: collaborator.color }));\n                }\n                else {\n                    markerOptions = this._toTextMarkerOptions(selection.style);\n                }\n                markers.push(this.doc.markText(anchor, head, markerOptions));\n            }\n            else if (collaborator) {\n                const caret = this._getCaret(collaborator);\n                markers.push(this.doc.setBookmark(this._toCodeMirrorPosition(selection.end), {\n                    widget: caret\n                }));\n            }\n        });\n        this.selectionMarkers[uuid] = markers;\n    }\n    /**\n     * Handles a cursor activity event.\n     */\n    _onCursorActivity() {\n        // Only add selections if the editor has focus. This avoids unwanted\n        // triggering of cursor activity due to collaborator actions.\n        if (this._editor.hasFocus()) {\n            const selections = this.getSelections();\n            this.model.selections.set(this.uuid, selections);\n        }\n    }\n    /**\n     * Converts a code mirror selection to an editor selection.\n     */\n    _toSelection(selection) {\n        return {\n            uuid: this.uuid,\n            start: this._toPosition(selection.anchor),\n            end: this._toPosition(selection.head),\n            style: this.selectionStyle\n        };\n    }\n    /**\n     * Converts the selection style to a text marker options.\n     */\n    _toTextMarkerOptions(style) {\n        const r = parseInt(style.color.slice(1, 3), 16);\n        const g = parseInt(style.color.slice(3, 5), 16);\n        const b = parseInt(style.color.slice(5, 7), 16);\n        const css = `background-color: rgba( ${r}, ${g}, ${b}, 0.15)`;\n        return {\n            className: style.className,\n            title: style.displayName,\n            css\n        };\n    }\n    /**\n     * Converts an editor selection to a code mirror selection.\n     */\n    _toCodeMirrorSelection(selection) {\n        return {\n            anchor: this._toCodeMirrorPosition(selection.start),\n            head: this._toCodeMirrorPosition(selection.end)\n        };\n    }\n    /**\n     * Convert a code mirror position to an editor position.\n     */\n    _toPosition(position) {\n        return {\n            line: position.line,\n            column: position.ch\n        };\n    }\n    /**\n     * Convert an editor position to a code mirror position.\n     */\n    _toCodeMirrorPosition(position) {\n        return {\n            line: position.line,\n            ch: position.column\n        };\n    }\n    /**\n     * Handle model value changes.\n     */\n    _onValueChanged(value, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        this._changeGuard = true;\n        const doc = this.doc;\n        switch (args.type) {\n            case 'insert': {\n                const pos = doc.posFromIndex(args.start);\n                // Replace the range, including a '+input' orign,\n                // which indicates that CodeMirror may merge changes\n                // for undo/redo purposes.\n                doc.replaceRange(args.value, pos, pos, '+input');\n                break;\n            }\n            case 'remove': {\n                const from = doc.posFromIndex(args.start);\n                const to = doc.posFromIndex(args.end);\n                // Replace the range, including a '+input' orign,\n                // which indicates that CodeMirror may merge changes\n                // for undo/redo purposes.\n                doc.replaceRange('', from, to, '+input');\n                break;\n            }\n            case 'set':\n                doc.setValue(args.value);\n                break;\n            default:\n                break;\n        }\n        this._changeGuard = false;\n    }\n    /**\n     * Handles document changes.\n     */\n    _beforeDocChanged(doc, change) {\n        if (this._changeGuard) {\n            return;\n        }\n        this._changeGuard = true;\n        const value = this._model.value;\n        const start = doc.indexFromPos(change.from);\n        const end = doc.indexFromPos(change.to);\n        const inserted = change.text.join('\\n');\n        if (end !== start) {\n            value.remove(start, end);\n        }\n        if (inserted) {\n            value.insert(start, inserted);\n        }\n        this._changeGuard = false;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the editor's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'focus':\n                this._evtFocus(event);\n                break;\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'scroll':\n                this._evtScroll();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `focus` events for the editor.\n     */\n    _evtFocus(event) {\n        if (this._needsRefresh) {\n            this.refresh();\n        }\n        this.host.classList.add('jp-mod-focused');\n        // Update the selections on editor gaining focus because\n        // the onCursorActivity function filters usual cursor events\n        // based on the editor's focus.\n        this._onCursorActivity();\n    }\n    /**\n     * Handle `blur` events for the editor.\n     */\n    _evtBlur(event) {\n        this.host.classList.remove('jp-mod-focused');\n    }\n    /**\n     * Handle `scroll` events for the editor.\n     */\n    _evtScroll() {\n        // Remove any active hover.\n        this._clearHover();\n    }\n    /**\n     * Clear the hover for a caret, due to things like\n     * scrolling, resizing, deactivation, etc, where\n     * the position is no longer valid.\n     */\n    _clearHover() {\n        if (this._caretHover) {\n            window.clearTimeout(this._hoverTimeout);\n            document.body.removeChild(this._caretHover);\n            this._caretHover = null;\n        }\n    }\n    /**\n     * Construct a caret element representing the position\n     * of a collaborator's cursor.\n     */\n    _getCaret(collaborator) {\n        // FIXME-TRANS: Is this localizable?\n        const name = collaborator ? collaborator.displayName : 'Anonymous';\n        const color = collaborator\n            ? collaborator.color\n            : this._selectionStyle.color;\n        const caret = document.createElement('span');\n        caret.className = COLLABORATOR_CURSOR_CLASS;\n        caret.style.borderBottomColor = color;\n        caret.onmouseenter = () => {\n            this._clearHover();\n            this._hoverId = collaborator.sessionId;\n            const rect = caret.getBoundingClientRect();\n            // Construct and place the hover box.\n            const hover = document.createElement('div');\n            hover.className = COLLABORATOR_HOVER_CLASS;\n            hover.style.left = String(rect.left) + 'px';\n            hover.style.top = String(rect.bottom) + 'px';\n            hover.textContent = name;\n            hover.style.backgroundColor = color;\n            // If the user mouses over the hover, take over the timer.\n            hover.onmouseenter = () => {\n                window.clearTimeout(this._hoverTimeout);\n            };\n            hover.onmouseleave = () => {\n                this._hoverTimeout = window.setTimeout(() => {\n                    this._clearHover();\n                }, HOVER_TIMEOUT);\n            };\n            this._caretHover = hover;\n            document.body.appendChild(hover);\n        };\n        caret.onmouseleave = () => {\n            this._hoverTimeout = window.setTimeout(() => {\n                this._clearHover();\n            }, HOVER_TIMEOUT);\n        };\n        return caret;\n    }\n    /**\n     * Check for an out of sync editor.\n     */\n    _checkSync() {\n        const change = this._lastChange;\n        if (!change) {\n            return;\n        }\n        this._lastChange = null;\n        const editor = this._editor;\n        const doc = editor.getDoc();\n        if (doc.getValue() === this._model.value.text) {\n            return;\n        }\n        void showDialog({\n            title: this._trans.__('Code Editor out of Sync'),\n            body: this._trans.__('Please open your browser JavaScript console for bug report instructions')\n        });\n        console.warn('Please paste the following to https://github.com/jupyterlab/jupyterlab/issues/2951');\n        console.warn(JSON.stringify({\n            model: this._model.value.text,\n            view: doc.getValue(),\n            selections: this.getSelections(),\n            cursor: this.getCursorPosition(),\n            lineSep: editor.getOption('lineSeparator'),\n            mode: editor.getOption('mode'),\n            change\n        }));\n    }\n}\n/**\n * The namespace for `CodeMirrorEditor` statics.\n */\n(function (CodeMirrorEditor) {\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeMirrorEditor.defaultConfig = Object.assign(Object.assign({}, CodeEditor.defaultConfig), { mode: 'null', theme: 'jupyter', smartIndent: true, electricChars: true, keyMap: 'default', extraKeys: null, gutters: [], fixedGutter: true, showCursorWhenSelecting: false, coverGutterNextToScrollbar: false, dragDrop: true, lineSeparator: null, scrollbarStyle: 'native', lineWiseCopyCut: true, scrollPastEnd: false, styleActiveLine: false, styleSelectedText: true, selectionPointer: false, rulers: [], foldGutter: false, handlePaste: true });\n    /**\n     * Add a command to CodeMirror.\n     *\n     * @param name - The name of the command to add.\n     *\n     * @param command - The command function.\n     */\n    function addCommand(name, command) {\n        CodeMirror.commands[name] = command;\n    }\n    CodeMirrorEditor.addCommand = addCommand;\n})(CodeMirrorEditor || (CodeMirrorEditor = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    function createEditor(host, config) {\n        const { autoClosingBrackets, fontFamily, fontSize, insertSpaces, lineHeight, lineWrap, wordWrapColumn, tabSize, readOnly } = config, otherOptions = __rest(config, [\"autoClosingBrackets\", \"fontFamily\", \"fontSize\", \"insertSpaces\", \"lineHeight\", \"lineWrap\", \"wordWrapColumn\", \"tabSize\", \"readOnly\"]);\n        const bareConfig = Object.assign({ autoCloseBrackets: autoClosingBrackets ? {} : false, indentUnit: tabSize, indentWithTabs: !insertSpaces, lineWrapping: lineWrap === 'off' ? false : true, readOnly }, otherOptions);\n        return CodeMirror(el => {\n            if (fontFamily) {\n                el.style.fontFamily = fontFamily;\n            }\n            if (fontSize) {\n                el.style.fontSize = fontSize + 'px';\n            }\n            if (lineHeight) {\n                el.style.lineHeight = lineHeight.toString();\n            }\n            if (readOnly) {\n                el.classList.add(READ_ONLY_CLASS);\n            }\n            if (lineWrap === 'wordWrapColumn') {\n                const lines = el.querySelector('.CodeMirror-lines');\n                lines.style.width = `${wordWrapColumn}ch`;\n            }\n            if (lineWrap === 'bounded') {\n                const lines = el.querySelector('.CodeMirror-lines');\n                lines.style.maxWidth = `${wordWrapColumn}ch`;\n            }\n            host.appendChild(el);\n        }, bareConfig);\n    }\n    Private.createEditor = createEditor;\n    /**\n     * Indent or insert a tab as appropriate.\n     */\n    function indentMoreOrinsertTab(cm) {\n        const doc = cm.getDoc();\n        const from = doc.getCursor('from');\n        const to = doc.getCursor('to');\n        const sel = !posEq(from, to);\n        if (sel) {\n            CodeMirror.commands['indentMore'](cm);\n            return;\n        }\n        // Check for start of line.\n        const line = doc.getLine(from.line);\n        const before = line.slice(0, from.ch);\n        if (/^\\s*$/.test(before)) {\n            CodeMirror.commands['indentMore'](cm);\n        }\n        else {\n            if (cm.getOption('indentWithTabs')) {\n                CodeMirror.commands['insertTab'](cm);\n            }\n            else {\n                CodeMirror.commands['insertSoftTab'](cm);\n            }\n        }\n    }\n    Private.indentMoreOrinsertTab = indentMoreOrinsertTab;\n    /**\n     * Delete spaces to the previous tab stob in a codemirror editor.\n     */\n    function delSpaceToPrevTabStop(cm) {\n        var _a;\n        const doc = cm.getDoc();\n        // default tabsize is 2, according to codemirror docs: https://codemirror.net/doc/manual.html#config\n        const tabSize = (_a = cm.getOption('indentUnit')) !== null && _a !== void 0 ? _a : 2;\n        const ranges = doc.listSelections(); // handle multicursor\n        for (let i = ranges.length - 1; i >= 0; i--) {\n            // iterate reverse so any deletions don't overlap\n            const head = ranges[i].head;\n            const anchor = ranges[i].anchor;\n            const isSelection = !posEq(head, anchor);\n            if (isSelection) {\n                doc.replaceRange('', anchor, head);\n            }\n            else {\n                const line = doc.getLine(head.line).substring(0, head.ch);\n                if (line.match(/^\\ +$/) !== null) {\n                    // delete tabs\n                    const prevTabStop = (Math.ceil(head.ch / tabSize) - 1) * tabSize;\n                    const from = CodeMirror.Pos(head.line, prevTabStop);\n                    doc.replaceRange('', from, head);\n                }\n                else {\n                    // delete non-tabs\n                    const from = cm.findPosH(head, -1, 'char', false);\n                    doc.replaceRange('', from, head);\n                }\n            }\n        }\n    }\n    Private.delSpaceToPrevTabStop = delSpaceToPrevTabStop;\n    /**\n     * Test whether two CodeMirror positions are equal.\n     */\n    function posEq(a, b) {\n        return a.line === b.line && a.ch === b.ch;\n    }\n    Private.posEq = posEq;\n    /**\n     * Get the list of active gutters\n     *\n     * @param config Editor configuration\n     */\n    function getActiveGutters(config) {\n        // The order of the classes will be the gutters order\n        const classToSwitch = {\n            'CodeMirror-linenumbers': 'lineNumbers',\n            'CodeMirror-foldgutter': 'codeFolding'\n        };\n        return Object.keys(classToSwitch).filter(gutter => config[classToSwitch[gutter]]);\n    }\n    /**\n     * Set a config option for the editor.\n     */\n    function setOption(editor, option, value, config) {\n        const el = editor.getWrapperElement();\n        switch (option) {\n            case 'lineWrap': {\n                const lineWrapping = value === 'off' ? false : true;\n                const lines = el.querySelector('.CodeMirror-lines');\n                const maxWidth = value === 'bounded' ? `${config.wordWrapColumn}ch` : null;\n                const width = value === 'wordWrapColumn' ? `${config.wordWrapColumn}ch` : null;\n                lines.style.setProperty('max-width', maxWidth);\n                lines.style.setProperty('width', width);\n                editor.setOption('lineWrapping', lineWrapping);\n                break;\n            }\n            case 'wordWrapColumn': {\n                const { lineWrap } = config;\n                if (lineWrap === 'wordWrapColumn' || lineWrap === 'bounded') {\n                    const lines = el.querySelector('.CodeMirror-lines');\n                    const prop = lineWrap === 'wordWrapColumn' ? 'width' : 'maxWidth';\n                    lines.style[prop] = `${value}ch`;\n                }\n                break;\n            }\n            case 'tabSize':\n                editor.setOption('indentUnit', value);\n                break;\n            case 'insertSpaces':\n                editor.setOption('indentWithTabs', !value);\n                break;\n            case 'autoClosingBrackets':\n                editor.setOption('autoCloseBrackets', value);\n                break;\n            case 'rulers': {\n                const rulers = value;\n                editor.setOption('rulers', rulers.map(column => {\n                    return {\n                        column,\n                        className: 'jp-CodeMirror-ruler'\n                    };\n                }));\n                break;\n            }\n            case 'readOnly':\n                el.classList.toggle(READ_ONLY_CLASS, value);\n                editor.setOption(option, value);\n                break;\n            case 'fontFamily':\n                el.style.fontFamily = value;\n                break;\n            case 'fontSize':\n                el.style.setProperty('font-size', value ? value + 'px' : null);\n                break;\n            case 'lineHeight':\n                el.style.lineHeight = (value ? value.toString() : null);\n                break;\n            case 'gutters':\n                editor.setOption(option, getActiveGutters(config));\n                break;\n            case 'lineNumbers':\n                editor.setOption(option, value);\n                editor.setOption('gutters', getActiveGutters(config));\n                break;\n            case 'codeFolding':\n                editor.setOption('foldGutter', value);\n                editor.setOption('gutters', getActiveGutters(config));\n                break;\n            default:\n                editor.setOption(option, value);\n                break;\n        }\n    }\n    Private.setOption = setOption;\n})(Private || (Private = {}));\n/**\n * Add a CodeMirror command to delete until previous non blanking space\n * character or first multiple of tabsize tabstop.\n */\nCodeMirrorEditor.addCommand('delSpaceToPrevTabStop', Private.delSpaceToPrevTabStop);\n/**\n * Add a CodeMirror command to indent or insert a tab as appropriate.\n */\nCodeMirrorEditor.addCommand('indentMoreOrinsertTab', Private.indentMoreOrinsertTab);\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { CodeMirrorEditor } from './editor';\n/**\n * CodeMirror editor factory.\n */\nexport class CodeMirrorEditorFactory {\n    /**\n     * Construct an IEditorFactoryService for CodeMirrorEditors.\n     */\n    constructor(defaults = {}, translator) {\n        /**\n         * Create a new editor for inline code.\n         */\n        this.newInlineEditor = (options) => {\n            options.host.dataset.type = 'inline';\n            return new CodeMirrorEditor(Object.assign(Object.assign({}, options), { config: Object.assign(Object.assign({}, this.inlineCodeMirrorConfig), (options.config || {})), translator: this.translator }));\n        };\n        /**\n         * Create a new editor for a full document.\n         */\n        this.newDocumentEditor = (options) => {\n            options.host.dataset.type = 'document';\n            return new CodeMirrorEditor(Object.assign(Object.assign({}, options), { config: Object.assign(Object.assign({}, this.documentCodeMirrorConfig), (options.config || {})), translator: this.translator }));\n        };\n        this.translator = translator || nullTranslator;\n        this.inlineCodeMirrorConfig = Object.assign(Object.assign(Object.assign({}, CodeMirrorEditor.defaultConfig), { extraKeys: {\n                'Cmd-Right': 'goLineRight',\n                End: 'goLineRight',\n                'Cmd-Left': 'goLineLeft',\n                Tab: 'indentMoreOrinsertTab',\n                'Shift-Tab': 'indentLess',\n                'Cmd-/': 'toggleComment',\n                'Ctrl-/': 'toggleComment'\n            } }), defaults);\n        this.documentCodeMirrorConfig = Object.assign(Object.assign(Object.assign({}, CodeMirrorEditor.defaultConfig), { extraKeys: {\n                Tab: 'indentMoreOrinsertTab',\n                'Shift-Tab': 'indentLess',\n                'Cmd-/': 'toggleComment',\n                'Ctrl-/': 'toggleComment',\n                'Shift-Enter': () => {\n                    /* no-op */\n                }\n            }, lineNumbers: true, scrollPastEnd: true }), defaults);\n    }\n}\n//# sourceMappingURL=factory.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Mode } from './mode';\n/**\n * The mime type service for CodeMirror.\n */\nexport class CodeMirrorMimeTypeService {\n    /**\n     * Returns a mime type for the given language info.\n     *\n     * #### Notes\n     * If a mime type cannot be found returns the defaul mime type `text/plain`, never `null`.\n     */\n    getMimeTypeByLanguage(info) {\n        const ext = info.file_extension || '';\n        return Mode.findBest(info.codemirror_mode || {\n            mimetype: info.mimetype,\n            name: info.name,\n            ext: [ext.split('.').slice(-1)[0]]\n        }).mime;\n    }\n    /**\n     * Returns a mime type for the given file path.\n     *\n     * #### Notes\n     * If a mime type cannot be found returns the default mime type `text/plain`, never `null`.\n     */\n    getMimeTypeByFilePath(path) {\n        const ext = PathExt.extname(path);\n        if (ext === '.ipy') {\n            return 'text/x-python';\n        }\n        else if (ext === '.md') {\n            return 'text/x-ipythongfm';\n        }\n        const mode = Mode.findByFileName(path) || Mode.findBest('');\n        return mode.mime;\n    }\n}\n//# sourceMappingURL=mimetype.js.map","import React from 'react';\nimport { VDomRenderer, VDomModel } from '@jupyterlab/apputils';\nimport { interactiveItem, showPopup, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Mode } from '.';\nimport { Menu } from '@lumino/widgets';\n/**\n * A pure function that returns a tsx component for an editor syntax item.\n *\n * @param props: the props for the component.\n *\n * @returns an editor syntax component.\n */\nfunction EditorSyntaxComponent(props) {\n    return React.createElement(TextItem, { source: props.mode, onClick: props.handleClick });\n}\n/**\n * StatusBar item to change the language syntax highlighting of the file editor.\n */\nexport class EditorSyntaxStatus extends VDomRenderer {\n    /**\n     * Construct a new VDomRenderer for the status item.\n     */\n    constructor(opts) {\n        super(new EditorSyntaxStatus.Model());\n        /**\n         * Create a menu for selecting the mode of the editor.\n         */\n        this._handleClick = () => {\n            const modeMenu = new Menu({ commands: this._commands });\n            const command = 'codemirror:change-mode';\n            if (this._popup) {\n                this._popup.dispose();\n            }\n            Mode.getModeInfo()\n                .sort((a, b) => {\n                const aName = a.name || '';\n                const bName = b.name || '';\n                return aName.localeCompare(bName);\n            })\n                .forEach(spec => {\n                if (spec.mode.indexOf('brainf') === 0) {\n                    return;\n                }\n                const args = {\n                    insertSpaces: true,\n                    name: spec.name\n                };\n                modeMenu.addItem({\n                    command,\n                    args\n                });\n            });\n            this._popup = showPopup({\n                body: modeMenu,\n                anchor: this,\n                align: 'left'\n            });\n        };\n        this._popup = null;\n        this._commands = opts.commands;\n        this.translator = opts.translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        this.addClass(interactiveItem);\n        this.title.caption = trans.__('Change text editor syntax highlighting');\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        return (React.createElement(EditorSyntaxComponent, { mode: this.model.mode, handleClick: this._handleClick }));\n    }\n}\n/**\n * A namespace for EditorSyntax statics.\n */\n(function (EditorSyntaxStatus) {\n    /**\n     * A VDomModel for the current editor/mode combination.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * If the editor mode changes, update the model.\n             */\n            this._onMIMETypeChange = (mode, change) => {\n                const oldMode = this._mode;\n                const spec = Mode.findByMIME(change.newValue);\n                this._mode = spec.name || spec.mode;\n                this._triggerChange(oldMode, this._mode);\n            };\n            this._mode = '';\n            this._editor = null;\n        }\n        /**\n         * The current mode for the editor. If no editor is present,\n         * returns the empty string.\n         */\n        get mode() {\n            return this._mode;\n        }\n        /**\n         * The current editor for the application editor tracker.\n         */\n        get editor() {\n            return this._editor;\n        }\n        set editor(editor) {\n            const oldEditor = this._editor;\n            if (oldEditor !== null) {\n                oldEditor.model.mimeTypeChanged.disconnect(this._onMIMETypeChange);\n            }\n            const oldMode = this._mode;\n            this._editor = editor;\n            if (this._editor === null) {\n                this._mode = '';\n            }\n            else {\n                const spec = Mode.findByMIME(this._editor.model.mimeType);\n                this._mode = spec.name || spec.mode;\n                this._editor.model.mimeTypeChanged.connect(this._onMIMETypeChange);\n            }\n            this._triggerChange(oldMode, this._mode);\n        }\n        /**\n         * Trigger a rerender of the model.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState !== newState) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    EditorSyntaxStatus.Model = Model;\n})(EditorSyntaxStatus || (EditorSyntaxStatus = {}));\n//# sourceMappingURL=syntaxstatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The CodeMirror token.\n */\nexport const ICodeMirror = new Token('@jupyterlab/codemirror:ICodeMirror');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror\n */\nimport { CodeMirrorEditorFactory } from './factory';\nimport { CodeMirrorMimeTypeService } from './mimetype';\nexport * from './mode';\nexport * from './editor';\nexport * from './factory';\nexport * from './mimetype';\nexport * from './syntaxstatus';\nexport * from './tokens';\n/**\n * The default editor services.\n */\nexport const editorServices = {\n    factoryService: new CodeMirrorEditorFactory(),\n    mimeTypeService: new CodeMirrorMimeTypeService()\n};\n/**\n * FIXME-TRANS: Maybe an option to be able to pass a translator to the factories?\n *\n\nexport function getEditorServices(translator: ITranslator): IEditorServices {\n  return {\n    factoryService: new CodeMirrorEditorFactory({}, translator),\n    mimeTypeService: new CodeMirrorMimeTypeService(translator)\n  };\n}\n */\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
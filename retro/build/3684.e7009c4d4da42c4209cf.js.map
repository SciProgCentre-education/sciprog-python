{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/docprovider/lib/yprovider.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/docprovider/lib/mock.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/tree-extension/node_modules/@jupyterlab/docprovider/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/mutex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js"],"names":["messageHandlers","encoder","decoder","provider","emitSynced","messageType","encoding","syncMessageType","sync","doc","synced","awareness","Array","from","getStates","keys","decoding","auth","permissionDeniedHandler","reason","console","warn","url","readMessage","buf","messageHandler","error","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","onmessage","event","wsLastMessageReceived","time","Uint8Array","data","send","onclose","filter","client","clientID","emit","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","super","length","slice","encodedParams","this","mutex","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","update","origin","on","_awarenessUpdateHandler","added","updated","removed","changedClients","concat","window","addEventListener","_checkInterval","close","messageReconnectTimeout","state","clearInterval","disconnect","off","destroy","encoderSync","encoderState","encoderAwarenessQuery","Map","disconnectBc","connectBc","WebSocketProviderWithLocks","options","guid","ymodel","ydoc","_currentLockRequest","_initialContentRequest","timestamp","lockRequest","resolve","initialContent","byteLength","initialContentRequest","isInitialized","onConnectionStatus","bind","promise","reject","Promise","_resolve","_reject","_sendMessage","lock","acquireLock","requestInitialContent","putInitializedState","releaseLock","intervalID","_finally","then","message","once","ProviderMock","IDocumentProviderFactory","Token","channels","BC","BroadcastChannel","room","e","key","newValue","getChannel","subs","Set","bc","forEach","sub","subscribe","f","add","unsubscribe","delete","publish","c","postMessage","createMutex","token","g","undefined","encodeQueryParams","val","encodeURIComponent","join","readAuthMessage","y","messageYjsSyncStep1","messageYjsSyncStep2","writeSyncStep1","sv","writeSyncStep2","encodedStateVector","readSyncStep2","transactionOrigin","writeUpdate","readUpdate","readSyncMessage","readSyncStep1","Error"],"mappings":"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","file":"3684.e7009c4d4da42c4209cf.js","sourcesContent":["/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n      })\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as Y from 'yjs';\nimport { WebsocketProvider } from 'y-websocket';\nimport * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\n/**\n * A class to provide Yjs synchronization over Websocket.\n */\nexport class WebSocketProviderWithLocks extends WebsocketProvider {\n    /**\n     * Construct a new WebSocketProviderWithLocks\n     *\n     * @param options The instantiation options for a WebSocketProviderWithLocks\n     */\n    constructor(options) {\n        super(options.url, options.guid, options.ymodel.ydoc, {\n            awareness: options.ymodel.awareness\n        });\n        this._currentLockRequest = null;\n        this._initialContentRequest = null;\n        // Message handler that confirms when a lock has been acquired\n        this.messageHandlers[127] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // acquired lock\n            const timestamp = decoding.readUint32(decoder);\n            const lockRequest = this._currentLockRequest;\n            this._currentLockRequest = null;\n            if (lockRequest) {\n                lockRequest.resolve(timestamp);\n            }\n        };\n        // Message handler that receives the initial content\n        this.messageHandlers[125] = (encoder, decoder, provider, emitSynced, messageType) => {\n            // received initial content\n            const initialContent = decoding.readTailAsUint8Array(decoder);\n            // Apply data from server\n            if (initialContent.byteLength > 0) {\n                setTimeout(() => {\n                    Y.applyUpdate(this.doc, initialContent);\n                }, 0);\n            }\n            const initialContentRequest = this._initialContentRequest;\n            this._initialContentRequest = null;\n            if (initialContentRequest) {\n                initialContentRequest.resolve(initialContent.byteLength > 0);\n            }\n        };\n        this.isInitialized = false;\n        this.onConnectionStatus = this.onConnectionStatus.bind(this);\n        this.on('status', this.onConnectionStatus);\n    }\n    /**\n     * Resolves to true if the initial content has been initialized on the server. false otherwise.\n     */\n    requestInitialContent() {\n        if (this._initialContentRequest) {\n            return this._initialContentRequest.promise;\n        }\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._initialContentRequest = { promise, resolve, reject };\n        this._sendMessage(new Uint8Array([125]));\n        // Resolve with true if the server doesn't respond for some reason.\n        // In case of a connection problem, we don't want the user to re-initialize the window.\n        // Instead wait for y-websocket to connect to the server.\n        // @todo maybe we should reload instead..\n        setTimeout(() => resolve(false), 1000);\n        return promise;\n    }\n    async onConnectionStatus(status) {\n        if (this.isInitialized && status.status === 'connected') {\n            const lock = await this.acquireLock();\n            const contentIsInitialized = await this.requestInitialContent();\n            if (!contentIsInitialized) {\n                this.putInitializedState();\n            }\n            this.releaseLock(lock);\n        }\n    }\n    putInitializedState() {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, 124);\n        encoding.writeUint8Array(encoder, Y.encodeStateAsUpdate(this.doc));\n        this._sendMessage(encoding.toUint8Array(encoder));\n        this.isInitialized = true;\n    }\n    acquireLock() {\n        if (this._currentLockRequest) {\n            return this._currentLockRequest.promise;\n        }\n        this._sendMessage(new Uint8Array([127]));\n        // try to acquire lock in regular interval\n        const intervalID = setInterval(() => {\n            if (this.wsconnected) {\n                // try to acquire lock\n                this._sendMessage(new Uint8Array([127]));\n            }\n        }, 500);\n        let resolve, reject;\n        const promise = new Promise((_resolve, _reject) => {\n            resolve = _resolve;\n            reject = _reject;\n        });\n        this._currentLockRequest = { promise, resolve, reject };\n        const _finally = () => {\n            clearInterval(intervalID);\n        };\n        promise.then(_finally, _finally);\n        return promise;\n    }\n    releaseLock(lock) {\n        const encoder = encoding.createEncoder();\n        // reply with release lock\n        encoding.writeVarUint(encoder, 126);\n        encoding.writeUint32(encoder, lock);\n        // releasing lock\n        this._sendMessage(encoding.toUint8Array(encoder));\n    }\n    _sendMessage(message) {\n        // send once connected\n        const send = () => {\n            setTimeout(() => {\n                if (this.wsconnected) {\n                    this.ws.send(message);\n                }\n                else {\n                    this.once('status', send);\n                }\n            }, 0);\n        };\n        send();\n    }\n}\n//# sourceMappingURL=yprovider.js.map","export class ProviderMock {\n    requestInitialContent() {\n        return Promise.resolve(false);\n    }\n    putInitializedState() {\n        /* nop */\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        /* nop */\n    }\n    destroy() {\n        /* nop */\n    }\n}\n//# sourceMappingURL=mock.js.map","import { Token } from '@lumino/coreutils';\n/**\n * The default document provider token.\n */\nexport const IDocumentProviderFactory = new Token('@jupyterlab/docprovider:IDocumentProviderFactory');\n//# sourceMappingURL=tokens.js.map","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n"],"sourceRoot":""}
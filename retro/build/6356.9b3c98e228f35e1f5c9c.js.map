{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/shared-models/lib/ymodels.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/environment.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/conditions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/map.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/storage.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/string.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/process/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/awareness.js"],"names":["deepCopy","o","JSON","parse","stringify","YDocument","this","isDisposed","ydoc","source","getText","undoManager","trackedOrigins","Set","awareness","_changed","Signal","f","undoable","transact","destroy","undoStack","length","redoStack","undo","redo","clear","YFile","super","_modelObserver","event","changes","sourceChange","delta","emit","ysource","observe","toString","value","ytext","delete","insert","start","end","YNotebook","_onYCellsChanged","added","forEach","item","type","content","_ycellMapping","has","set","createCellFromType","cell","get","_notebook","_undoManager","deleted","model","dispose","index","cellsChange","d","insertedCells","map","ycell","push","cells","splice","retain","ycells","getArray","ymeta","getMap","ymodel","Map","nbformat_minor","nbformat","toArray","insertCells","fromIndex","toIndex","fromCell","getCell","clone","deleteCell","insertCell","deleteCellRange","from","to","meta","orig_nbformat","Object","assign","getMetadata","unobserve","YCodeCell","YMarkdownCell","YRawCell","Error","createStandaloneCell","cellType","id","createStandalone","YBaseCell","isStandalone","events","sourceEvent","find","target","outputEvent","outputsChange","modelEvent","keysChanged","change","keys","metadataChange","oldValue","undefined","newValue","executionCountChange","_prevSourceLength","observeDeep","_a","notebook","doc","UUID","prototype","cell_type","create","getSource","getId","Self","constructor","unobserveDeep","metadata","count","outputs","youtputs","fin","getOutputs","execution_count","attachments","getAttachments","isNode","process","release","test","name","isBrowser","window","params","navigator","platform","args","computeParams","pargs","argv","currParamName","i","parg","location","search","slice","split","kv","key","string","getParam","defaultVal","getVariable","v","toUpperCase","storage","hasParam","copy","m","r","k","setIfUndefined","createT","res","any","_localStorage","usePolyfill","localStorage","e","varStorage","onChange","eventHandler","addEventListener","fromCharCode","String","trimLeftRegex","fromCodePoint","fromCamelCaseRegex","fromCamelCase","s","separator","replace","trimLeft","match","toLowerCase","utf8TextEncoder","TextEncoder","encodeUtf8","str","encode","encodedString","unescape","encodeURIComponent","len","buf","Uint8Array","codePointAt","utf8TextDecoder","TextDecoder","fatal","ignoreBOM","decode","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","arguments","apply","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Awareness","clientID","states","_checkInterval","setInterval","now","getLocalState","outdatedTimeout","lastUpdated","setLocalState","remove","clientid","removeAwarenessStates","clearInterval","state","currLocalMeta","clock","prevState","updated","filteredUpdated","removed","field","clients","origin","curMeta","encodeAwarenessUpdate","encoder","applyAwarenessUpdate","update","decoder","timestamp","clientMeta","currClock"],"mappings":"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","file":"6356.9b3c98e228f35e1f5c9c.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Signal } from '@lumino/signaling';\nimport { UUID } from '@lumino/coreutils';\nimport * as Y from 'yjs';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { Awareness } from 'y-protocols/awareness';\nconst deepCopy = (o) => JSON.parse(JSON.stringify(o));\nexport class YDocument {\n    constructor() {\n        this.isDisposed = false;\n        this.ydoc = new Y.Doc();\n        this.source = this.ydoc.getText('source');\n        this.undoManager = new Y.UndoManager([this.source], {\n            trackedOrigins: new Set([this])\n        });\n        this.awareness = new Awareness(this.ydoc);\n        this._changed = new Signal(this);\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.ydoc.transact(f, undoable ? this : null);\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.isDisposed = true;\n        this.ydoc.destroy();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        this.undoManager.clear();\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n}\nexport class YFile extends YDocument {\n    constructor() {\n        super();\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (event) => {\n            const changes = {};\n            changes.sourceChange = event.changes.delta;\n            this._changed.emit(changes);\n        };\n        this.ysource = this.ydoc.getText('source');\n        this.ysource.observe(this._modelObserver);\n    }\n    static create() {\n        return new YFile();\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ysource.toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        this.transact(() => {\n            const ytext = this.ysource;\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n}\n/**\n * Shared implementation of the Shared Document types.\n *\n * Shared cells can be inserted into a SharedNotebook.\n * Shared cells only start emitting events when they are connected to a SharedNotebook.\n *\n * \"Standalone\" cells must not be inserted into a (Shared)Notebook.\n * Standalone cells emit events immediately after they have been created, but they must not\n * be included into a (Shared)Notebook.\n */\nexport class YNotebook extends YDocument {\n    constructor() {\n        super();\n        /**\n         * Handle a change to the list of cells.\n         */\n        this._onYCellsChanged = (event) => {\n            // update the type⇔cell mapping by iterating through the addded/removed types\n            event.changes.added.forEach(item => {\n                const type = item.content.type;\n                if (!this._ycellMapping.has(type)) {\n                    this._ycellMapping.set(type, createCellFromType(type));\n                }\n                const cell = this._ycellMapping.get(type);\n                cell._notebook = this;\n                cell._undoManager = this.undoManager;\n            });\n            event.changes.deleted.forEach(item => {\n                const type = item.content.type;\n                const model = this._ycellMapping.get(type);\n                if (model) {\n                    model.dispose();\n                    this._ycellMapping.delete(type);\n                }\n            });\n            let index = 0;\n            // this reflects the event.changes.delta, but replaces the content of delta.insert with ycells\n            const cellsChange = [];\n            event.changes.delta.forEach((d) => {\n                if (d.insert != null) {\n                    const insertedCells = d.insert.map((ycell) => this._ycellMapping.get(ycell));\n                    cellsChange.push({ insert: insertedCells });\n                    this.cells.splice(index, 0, ...insertedCells);\n                    index += d.insert.length;\n                }\n                else if (d.delete != null) {\n                    cellsChange.push(d);\n                    this.cells.splice(index, d.delete);\n                }\n                else if (d.retain != null) {\n                    cellsChange.push(d);\n                    index += d.retain;\n                }\n            });\n            this._changed.emit({\n                cellsChange: cellsChange\n            });\n        };\n        this.ycells = this.ydoc.getArray('cells');\n        this.ymeta = this.ydoc.getMap('meta');\n        this.ymodel = this.ydoc.getMap('model');\n        this.undoManager = new Y.UndoManager([this.ycells], {\n            trackedOrigins: new Set([this])\n        });\n        this._ycellMapping = new Map();\n        this.nbformat_minor = nbformat.MINOR_VERSION;\n        this.nbformat = nbformat.MAJOR_VERSION;\n        this.ycells.observe(this._onYCellsChanged);\n        this.cells = this.ycells.toArray().map(ycell => {\n            if (!this._ycellMapping.has(ycell)) {\n                this._ycellMapping.set(ycell, createCellFromType(ycell));\n            }\n            return this._ycellMapping.get(ycell);\n        });\n    }\n    /**\n     * Get a shared cell by index.\n     *\n     * @param index: Cell's position.\n     *\n     * @returns The requested shared cell.\n     */\n    getCell(index) {\n        return this.cells[index];\n    }\n    /**\n     * Insert a shared cell into a specific position.\n     *\n     * @param index: Cell's position.\n     *\n     * @param cell: Cell to insert.\n     */\n    insertCell(index, cell) {\n        this.insertCells(index, [cell]);\n    }\n    /**\n     * Insert a list of shared cells into a specific position.\n     *\n     * @param index: Position to insert the cells.\n     *\n     * @param cells: Array of shared cells to insert.\n     */\n    insertCells(index, cells) {\n        cells.forEach(cell => {\n            this._ycellMapping.set(cell.ymodel, cell);\n            // cell.yawareness = this.yawareness;\n            // cell.yUndoManager = this.yUndoManager;\n        });\n        this.transact(() => {\n            this.ycells.insert(index, cells.map(cell => cell.ymodel));\n        });\n    }\n    /**\n     * Move a cell.\n     *\n     * @param fromIndex: Index of the cell to move.\n     *\n     * @param toIndex: New position of the cell.\n     */\n    moveCell(fromIndex, toIndex) {\n        this.transact(() => {\n            const fromCell = this.getCell(fromIndex).clone();\n            this.deleteCell(fromIndex);\n            this.insertCell(toIndex, fromCell);\n        });\n    }\n    /**\n     * Remove a cell.\n     *\n     * @param index: Index of the cell to remove.\n     */\n    deleteCell(index) {\n        this.deleteCellRange(index, index + 1);\n    }\n    /**\n     * Remove a range of cells.\n     *\n     * @param from: The start index of the range to remove (inclusive).\n     *\n     * @param to: The end index of the range to remove (exclusive).\n     */\n    deleteCellRange(from, to) {\n        this.transact(() => {\n            this.ycells.delete(from, to - from);\n        });\n    }\n    /**\n     * Returns the metadata associated with the notebook.\n     *\n     * @returns Notebook's metadata.\n     */\n    getMetadata() {\n        const meta = this.ymeta.get('metadata');\n        return meta ? deepCopy(meta) : { orig_nbformat: 1 };\n    }\n    /**\n     * Sets the metadata associated with the notebook.\n     *\n     * @param metadata: Notebook's metadata.\n     */\n    setMetadata(value) {\n        this.ymeta.set('metadata', deepCopy(value));\n    }\n    /**\n     * Updates the metadata associated with the notebook.\n     *\n     * @param value: Metadata's attribute to update.\n     */\n    updateMetadata(value) {\n        this.ymeta.set('metadata', Object.assign({}, this.getMetadata(), value));\n    }\n    /**\n     * Create a new YNotebook.\n     */\n    static create() {\n        return new YNotebook();\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.ycells.unobserve(this._onYCellsChanged);\n    }\n}\n/**\n * Create a new shared cell given the type.\n */\nexport const createCellFromType = (type) => {\n    switch (type.get('cell_type')) {\n        case 'code':\n            return new YCodeCell(type);\n        case 'markdown':\n            return new YMarkdownCell(type);\n        case 'raw':\n            return new YRawCell(type);\n        default:\n            throw new Error('Found unknown cell type');\n    }\n};\n/**\n * Create a new standalone cell given the type.\n */\nexport const createStandaloneCell = (cellType, id) => {\n    switch (cellType) {\n        case 'markdown':\n            return YMarkdownCell.createStandalone(id);\n        case 'code':\n            return YCodeCell.createStandalone(id);\n        default:\n            // raw\n            return YRawCell.createStandalone(id);\n    }\n};\nexport class YBaseCell {\n    constructor(ymodel) {\n        /**\n         * The notebook that this cell belongs to.\n         */\n        this._notebook = null;\n        /**\n         * Whether the cell is standalone or not.\n         *\n         * If the cell is standalone. It cannot be\n         * inserted into a YNotebook because the Yjs model is already\n         * attached to an anonymous Y.Doc instance.\n         */\n        this.isStandalone = false;\n        /**\n         * Handle a change to the ymodel.\n         */\n        this._modelObserver = (events) => {\n            const changes = {};\n            const sourceEvent = events.find(event => event.target === this.ymodel.get('source'));\n            if (sourceEvent) {\n                changes.sourceChange = sourceEvent.changes.delta;\n            }\n            const outputEvent = events.find(event => event.target === this.ymodel.get('outputs'));\n            if (outputEvent) {\n                changes.outputsChange = outputEvent.changes.delta;\n            }\n            const modelEvent = events.find(event => event.target === this.ymodel);\n            if (modelEvent && modelEvent.keysChanged.has('metadata')) {\n                const change = modelEvent.changes.keys.get('metadata');\n                changes.metadataChange = {\n                    oldValue: (change === null || change === void 0 ? void 0 : change.oldValue) ? change.oldValue : undefined,\n                    newValue: this.getMetadata()\n                };\n            }\n            if (modelEvent && modelEvent.keysChanged.has('execution_count')) {\n                const change = modelEvent.changes.keys.get('execution_count');\n                changes.executionCountChange = {\n                    oldValue: change.oldValue,\n                    newValue: this.ymodel.get('execution_count')\n                };\n            }\n            // The model allows us to replace the complete source with a new string. We express this in the Delta format\n            // as a replace of the complete string.\n            const ysource = this.ymodel.get('source');\n            if (modelEvent && modelEvent.keysChanged.has('source')) {\n                changes.sourceChange = [\n                    { delete: this._prevSourceLength },\n                    { insert: ysource.toString() }\n                ];\n            }\n            this._prevSourceLength = ysource.length;\n            this._changed.emit(changes);\n        };\n        this.isDisposed = false;\n        this._undoManager = null;\n        this._changed = new Signal(this);\n        this.ymodel = ymodel;\n        const ysource = ymodel.get('source');\n        this._prevSourceLength = ysource ? ysource.length : 0;\n        this.ymodel.observeDeep(this._modelObserver);\n    }\n    get ysource() {\n        return this.ymodel.get('source');\n    }\n    get awareness() {\n        var _a;\n        return ((_a = this.notebook) === null || _a === void 0 ? void 0 : _a.awareness) || null;\n    }\n    /**\n     * Perform a transaction. While the function f is called, all changes to the shared\n     * document are bundled into a single event.\n     */\n    transact(f, undoable = true) {\n        this.notebook && undoable\n            ? this.notebook.transact(f)\n            : this.ymodel.doc.transact(f, this);\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get undoManager() {\n        return this.notebook ? this.notebook.undoManager : this._undoManager;\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.redo();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    canUndo() {\n        return !!this.undoManager && this.undoManager.undoStack.length > 0;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    canRedo() {\n        return !!this.undoManager && this.undoManager.redoStack.length > 0;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndoHistory() {\n        var _a;\n        (_a = this.undoManager) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    /**\n     * The notebook that this cell belongs to.\n     */\n    get notebook() {\n        return this._notebook;\n    }\n    /**\n     * Create a new YRawCell that can be inserted into a YNotebook\n     */\n    static create(id = UUID.uuid4()) {\n        const ymodel = new Y.Map();\n        const ysource = new Y.Text();\n        ymodel.set('source', ysource);\n        ymodel.set('metadata', {});\n        ymodel.set('cell_type', this.prototype.cell_type);\n        ymodel.set('id', id);\n        return new this(ymodel);\n    }\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        const cell = this.create(id);\n        cell.isStandalone = true;\n        new Y.Doc().getArray().insert(0, [cell.ymodel]);\n        cell._undoManager = new Y.UndoManager([cell.ymodel], {\n            trackedOrigins: new Set([cell])\n        });\n        return cell;\n    }\n    /**\n     * Clone the cell.\n     *\n     * @todo clone should only be available in the specific implementations i.e. ISharedCodeCell\n     */\n    clone() {\n        const ymodel = new Y.Map();\n        const ysource = new Y.Text(this.getSource());\n        ymodel.set('source', ysource);\n        ymodel.set('metadata', this.getMetadata());\n        ymodel.set('cell_type', this.cell_type);\n        ymodel.set('id', this.getId());\n        const Self = this.constructor;\n        return new Self(ymodel);\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources.\n     */\n    dispose() {\n        this.ymodel.unobserveDeep(this._modelObserver);\n    }\n    /**\n     * Gets the cell attachments.\n     *\n     * @returns The cell attachments.\n     */\n    getAttachments() {\n        return this.ymodel.get('attachments');\n    }\n    /**\n     * Sets the cell attachments\n     *\n     * @param attchments: The cell attachments.\n     */\n    setAttachments(value) {\n        this.transact(() => {\n            if (value == null) {\n                this.ymodel.set('attachments', value);\n            }\n            else {\n                this.ymodel.delete('attachments');\n            }\n        });\n    }\n    /**\n     * Get cell id.\n     *\n     * @returns Cell id\n     */\n    getId() {\n        return this.ymodel.get('id');\n    }\n    /**\n     * Gets cell's source.\n     *\n     * @returns Cell's source.\n     */\n    getSource() {\n        return this.ymodel.get('source').toString();\n    }\n    /**\n     * Sets cell's source.\n     *\n     * @param value: New source.\n     */\n    setSource(value) {\n        const ytext = this.ymodel.get('source');\n        this.transact(() => {\n            ytext.delete(0, ytext.length);\n            ytext.insert(0, value);\n        });\n        // @todo Do we need proper replace semantic? This leads to issues in editor bindings because they don't switch source.\n        // this.ymodel.set('source', new Y.Text(value));\n    }\n    /**\n     * Replace content from `start' to `end` with `value`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param value: New source (optional).\n     */\n    updateSource(start, end, value = '') {\n        this.transact(() => {\n            const ysource = this.ysource;\n            // insert and then delete.\n            // This ensures that the cursor position is adjusted after the replaced content.\n            ysource.insert(start, value);\n            ysource.delete(start + value.length, end - start);\n        });\n    }\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        throw new Error('A YBaseCell must not be constructed');\n    }\n    /**\n     * Returns the metadata associated with the notebook.\n     *\n     * @returns Notebook's metadata.\n     */\n    getMetadata() {\n        return deepCopy(this.ymodel.get('metadata'));\n    }\n    /**\n     * Sets the metadata associated with the notebook.\n     *\n     * @param metadata: Notebook's metadata.\n     */\n    setMetadata(value) {\n        this.transact(() => {\n            this.ymodel.set('metadata', deepCopy(value));\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: this.cell_type,\n            source: this.getSource(),\n            metadata: this.getMetadata()\n        };\n    }\n}\nexport class YCodeCell extends YBaseCell {\n    /**\n     * The type of the cell.\n     */\n    get cell_type() {\n        return 'code';\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    get execution_count() {\n        return this.ymodel.get('execution_count');\n    }\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    set execution_count(count) {\n        this.transact(() => {\n            this.ymodel.set('execution_count', count);\n        });\n    }\n    /**\n     * Execution, display, or stream outputs.\n     */\n    getOutputs() {\n        return deepCopy(this.ymodel.get('outputs').toArray());\n    }\n    /**\n     * Replace all outputs.\n     */\n    setOutputs(outputs) {\n        const youtputs = this.ymodel.get('outputs');\n        this.transact(() => {\n            youtputs.delete(0, youtputs.length);\n            youtputs.insert(0, outputs);\n        });\n    }\n    /**\n     * Replace content from `start' to `end` with `outputs`.\n     *\n     * @param start: The start index of the range to replace (inclusive).\n     *\n     * @param end: The end index of the range to replace (exclusive).\n     *\n     * @param outputs: New outputs (optional).\n     */\n    updateOutputs(start, end, outputs = []) {\n        const youtputs = this.ymodel.get('outputs');\n        const fin = end < youtputs.length ? end - start : youtputs.length - start;\n        this.transact(() => {\n            youtputs.delete(start, fin);\n            youtputs.insert(start, outputs);\n        });\n    }\n    /**\n     * Create a new YCodeCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        const cell = super.create(id);\n        cell.ymodel.set('execution_count', 0); // for some default value\n        cell.ymodel.set('outputs', new Y.Array());\n        return cell;\n    }\n    /**\n     * Create a new YCodeCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        const cell = super.createStandalone(id);\n        cell.ymodel.set('execution_count', null); // for some default value\n        cell.ymodel.set('outputs', new Y.Array());\n        return cell;\n    }\n    /**\n     * Create a new YCodeCell that can be inserted into a YNotebook\n     *\n     * @todo clone should only be available in the specific implementations i.e. ISharedCodeCell\n     */\n    clone() {\n        const cell = super.clone();\n        const youtputs = new Y.Array();\n        youtputs.insert(0, this.getOutputs());\n        cell.ymodel.set('execution_count', this.execution_count); // for some default value\n        cell.ymodel.set('outputs', youtputs);\n        return cell;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'code',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            outputs: this.getOutputs(),\n            execution_count: this.execution_count\n        };\n    }\n}\nexport class YRawCell extends YBaseCell {\n    /**\n     * Create a new YRawCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Create a new YRawCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'raw',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\nexport class YMarkdownCell extends YBaseCell {\n    /**\n     * Create a new YMarkdownCell that can be inserted into a YNotebook\n     */\n    static create(id) {\n        return super.create(id);\n    }\n    /**\n     * Create a new YMarkdownCell that works standalone. It cannot be\n     * inserted into a YNotebook because the Yjs model is already\n     * attached to an anonymous Y.Doc instance.\n     */\n    static createStandalone(id) {\n        return super.createStandalone(id);\n    }\n    /**\n     * String identifying the type of cell.\n     */\n    get cell_type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return {\n            id: this.getId(),\n            cell_type: 'markdown',\n            source: this.getSource(),\n            metadata: this.getMetadata(),\n            attachments: this.getAttachments()\n        };\n    }\n}\nexport default YNotebook;\n//# sourceMappingURL=ymodels.js.map","/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module map\n */\n\nimport * as map from './map.js'\nimport * as string from './string.js'\nimport * as conditions from './conditions.js'\nimport * as storage from './storage.js'\n\n/* istanbul ignore next */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name)\n/* istanbul ignore next */\nexport const isBrowser = typeof window !== 'undefined' && !isNode\n/* istanbul ignore next */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\n/**\n * @type {Map<string,string>}\n */\nlet params\nconst args = []\n\n/* istanbul ignore next */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create()\n      const pargs = process.argv\n      let currParamName = null\n      /* istanbul ignore next */\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i]\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '')\n          }\n          currParamName = parg\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg)\n            currParamName = null\n          } else {\n            args.push(parg)\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '')\n      }\n    // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create()\n      // eslint-disable-next-line no-undef\n      ;(location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=')\n          params.set(`--${string.fromCamelCase(key, '-')}`, value)\n          params.set(`-${string.fromCamelCase(key, '-')}`, value)\n        }\n      })\n    } else {\n      params = map.create()\n    }\n  }\n  return params\n}\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasParam = name => computeParams().has(name)\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* istanbul ignore next */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal\n// export const getArgs = name => computeParams() && args\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* istanbul ignore next */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase()]) : conditions.undefinedToNull(storage.varStorage.getItem(name))\n\n/**\n * @param {string} name\n * @return {string|null}\n */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name)\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* istanbul ignore next */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null\n\n/* istanbul ignore next */\nexport const production = hasConf('production')\n","/**\n * Often used conditions.\n *\n * @module conditions\n */\n\n/**\n * @template T\n * @param {T|null|undefined} v\n * @return {T|null}\n */\n/* istanbul ignore next */\nexport const undefinedToNull = v => v === undefined ? null : v\n","/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n","/* global localStorage, addEventListener */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} newValue\n   */\n  setItem (key, newValue) {\n    this.map.set(key, newValue)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\nlet usePolyfill = true\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n    usePolyfill = false\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n\n/* istanbul ignore next */\n/**\n * A polyfill for `addEventListener('storage', event => {..})` that does nothing if the polyfill is being used.\n *\n * @param {function({ key: string, newValue: string, oldValue: string }): void} eventHandler\n * @function\n */\nexport const onChange = eventHandler => usePolyfill || addEventListener('storage', /** @type {any} */ (eventHandler))\n","/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n"],"sourceRoot":""}
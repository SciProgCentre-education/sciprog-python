{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/actions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/default-toolbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/celllist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/modelfactory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/notebooktools.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/tracker.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/widgetfactory.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/modestatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/truststatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/notebook/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/shared-models/lib/utils.js"],"names":["JUPYTER_CELL_MIME","NotebookActions","Private","executed","splitCell","notebook","model","activeCell","state","getState","deselectAll","nbModel","index","activeCellIndex","child","widgets","editor","selections","getSelections","orig","value","text","offsets","i","length","start","getOffsetAt","end","push","clones","clone","cloneCell","type","outputs","clear","slice","replace","cells","beginCompoundOperation","set","insert","endCompoundOperation","handleState","mergeCells","mergeAbove","toMerge","toDelete","primary","active","attachments","forEach","isSelectedOrActive","isRawCellModel","isMarkdownCellModel","key","keys","get","toJSON","cellModel","unshift","newModel","join","isCodeCellModel","fromJSON","cell","removeValue","MarkdownCell","rendered","deleteCells","insertAbove","contentFactory","createCell","notebookConfig","defaultCell","insertBelow","moveDown","move","select","deselect","moveUp","changeCellType","run","sessionContext","Promise","resolve","promise","runSelected","handleRunState","runAndAdvance","mode","runAndInsert","runAll","renderAllMarkdown","previousIndex","runAllAbove","runAllBelow","replaceSelection","_a","_b","call","selectAbove","possibleNextCell","inputHidden","selectBelow","maxCellIndex","extendSelectionAbove","toTop","extendContiguousSelectionTo","extendSelectionBelow","toBottom","selectAll","copy","copyOrCut","cut","paste","clipboard","Clipboard","hasData","values","getData","newCells","map","cell_type","createCodeCell","createMarkdownCell","createRawCell","deletable","metadata","reverse","remove","undo","sharedModel","redo","toggleAllLineNumbers","config","editorConfig","lineNumbers","code","markdown","raw","newConfig","Object","assign","clearOutputs","each","clearExecution","outputHidden","clearAllOutputs","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","enableOutputScrolling","outputsScrolled","disableOutputScrolling","selectLastRunCell","latestTime","latestCellIdx","cellIndx","execution","JSONExt","undefined","timestamp","toString","startTime","Date","setMarkdownHeader","level","Math","min","max","trust","translator","trans","nullTranslator","load","toArray","trusted","every","trustMessage","__","showDialog","body","buttons","Dialog","label","then","title","result","button","accept","wasFocused","node","contains","document","activeElement","scrollIfNeeded","activate","ElementExt","deletedCells","id","Signal","scroll","rect","inputArea","getBoundingClientRect","scrollToPosition","bottom","lastIndex","selected","filter","all","_c","emit","isTerminating","session","path","CodeCell","recordTiming","reply","splice","isDisposed","content","status","payload","setNextInput","source","newCell","ArrayExt","handlePayload","Error","catch","reason","message","startsWith","ran","runCell","results","update","executionCount","setPrompt","data","cellJSON","setData","newHeader","Array","matches","exec","ToolbarItems","createSaveButton","panel","onClick","context","readOnly","save","createCheckpoint","addToolbarButtonClass","ReactWidget","UseSignal","signal","fileChanged","ToolbarButtonComponent","icon","saveIcon","tooltip","enabled","contentsModel","writable","createInsertButton","ToolbarButton","addIcon","createCutButton","cutIcon","createCopyButton","copyIcon","createPasteButton","pasteIcon","createRunButton","runIcon","createRestartRunAllButton","dialogs","fastForwardIcon","sessionContextDialogs","restart","restarted","createCellTypeItem","CellTypeSwitcher","getDefaultItems","sessionDialogs","name","widget","Toolbar","super","this","handleChange","event","target","_notebook","handleKeyDown","keyCode","_trans","addClass","activeCellChanged","connect","selectionChanged","HTMLSelect","className","onChange","onKeyDown","CellList","modelDB","factory","_mutex","_isDisposed","_changed","_factory","_cellOrder","createList","_cellMap","ObservableMap","changed","_onOrderChanged","nbmodel","onSharedModelChanged","onModelDBChanged","self","change","transact","deleteCellRange","oldIndex","oldValues","newValues","insertLocation","newIndex","insertCells","switchSharedModel","from","currpos","cellsChange","delta","nbcell","insertAll","delete","removeRange","retain","arr","ArrayIterator","dispose","fromIndex","toIndex","startIndex","endIndex","canRedo","canUndo","isUndoAble","clearUndoHistory","order","existingCell","createValue","isStandalone","freshCell","NotebookModel","options","_dirty","_readOnly","_contentChanged","_stateChanged","_nbformat","_nbformatMinor","ModelDB","_isInitialized","isInitialized","defaultContentFactory","view","_cells","_onCellsChanged","createMap","has","languagePreference","_ensureMetadata","triggerContentChange","_deletedCells","newValue","oldValue","triggerStateChange","spec","info","JSON","stringify","parse","create","nbformat_minor","nbformat","useId","pushAll","origNbformat","orig_nbformat","msg","dirty","clearUndo","list","contentChanged","display_name","args","ContentFactory","codeCellContentFactory","CodeCellModel","opts","UUID","MarkdownCellModel","RawCellModel","NotebookModelFactory","_disposed","RankedPanel","Widget","_items","layout","PanelLayout","rank","rankItem","itemCmp","insertWidget","item","NotebookTools","_commonTools","_advancedTools","addWidget","Collapse","_tracker","tracker","currentChanged","_onActiveNotebookPanelChanged","_onActiveCellChanged","_onSelectionChanged","currentWidget","tool","section","notebookTools","MessageLoop","ActiveNotebookPanelMessage","ActiveCellMessage","_prevActiveNotebookModel","disconnect","_onActiveNotebookPanelMetadataChanged","activeNBModel","activeNotebookPanel","_toolChildren","_prevActiveCell","_onActiveCellMetadataChanged","SelectionMessage","sender","ObservableJSON","chain","children","ConflatableMessage","Tool","processMessage","onActiveNotebookPanelChanged","onActiveCellChanged","onSelectionChanged","onActiveCellMetadataChanged","onActiveNotebookPanelMetadataChanged","ActiveCellTool","_model","CodeEditor","count","_cellModel","_onValueChanged","mimeTypeChanged","_onMimeTypeChanged","promptNode","cloneNode","prompt","editorFactory","split","mimeType","editorWidget","CodeEditorWrapper","setOption","MetadataEditorTool","JSONEditor","titleNode","createElement","textContent","NotebookMetadataEditorTool","_update","nb","CellMetadataEditorTool","KeySelector","createSelectorNode","_getValue","_default","_setValue","_changeGuard","default","_validCellTypes","validCellTypes","_getter","getter","_setter","setter","getElementsByTagName","onValueChanged","selectNode","addEventListener","removeEventListener","disabled","cellType","indexOf","createSlideShowSelector","optionValueArray","slide_type","createNBConvertSelector","first","second","toLocaleUpperCase","optionNodes","option","h","VirtualDOM","Styling","NB_CELL_CLASS","EDIT_CLASS","COMMAND_CLASS","ACTIVE_CLASS","SELECTED_CLASS","OTHER_SELECTED_CLASS","DROP_TARGET_CLASS","DROP_SOURCE_CLASS","DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","StaticNotebook","_editorConfig","defaultEditorConfig","_notebookConfig","defaultNotebookConfig","_mimetype","_modelChanged","_modelContentChanged","dataset","rendermime","NotebookPanelLayout","_mimetypeService","mimeTypeService","isCollaborative","connected","collaborators","_onCollaboratorsChanged","_onModelChanged","onModelChanged","_updateEditorConfig","_updateNotebookConfig","_updateMimetype","onMetadataChanged","onModelContentChanged","_removeCell","_insertCell","_moveCell","requestAnimationFrame","_createCodeCell","_createMarkdownCell","_createRawCell","onCellInserted","updateEditorOnShow","placeholder","maxNumberOutputs","syncCollapse","syncEditable","syncScrolled","onCellMoved","parent","onCellRemoved","getMimeTypeByLanguage","editorOptions","setOptions","refresh","toggleClass","scrollPastEnd","lineWrap","matchBrackets","autoClosingBrackets","Cell","initializeState","RawCell","Notebook","processNotebookOptions","_activeCellIndex","_activeCell","_mode","_drag","_fragment","_dragData","_mouseMode","_activeCellChanged","_selectionChanged","_checkCacheOnNextResize","tabIndex","setAttribute","_ensureFocus","focus","_trimSelections","selectedProperty","head","anchor","getContiguousSelection","c","isSelected","last","activeIndex","position","threshold","ar","top","height","abs","scrollTop","fragment","ready","eventPhase","Event","CAPTURING_PHASE","_evtContextMenuCapture","_evtMouseDownCapture","_evtMouseDown","currentTarget","_evtDocumentMouseup","_evtDocumentMousemove","_evtDblClick","_evtFocusIn","_evtFocusOut","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","onResize","cache","_cellLayoutStateCache","width","parseInt","style","w","removeClass","el","querySelector","error","console","warn","scrollIntoView","localCollaborator","uuid","sessionId","selectionStyle","color","edgeRequested","_onEdgeRequest","location","prev","lastLine","lineCount","setCursorPosition","line","column","force","hasFocus","n","classList","parentElement","_findCell","elementFromPoint","clientX","clientY","shiftKey","_findEventTargetAndCell","preventDefault","targetArea","hasSelection","window","getSelection","e","pressX","pressY","stopPropagation","dx","dy","_startDrag","mimeData","add","elements","getElementsByClassName","dropAction","proposedAction","toMove","cellWidget","countString","dragImage","createDragImage","Drag","MimeData","supportedActions","action","relatedTarget","localName","toggle","AttachedProperty","promptNumber","cellContent","NotebookPanel","DocumentWidget","_autorestarting","toolbar","kernelChanged","_onKernelChanged","statusChanged","_onSessionStatusChanged","saveState","_onSave","revealed","includes","kernelPreference","shutdownOnDispose","kernelShutdown","setFragment","Printing","async","PageConfig","format","download","kernel","_updateLanguage","language_info","_updateSpec","language","IContentFactory","Token","NotebookTracker","WidgetTracker","arguments","NotebookWidgetFactory","ABCWidgetFactory","_sessionDialogs","nbOptions","resolver","urlResolver","createNotebook","CommandEditComponent","props","TextItem","Text","notebookMode","CommandEditStatus","VDomRenderer","Model","NotebookTrustComponent","allCellsTrusted","trustedIcon","stylesheet","notTrustedIcon","VDomModel","_onChanged","oldMode","_notebookMode","_triggerChange","oldNotebook","stateChanged","modelContentChanged","oldState","newState","NotebookTrustStatus","trustedCells","totalCells","activeCellTrusted","cellTrust","_trustedCells","_totalCells","_activeCellTrusted","_getAllState","total","_deriveCellTrustState","reduce","accum","current","INotebookWidgetFactory","INotebookTools","INotebookTracker","createMutex","token","f"],"mappings":"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","file":"4556.4f8e0b885caa6b2a5323.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Clipboard, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeCell, MarkdownCell, isMarkdownCellModel, isRawCellModel, isCodeCellModel } from '@jupyterlab/cells';\nimport { ArrayExt, each, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport * as React from 'react';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * A collection of actions that run against notebooks.\n *\n * #### Notes\n * All of the actions are a no-op if there is no model on the notebook.\n * The actions set the widget `mode` to `'command'` unless otherwise specified.\n * The actions will preserve the selection on the notebook widget unless\n * otherwise specified.\n */\nexport class NotebookActions {\n    /**\n     * A signal that emits whenever a cell is run.\n     */\n    static get executed() {\n        return Private.executed;\n    }\n    /**\n     * A private constructor for the `NotebookActions` class.\n     *\n     * #### Notes\n     * This class can never be instantiated. Its static member `executed` will be\n     * merged with the `NotebookActions` namespace. The reason it exists as a\n     * standalone class is because at run time, the `Private.executed` variable\n     * does not yet exist, so it needs to be referenced via a getter.\n     */\n    constructor() {\n        // Intentionally empty.\n    }\n}\n/**\n * A namespace for `NotebookActions` static methods.\n */\n(function (NotebookActions) {\n    /**\n     * Split the active cell into two or more cells.\n     *\n     * @param widget - The target notebook widget.\n     *\n     * #### Notes\n     * It will preserve the existing mode.\n     * The last cell will be activated.\n     * The existing selection will be cleared.\n     * The leading whitespace in the second cell will be removed.\n     * If there is no content, two empty cells will be created.\n     * Both cells will have the same type as the original cell.\n     * This action can be undone.\n     */\n    function splitCell(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        const nbModel = notebook.model;\n        const index = notebook.activeCellIndex;\n        const child = notebook.widgets[index];\n        const editor = child.editor;\n        const selections = editor.getSelections();\n        const orig = child.model.value.text;\n        const offsets = [0];\n        for (let i = 0; i < selections.length; i++) {\n            // append start and end to handle selections\n            // cursors will have same start and end\n            const start = editor.getOffsetAt(selections[i].start);\n            const end = editor.getOffsetAt(selections[i].end);\n            if (start < end) {\n                offsets.push(start);\n                offsets.push(end);\n            }\n            else if (end < start) {\n                offsets.push(end);\n                offsets.push(start);\n            }\n            else {\n                offsets.push(start);\n            }\n        }\n        offsets.push(orig.length);\n        const clones = [];\n        for (let i = 0; i + 1 < offsets.length; i++) {\n            const clone = Private.cloneCell(nbModel, child.model);\n            clones.push(clone);\n        }\n        for (let i = 0; i < clones.length; i++) {\n            if (i !== clones.length - 1 && clones[i].type === 'code') {\n                clones[i].outputs.clear();\n            }\n            clones[i].value.text = orig\n                .slice(offsets[i], offsets[i + 1])\n                .replace(/^\\n+/, '')\n                .replace(/\\n+$/, '');\n        }\n        const cells = nbModel.cells;\n        cells.beginCompoundOperation();\n        for (let i = 0; i < clones.length; i++) {\n            if (i === 0) {\n                cells.set(index, clones[i]);\n            }\n            else {\n                cells.insert(index + i, clones[i]);\n            }\n        }\n        cells.endCompoundOperation();\n        notebook.activeCellIndex = index + clones.length - 1;\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.splitCell = splitCell;\n    /**\n     * Merge the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mergeAbove - If only one cell is selected, indicates whether to merge it\n     *    with the cell above (true) or below (false, default).\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * If only one cell is selected and `mergeAbove` is true, the above cell will be selected.\n     * If only one cell is selected and `mergeAbove` is false, the below cell will be selected.\n     * If the active cell is a code cell, its outputs will be cleared.\n     * This action can be undone.\n     * The final cell will have the same type as the active cell.\n     * If the active cell is a markdown cell, it will be unrendered.\n     */\n    function mergeCells(notebook, mergeAbove = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const toMerge = [];\n        const toDelete = [];\n        const model = notebook.model;\n        const cells = model.cells;\n        const primary = notebook.activeCell;\n        const active = notebook.activeCellIndex;\n        const attachments = {};\n        // Get the cells to merge.\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                toMerge.push(child.model.value.text);\n                if (index !== active) {\n                    toDelete.push(child.model);\n                }\n                // Collect attachments if the cell is a markdown cell or a raw cell\n                const model = child.model;\n                if (isRawCellModel(model) || isMarkdownCellModel(model)) {\n                    for (const key of model.attachments.keys) {\n                        attachments[key] = model.attachments.get(key).toJSON();\n                    }\n                }\n            }\n        });\n        // Check for only a single cell selected.\n        if (toMerge.length === 1) {\n            // Merge with the cell above when mergeAbove is true\n            if (mergeAbove === true) {\n                // Bail if it is the first cell.\n                if (active === 0) {\n                    return;\n                }\n                // Otherwise merge with the previous cell.\n                const cellModel = cells.get(active - 1);\n                toMerge.unshift(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n            else if (mergeAbove === false) {\n                // Bail if it is the last cell.\n                if (active === cells.length - 1) {\n                    return;\n                }\n                // Otherwise merge with the next cell.\n                const cellModel = cells.get(active + 1);\n                toMerge.push(cellModel.value.text);\n                toDelete.push(cellModel);\n            }\n        }\n        notebook.deselectAll();\n        // Create a new cell for the source to preserve history.\n        const newModel = Private.cloneCell(model, primary.model);\n        newModel.value.text = toMerge.join('\\n\\n');\n        if (isCodeCellModel(newModel)) {\n            newModel.outputs.clear();\n        }\n        else if (isMarkdownCellModel(newModel) || isRawCellModel(newModel)) {\n            newModel.attachments.fromJSON(attachments);\n        }\n        // Make the changes while preserving history.\n        cells.beginCompoundOperation();\n        cells.set(active, newModel);\n        toDelete.forEach(cell => {\n            cells.removeValue(cell);\n        });\n        cells.endCompoundOperation();\n        // If the original cell is a markdown cell, make sure\n        // the new cell is unrendered.\n        if (primary instanceof MarkdownCell) {\n            notebook.activeCell.rendered = false;\n        }\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.mergeCells = mergeCells;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.deleteCells(notebook);\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.deleteCells = deleteCells;\n    /**\n     * Insert a new code cell above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will the active cell.\n     */\n    function insertAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        const active = notebook.activeCellIndex;\n        model.cells.insert(active, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex = active;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertAbove = insertAbove;\n    /**\n     * Insert a new code cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * The new cell will be the active cell.\n     */\n    function insertBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        // Make the newly inserted cell active.\n        notebook.activeCellIndex++;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.insertBelow = insertBelow;\n    /**\n     * Move the selected cell(s) down.\n     *\n     * @param notebook = The target notebook widget.\n     */\n    function moveDown(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = cells.length - 2; i > -1; i--) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i + 1])) {\n                    cells.move(i, i + 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex++;\n                    }\n                    notebook.select(widgets[i + 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveDown = moveDown;\n    /**\n     * Move the selected cell(s) up.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function moveUp(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        const widgets = notebook.widgets;\n        cells.beginCompoundOperation();\n        for (let i = 1; i < cells.length; i++) {\n            if (notebook.isSelectedOrActive(widgets[i])) {\n                if (!notebook.isSelectedOrActive(widgets[i - 1])) {\n                    cells.move(i, i - 1);\n                    if (notebook.activeCellIndex === i) {\n                        notebook.activeCellIndex--;\n                    }\n                    notebook.select(widgets[i - 1]);\n                    notebook.deselect(widgets[i]);\n                }\n            }\n        }\n        cells.endCompoundOperation();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.moveUp = moveUp;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        Private.changeCellType(notebook, value);\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.changeCellType = changeCellType;\n    /**\n     * Run the selected cell(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The last selected cell will be activated, but not scrolled into view.\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     */\n    function run(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, false);\n        return promise;\n    }\n    NotebookActions.run = run;\n    /**\n     * Run the selected cell(s) and advance to the next cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * The cell after the last selected cell will be activated and scrolled into view.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * If the last selected cell is the last cell, a new code cell\n     * will be created in `'edit'` mode.  The new cell creation can be undone.\n     */\n    function runAndAdvance(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n            model.cells.push(cell);\n            notebook.activeCellIndex++;\n            notebook.mode = 'edit';\n        }\n        else {\n            notebook.activeCellIndex++;\n        }\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndAdvance = runAndAdvance;\n    /**\n     * Run the selected cell(s) and insert a new code cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The widget mode will be set to `'edit'` after running.\n     * The existing selection will be cleared.\n     * The cell insert can be undone.\n     * The new cell will be scrolled into view.\n     */\n    function runAndInsert(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        const promise = Private.runSelected(notebook, sessionContext);\n        const model = notebook.model;\n        const cell = model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {});\n        model.cells.insert(notebook.activeCellIndex + 1, cell);\n        notebook.activeCellIndex++;\n        notebook.mode = 'edit';\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAndInsert = runAndInsert;\n    /**\n     * Run all of the cells in the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAll(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAll = runAll;\n    function renderAllMarkdown(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const previousIndex = notebook.activeCellIndex;\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach((child, index) => {\n            if (child.model.type === 'markdown') {\n                notebook.select(child);\n                // This is to make sure that the activeCell\n                // does not get executed\n                notebook.activeCellIndex = index;\n            }\n        });\n        if (notebook.activeCell.model.type !== 'markdown') {\n            return Promise.resolve(true);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex = previousIndex;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.renderAllMarkdown = renderAllMarkdown;\n    /**\n     * Run all of the cells before the currently active cell (exclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The currently active cell will remain selected.\n     */\n    function runAllAbove(notebook, sessionContext) {\n        const { activeCell, activeCellIndex, model } = notebook;\n        if (!model || !activeCell || activeCellIndex < 1) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex--;\n        notebook.deselectAll();\n        for (let i = 0; i < notebook.activeCellIndex; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        notebook.activeCellIndex++;\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllAbove = runAllAbove;\n    /**\n     * Run all of the cells after the currently active cell (inclusive).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param sessionContext - The optional client session object.\n     *\n     * #### Notes\n     * The existing selection will be cleared.\n     * An execution error will prevent the remaining code cells from executing.\n     * All markdown cells will be rendered.\n     * The last cell in the notebook will be activated and scrolled into view.\n     */\n    function runAllBelow(notebook, sessionContext) {\n        if (!notebook.model || !notebook.activeCell) {\n            return Promise.resolve(false);\n        }\n        const state = Private.getState(notebook);\n        notebook.deselectAll();\n        for (let i = notebook.activeCellIndex; i < notebook.widgets.length; ++i) {\n            notebook.select(notebook.widgets[i]);\n        }\n        const promise = Private.runSelected(notebook, sessionContext);\n        Private.handleRunState(notebook, state, true);\n        return promise;\n    }\n    NotebookActions.runAllBelow = runAllBelow;\n    /**\n     * Replaces the selection in the active cell of the notebook.\n     *\n     * @param notebook - The target notebook widget.\n     * @param text - The text to replace the selection.\n     */\n    function replaceSelection(notebook, text) {\n        var _a, _b;\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        (_b = (_a = notebook.activeCell.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n    }\n    NotebookActions.replaceSelection = replaceSelection;\n    /**\n     * Select the above the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the first cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectAbove(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        let possibleNextCell = notebook.activeCellIndex - 1;\n        // find first non hidden cell above current cell\n        if (notebook.mode === 'edit') {\n            while (notebook.widgets[possibleNextCell].inputHidden) {\n                // If we are at the top cell, we cannot change selection.\n                if (possibleNextCell === 0) {\n                    return;\n                }\n                possibleNextCell -= 1;\n            }\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCell;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectAbove = selectAbove;\n    /**\n     * Select the cell below the active cell.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget mode will be preserved.\n     * This is a no-op if the last cell is the active cell.\n     * This will skip any collapsed cells.\n     * The existing selection will be cleared.\n     */\n    function selectBelow(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const maxCellIndex = notebook.widgets.length - 1;\n        if (notebook.activeCellIndex === maxCellIndex) {\n            return;\n        }\n        let possibleNextCell = notebook.activeCellIndex + 1;\n        // find first non hidden cell below current cell\n        if (notebook.mode === 'edit') {\n            while (notebook.widgets[possibleNextCell].inputHidden) {\n                // If we are at the bottom cell, we cannot change selection.\n                if (possibleNextCell === maxCellIndex) {\n                    return;\n                }\n                possibleNextCell += 1;\n            }\n        }\n        const state = Private.getState(notebook);\n        notebook.activeCellIndex = possibleNextCell;\n        notebook.deselectAll();\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.selectBelow = selectBelow;\n    /**\n     * Extend the selection to the cell above.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toTop - If true, denotes selection to extend to the top.\n     *\n     * #### Notes\n     * This is a no-op if the first cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionAbove(notebook, toTop = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === 0) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toTop is true, if yes, selection is made to the top.\n        if (toTop) {\n            notebook.extendContiguousSelectionTo(0);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex - 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionAbove = extendSelectionAbove;\n    /**\n     * Extend the selection to the cell below.\n     *\n     * @param notebook - The target notebook widget.\n     * @param toBottom - If true, denotes selection to extend to the bottom.\n     *\n     * #### Notes\n     * This is a no-op if the last cell is the active cell.\n     * The new cell will be activated.\n     */\n    function extendSelectionBelow(notebook, toBottom = false) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        // Do not wrap around.\n        if (notebook.activeCellIndex === notebook.widgets.length - 1) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        // Check if toBottom is true, if yes selection is made to the bottom.\n        if (toBottom) {\n            notebook.extendContiguousSelectionTo(notebook.widgets.length - 1);\n        }\n        else {\n            notebook.extendContiguousSelectionTo(notebook.activeCellIndex + 1);\n        }\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.extendSelectionBelow = extendSelectionBelow;\n    /**\n     * Select all of the cells of the notebook.\n     *\n     * @param notebook - the target notebook widget.\n     */\n    function selectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.widgets.forEach(child => {\n            notebook.select(child);\n        });\n    }\n    NotebookActions.selectAll = selectAll;\n    /**\n     * Deselect all of the cells of the notebook.\n     *\n     * @param notebook - the targe notebook widget.\n     */\n    function deselectAll(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        notebook.deselectAll();\n    }\n    NotebookActions.deselectAll = deselectAll;\n    /**\n     * Copy the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function copy(notebook) {\n        Private.copyOrCut(notebook, false);\n    }\n    NotebookActions.copy = copy;\n    /**\n     * Cut the selected cell data to a clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This action can be undone.\n     * A new code cell is added if all cells are cut.\n     */\n    function cut(notebook) {\n        Private.copyOrCut(notebook, true);\n    }\n    NotebookActions.cut = cut;\n    /**\n     * Paste cells from the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param mode - the mode of the paste operation: 'below' pastes cells\n     *   below the active cell, 'above' pastes cells above the active cell,\n     *   and 'replace' removes the currently selected cells and pastes cells\n     *   in their place.\n     *\n     * #### Notes\n     * The last pasted cell becomes the active cell.\n     * This is a no-op if there is no cell data on the clipboard.\n     * This action can be undone.\n     */\n    function paste(notebook, mode = 'below') {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const clipboard = Clipboard.getInstance();\n        if (!clipboard.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const values = clipboard.getData(JUPYTER_CELL_MIME);\n        const model = notebook.model;\n        notebook.mode = 'command';\n        const newCells = values.map(cell => {\n            switch (cell.cell_type) {\n                case 'code':\n                    return model.contentFactory.createCodeCell({ cell });\n                case 'markdown':\n                    return model.contentFactory.createMarkdownCell({ cell });\n                default:\n                    return model.contentFactory.createRawCell({ cell });\n            }\n        });\n        const cells = notebook.model.cells;\n        let index;\n        cells.beginCompoundOperation();\n        // Set the starting index of the paste operation depending upon the mode.\n        switch (mode) {\n            case 'below':\n                index = notebook.activeCellIndex;\n                break;\n            case 'above':\n                index = notebook.activeCellIndex - 1;\n                break;\n            case 'replace': {\n                // Find the cells to delete.\n                const toDelete = [];\n                notebook.widgets.forEach((child, index) => {\n                    const deletable = child.model.metadata.get('deletable') !== false;\n                    if (notebook.isSelectedOrActive(child) && deletable) {\n                        toDelete.push(index);\n                    }\n                });\n                // If cells are not deletable, we may not have anything to delete.\n                if (toDelete.length > 0) {\n                    // Delete the cells as one undo event.\n                    toDelete.reverse().forEach(i => {\n                        cells.remove(i);\n                    });\n                }\n                index = toDelete[0];\n                break;\n            }\n            default:\n                break;\n        }\n        newCells.forEach(cell => {\n            cells.insert(++index, cell);\n        });\n        cells.endCompoundOperation();\n        notebook.activeCellIndex += newCells.length;\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.paste = paste;\n    /**\n     * Undo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if if there are no cell actions to undo.\n     */\n    function undo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.undo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.undo = undo;\n    /**\n     * Redo a cell action.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * This is a no-op if there are no cell actions to redo.\n     */\n    function redo(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.mode = 'command';\n        notebook.model.sharedModel.redo();\n        notebook.deselectAll();\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.redo = redo;\n    /**\n     * Toggle the line number of all cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The original state is based on the state of the active cell.\n     * The `mode` of the widget will be preserved.\n     */\n    function toggleAllLineNumbers(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const config = notebook.editorConfig;\n        const lineNumbers = !(config.code.lineNumbers &&\n            config.markdown.lineNumbers &&\n            config.raw.lineNumbers);\n        const newConfig = {\n            code: Object.assign(Object.assign({}, config.code), { lineNumbers }),\n            markdown: Object.assign(Object.assign({}, config.markdown), { lineNumbers }),\n            raw: Object.assign(Object.assign({}, config.raw), { lineNumbers })\n        };\n        notebook.editorConfig = newConfig;\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.toggleAllLineNumbers = toggleAllLineNumbers;\n    /**\n     * Clear the code outputs of the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (notebook.isSelectedOrActive(child) && cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearOutputs = clearOutputs;\n    /**\n     * Clear all the code outputs on the widget.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The widget `mode` will be preserved.\n     */\n    function clearAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        each(notebook.model.cells, (cell, index) => {\n            const child = notebook.widgets[index];\n            if (cell.type === 'code') {\n                cell.clearExecution();\n                child.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.clearAllOutputs = clearAllOutputs;\n    /**\n     * Hide the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideCode = hideCode;\n    /**\n     * Show the code on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showCode = showCode;\n    /**\n     * Hide the code on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.hideAllCode = hideAllCode;\n    /**\n     * Show the code on all code cells.\n     *\n     * @param widget - The target notebook widget.\n     */\n    function showAllCode(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.inputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllCode = showAllCode;\n    /**\n     * Hide the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideOutput = hideOutput;\n    /**\n     * Show the output on selected code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showOutput(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showOutput = showOutput;\n    /**\n     * Hide the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function hideAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.hideAllOutputs = hideAllOutputs;\n    /**\n     * Show the output on all code cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function showAllOutputs(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (cell.model.type === 'code') {\n                cell.outputHidden = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.showAllOutputs = showAllOutputs;\n    /**\n     * Enable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function enableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = true;\n            }\n        });\n        Private.handleState(notebook, state, true);\n    }\n    NotebookActions.enableOutputScrolling = enableOutputScrolling;\n    /**\n     * Disable output scrolling for all selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function disableOutputScrolling(notebook) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        notebook.widgets.forEach(cell => {\n            if (notebook.isSelectedOrActive(cell) && cell.model.type === 'code') {\n                cell.outputsScrolled = false;\n            }\n        });\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.disableOutputScrolling = disableOutputScrolling;\n    /**\n     * Go to the last cell that is run or current if it is running.\n     *\n     * Note: This requires execution timing to be toggled on or this will have\n     * no effect.\n     *\n     * @param notebook - The target notebook widget.\n     */\n    function selectLastRunCell(notebook) {\n        let latestTime = null;\n        let latestCellIdx = null;\n        notebook.widgets.forEach((cell, cellIndx) => {\n            if (cell.model.type === 'code') {\n                const execution = cell.model.metadata.get('execution');\n                if (execution &&\n                    JSONExt.isObject(execution) &&\n                    execution['iopub.status.busy'] !== undefined) {\n                    // The busy status is used as soon as a request is received:\n                    // https://jupyter-client.readthedocs.io/en/stable/messaging.html\n                    const timestamp = execution['iopub.status.busy'].toString();\n                    if (timestamp) {\n                        const startTime = new Date(timestamp);\n                        if (!latestTime || startTime >= latestTime) {\n                            latestTime = startTime;\n                            latestCellIdx = cellIndx;\n                        }\n                    }\n                }\n            }\n        });\n        if (latestCellIdx !== null) {\n            notebook.activeCellIndex = latestCellIdx;\n        }\n    }\n    NotebookActions.selectLastRunCell = selectLastRunCell;\n    /**\n     * Set the markdown header level.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param level - The header level.\n     *\n     * #### Notes\n     * All selected cells will be switched to markdown.\n     * The level will be clamped between 1 and 6.\n     * If there is an existing header, it will be replaced.\n     * There will always be one blank space after the header.\n     * The cells will be unrendered.\n     */\n    function setMarkdownHeader(notebook, level) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = Private.getState(notebook);\n        const cells = notebook.model.cells;\n        level = Math.min(Math.max(level, 1), 6);\n        notebook.widgets.forEach((child, index) => {\n            if (notebook.isSelectedOrActive(child)) {\n                Private.setMarkdownHeader(cells.get(index), level);\n            }\n        });\n        Private.changeCellType(notebook, 'markdown');\n        Private.handleState(notebook, state);\n    }\n    NotebookActions.setMarkdownHeader = setMarkdownHeader;\n    /**\n     * Trust the notebook after prompting the user.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @returns a promise that resolves when the transaction is finished.\n     *\n     * #### Notes\n     * No dialog will be presented if the notebook is already trusted.\n     */\n    function trust(notebook, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        if (!notebook.model) {\n            return Promise.resolve();\n        }\n        // Do nothing if already trusted.\n        const cells = toArray(notebook.model.cells);\n        const trusted = cells.every(cell => cell.trusted);\n        // FIXME\n        const trustMessage = (React.createElement(\"p\", null,\n            trans.__('A trusted Jupyter notebook may execute hidden malicious code when you openit.'),\n            React.createElement(\"br\", null),\n            trans.__('Selecting trust will re-render this notebook in a trusted state.'),\n            React.createElement(\"br\", null),\n            trans.__('For more information, see the <a href=\"https://jupyter-server.readthedocs.io/en/stable/operators/security.html\">%1</a>', trans.__('Jupyter security documentation'))));\n        if (trusted) {\n            return showDialog({\n                body: trans.__('Notebook is already trusted'),\n                buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n            }).then(() => undefined);\n        }\n        return showDialog({\n            body: trustMessage,\n            title: trans.__('Trust this notebook?'),\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.warnButton({ label: trans.__('Ok') })\n            ] // FIXME?\n        }).then(result => {\n            if (result.button.accept) {\n                cells.forEach(cell => {\n                    cell.trusted = true;\n                });\n            }\n        });\n    }\n    NotebookActions.trust = trust;\n})(NotebookActions || (NotebookActions = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A signal that emits whenever a cell is run.\n     */\n    Private.executed = new Signal({});\n    /**\n     * Get the state of a widget before running an action.\n     */\n    function getState(notebook) {\n        return {\n            wasFocused: notebook.node.contains(document.activeElement),\n            activeCell: notebook.activeCell\n        };\n    }\n    Private.getState = getState;\n    /**\n     * Handle the state of a widget after running an action.\n     */\n    function handleState(notebook, state, scrollIfNeeded = false) {\n        const { activeCell, node } = notebook;\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scrollIfNeeded && activeCell) {\n            ElementExt.scrollIntoViewIfNeeded(node, activeCell.node);\n        }\n    }\n    Private.handleState = handleState;\n    /**\n     * Handle the state of a widget after running a run action.\n     */\n    function handleRunState(notebook, state, scroll = false) {\n        if (state.wasFocused || notebook.mode === 'edit') {\n            notebook.activate();\n        }\n        if (scroll && state.activeCell) {\n            // Scroll to the top of the previous active cell output.\n            const rect = state.activeCell.inputArea.node.getBoundingClientRect();\n            notebook.scrollToPosition(rect.bottom, 45);\n        }\n    }\n    Private.handleRunState = handleRunState;\n    /**\n     * Clone a cell model.\n     */\n    function cloneCell(model, cell) {\n        switch (cell.type) {\n            case 'code':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createCodeCell({ cell: cell.toJSON() });\n            case 'markdown':\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createMarkdownCell({ cell: cell.toJSON() });\n            default:\n                // TODO why isn't modeldb or id passed here?\n                return model.contentFactory.createRawCell({ cell: cell.toJSON() });\n        }\n    }\n    Private.cloneCell = cloneCell;\n    /**\n     * Run the selected cells.\n     */\n    function runSelected(notebook, sessionContext) {\n        notebook.mode = 'command';\n        let lastIndex = notebook.activeCellIndex;\n        const selected = notebook.widgets.filter((child, index) => {\n            const active = notebook.isSelectedOrActive(child);\n            if (active) {\n                lastIndex = index;\n            }\n            return active;\n        });\n        notebook.activeCellIndex = lastIndex;\n        notebook.deselectAll();\n        return Promise.all(selected.map(child => runCell(notebook, child, sessionContext)))\n            .then(results => {\n            if (notebook.isDisposed) {\n                return false;\n            }\n            // Post an update request.\n            notebook.update();\n            return results.every(result => result);\n        })\n            .catch(reason => {\n            if (reason.message === 'KernelReplyNotOK') {\n                selected.map(cell => {\n                    // Remove '*' prompt from cells that didn't execute\n                    if (cell.model.type === 'code' &&\n                        cell.model.executionCount == null) {\n                        cell.setPrompt('');\n                    }\n                });\n            }\n            else {\n                throw reason;\n            }\n            notebook.update();\n            return false;\n        });\n    }\n    Private.runSelected = runSelected;\n    /**\n     * Run a cell.\n     */\n    function runCell(notebook, cell, sessionContext, translator) {\n        var _a, _b, _c;\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        switch (cell.model.type) {\n            case 'markdown':\n                cell.rendered = true;\n                cell.inputHidden = false;\n                Private.executed.emit({ notebook, cell });\n                break;\n            case 'code':\n                if (sessionContext) {\n                    if (sessionContext.isTerminating) {\n                        void showDialog({\n                            title: trans.__('Kernel Terminating'),\n                            body: trans.__('The kernel for %1 appears to be terminating. You can not run any cell for now.', (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                        });\n                        break;\n                    }\n                    const deletedCells = (_c = (_b = notebook.model) === null || _b === void 0 ? void 0 : _b.deletedCells) !== null && _c !== void 0 ? _c : [];\n                    return CodeCell.execute(cell, sessionContext, {\n                        deletedCells,\n                        recordTiming: notebook.notebookConfig.recordTiming\n                    })\n                        .then(reply => {\n                        deletedCells.splice(0, deletedCells.length);\n                        if (cell.isDisposed) {\n                            return false;\n                        }\n                        if (!reply) {\n                            return true;\n                        }\n                        if (reply.content.status === 'ok') {\n                            const content = reply.content;\n                            if (content.payload && content.payload.length) {\n                                handlePayload(content, notebook, cell);\n                            }\n                            return true;\n                        }\n                        else {\n                            throw new Error('KernelReplyNotOK');\n                        }\n                    })\n                        .catch(reason => {\n                        if (cell.isDisposed || reason.message.startsWith('Canceled')) {\n                            return false;\n                        }\n                        throw reason;\n                    })\n                        .then(ran => {\n                        if (ran) {\n                            Private.executed.emit({ notebook, cell });\n                        }\n                        return ran;\n                    });\n                }\n                cell.model.clearExecution();\n                break;\n            default:\n                break;\n        }\n        return Promise.resolve(true);\n    }\n    /**\n     * Handle payloads from an execute reply.\n     *\n     * #### Notes\n     * Payloads are deprecated and there are no official interfaces for them in\n     * the kernel type definitions.\n     * See [Payloads (DEPRECATED)](https://jupyter-client.readthedocs.io/en/latest/messaging.html#payloads-deprecated).\n     */\n    function handlePayload(content, notebook, cell) {\n        var _a;\n        const setNextInput = (_a = content.payload) === null || _a === void 0 ? void 0 : _a.filter(i => {\n            return i.source === 'set_next_input';\n        })[0];\n        if (!setNextInput) {\n            return;\n        }\n        const text = setNextInput.text;\n        const replace = setNextInput.replace;\n        if (replace) {\n            cell.model.value.text = text;\n            return;\n        }\n        // Create a new code cell and add as the next cell.\n        const newCell = notebook.model.contentFactory.createCodeCell({});\n        const cells = notebook.model.cells;\n        const index = ArrayExt.firstIndexOf(toArray(cells), cell.model);\n        newCell.value.text = text;\n        if (index === -1) {\n            cells.push(newCell);\n        }\n        else {\n            cells.insert(index + 1, newCell);\n        }\n    }\n    /**\n     * Copy or cut the selected cell data to the application clipboard.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param cut - Whether to copy or cut.\n     */\n    function copyOrCut(notebook, cut) {\n        if (!notebook.model || !notebook.activeCell) {\n            return;\n        }\n        const state = getState(notebook);\n        const clipboard = Clipboard.getInstance();\n        notebook.mode = 'command';\n        clipboard.clear();\n        const data = notebook.widgets\n            .filter(cell => notebook.isSelectedOrActive(cell))\n            .map(cell => cell.model.toJSON())\n            .map(cellJSON => {\n            if (cellJSON.metadata.deletable !== undefined) {\n                delete cellJSON.metadata.deletable;\n            }\n            return cellJSON;\n        });\n        clipboard.setData(JUPYTER_CELL_MIME, data);\n        if (cut) {\n            deleteCells(notebook);\n        }\n        else {\n            notebook.deselectAll();\n        }\n        handleState(notebook, state);\n    }\n    Private.copyOrCut = copyOrCut;\n    /**\n     * Change the selected cell type(s).\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * @param value - The target cell type.\n     *\n     * #### Notes\n     * It should preserve the widget mode.\n     * This action can be undone.\n     * The existing selection will be cleared.\n     * Any cells converted to markdown will be unrendered.\n     */\n    function changeCellType(notebook, value) {\n        const model = notebook.model;\n        const cells = model.cells;\n        cells.beginCompoundOperation();\n        notebook.widgets.forEach((child, index) => {\n            if (!notebook.isSelectedOrActive(child)) {\n                return;\n            }\n            if (child.model.type !== value) {\n                const cell = child.model.toJSON();\n                let newCell;\n                switch (value) {\n                    case 'code':\n                        newCell = model.contentFactory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        newCell = model.contentFactory.createMarkdownCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                        break;\n                    default:\n                        newCell = model.contentFactory.createRawCell({ cell });\n                        if (child.model.type === 'code') {\n                            newCell.trusted = false;\n                        }\n                }\n                cells.set(index, newCell);\n            }\n            if (value === 'markdown') {\n                // Fetch the new widget and unrender it.\n                child = notebook.widgets[index];\n                child.rendered = false;\n            }\n        });\n        cells.endCompoundOperation();\n        notebook.deselectAll();\n    }\n    Private.changeCellType = changeCellType;\n    /**\n     * Delete the selected cells.\n     *\n     * @param notebook - The target notebook widget.\n     *\n     * #### Notes\n     * The cell after the last selected cell will be activated.\n     * If the last cell is deleted, then the previous one will be activated.\n     * It will add a code cell if all cells are deleted.\n     * This action can be undone.\n     */\n    function deleteCells(notebook) {\n        const model = notebook.model;\n        const cells = model.cells;\n        const toDelete = [];\n        notebook.mode = 'command';\n        // Find the cells to delete.\n        notebook.widgets.forEach((child, index) => {\n            const deletable = child.model.metadata.get('deletable') !== false;\n            if (notebook.isSelectedOrActive(child) && deletable) {\n                toDelete.push(index);\n                model.deletedCells.push(child.model.id);\n            }\n        });\n        // If cells are not deletable, we may not have anything to delete.\n        if (toDelete.length > 0) {\n            // Delete the cells as one undo event.\n            cells.beginCompoundOperation();\n            // Delete cells in reverse order to maintain the correct indices.\n            toDelete.reverse().forEach(index => {\n                cells.remove(index);\n            });\n            // Add a new cell if the notebook is empty. This is done\n            // within the compound operation to make the deletion of\n            // a notebook's last cell undoable.\n            if (!cells.length) {\n                cells.push(model.contentFactory.createCell(notebook.notebookConfig.defaultCell, {}));\n            }\n            cells.endCompoundOperation();\n            // Select the *first* interior cell not deleted or the cell\n            // *after* the last selected cell.\n            // Note: The activeCellIndex is clamped to the available cells,\n            // so if the last cell is deleted the previous cell will be activated.\n            // The *first* index is the index of the last cell in the initial\n            // toDelete list due to the `reverse` operation above.\n            notebook.activeCellIndex = toDelete[0] - toDelete.length + 1;\n        }\n        // Deselect any remaining, undeletable cells. Do this even if we don't\n        // delete anything so that users are aware *something* happened.\n        notebook.deselectAll();\n    }\n    Private.deleteCells = deleteCells;\n    /**\n     * Set the markdown header level of a cell.\n     */\n    function setMarkdownHeader(cell, level) {\n        // Remove existing header or leading white space.\n        let source = cell.value.text;\n        const regex = /^(#+\\s*)|^(\\s*)/;\n        const newHeader = Array(level + 1).join('#') + ' ';\n        const matches = regex.exec(source);\n        if (matches) {\n            source = source.slice(matches[0].length);\n        }\n        cell.value.text = newHeader + source;\n    }\n    Private.setMarkdownHeader = setMarkdownHeader;\n})(Private || (Private = {}));\n//# sourceMappingURL=actions.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\nimport { showDialog, Dialog, Toolbar, ToolbarButtonComponent, UseSignal, addToolbarButtonClass, ReactWidget, ToolbarButton, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { addIcon, copyIcon, cutIcon, fastForwardIcon, HTMLSelect, pasteIcon, runIcon, saveIcon } from '@jupyterlab/ui-components';\nimport { NotebookActions } from './actions';\n/**\n * The class name added to toolbar cell type dropdown wrapper.\n */\nconst TOOLBAR_CELLTYPE_CLASS = 'jp-Notebook-toolbarCellType';\n/**\n * The class name added to toolbar cell type dropdown.\n */\nconst TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';\n/**\n * A namespace for the default toolbar items.\n */\nexport var ToolbarItems;\n(function (ToolbarItems) {\n    /**\n     * Create save button toolbar item.\n     */\n    function createSaveButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        function onClick() {\n            if (panel.context.model.readOnly) {\n                return showDialog({\n                    title: trans.__('Cannot Save'),\n                    body: trans.__('Document is read-only'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            void panel.context.save().then(() => {\n                if (!panel.isDisposed) {\n                    return panel.context.createCheckpoint();\n                }\n            });\n        }\n        return addToolbarButtonClass(ReactWidget.create(React.createElement(UseSignal, { signal: panel.context.fileChanged }, () => (React.createElement(ToolbarButtonComponent, { icon: saveIcon, onClick: onClick, tooltip: trans.__('Save the notebook contents and create checkpoint'), enabled: !!(panel &&\n                panel.context &&\n                panel.context.contentsModel &&\n                panel.context.contentsModel.writable) })))));\n    }\n    ToolbarItems.createSaveButton = createSaveButton;\n    /**\n     * Create an insert toolbar item.\n     */\n    function createInsertButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                NotebookActions.insertBelow(panel.content);\n            },\n            tooltip: trans.__('Insert a cell below')\n        });\n    }\n    ToolbarItems.createInsertButton = createInsertButton;\n    /**\n     * Create a cut toolbar item.\n     */\n    function createCutButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: cutIcon,\n            onClick: () => {\n                NotebookActions.cut(panel.content);\n            },\n            tooltip: trans.__('Cut the selected cells')\n        });\n    }\n    ToolbarItems.createCutButton = createCutButton;\n    /**\n     * Create a copy toolbar item.\n     */\n    function createCopyButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: copyIcon,\n            onClick: () => {\n                NotebookActions.copy(panel.content);\n            },\n            tooltip: trans.__('Copy the selected cells')\n        });\n    }\n    ToolbarItems.createCopyButton = createCopyButton;\n    /**\n     * Create a paste toolbar item.\n     */\n    function createPasteButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: pasteIcon,\n            onClick: () => {\n                NotebookActions.paste(panel.content);\n            },\n            tooltip: trans.__('Paste cells from the clipboard')\n        });\n    }\n    ToolbarItems.createPasteButton = createPasteButton;\n    /**\n     * Create a run toolbar item.\n     */\n    function createRunButton(panel, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: runIcon,\n            onClick: () => {\n                void NotebookActions.runAndAdvance(panel.content, panel.sessionContext);\n            },\n            tooltip: trans.__('Run the selected cells and advance')\n        });\n    }\n    ToolbarItems.createRunButton = createRunButton;\n    /**\n     * Create a restart run all toolbar item\n     */\n    function createRestartRunAllButton(panel, dialogs, translator) {\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        return new ToolbarButton({\n            icon: fastForwardIcon,\n            onClick: () => {\n                void (dialogs !== null && dialogs !== void 0 ? dialogs : sessionContextDialogs)\n                    .restart(panel.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(panel.content, panel.sessionContext);\n                    }\n                    return restarted;\n                });\n            },\n            tooltip: trans.__('Restart the kernel, then re-run the whole notebook')\n        });\n    }\n    ToolbarItems.createRestartRunAllButton = createRestartRunAllButton;\n    /**\n     * Create a cell type switcher item.\n     *\n     * #### Notes\n     * It will display the type of the current active cell.\n     * If more than one cell is selected but are of different types,\n     * it will display `'-'`.\n     * When the user changes the cell type, it will change the\n     * cell types of the selected cells.\n     * It can handle a change to the context.\n     */\n    function createCellTypeItem(panel, translator) {\n        return new CellTypeSwitcher(panel.content, translator);\n    }\n    ToolbarItems.createCellTypeItem = createCellTypeItem;\n    /**\n     * Get the default toolbar items for panel\n     */\n    function getDefaultItems(panel, sessionDialogs, translator) {\n        return [\n            { name: 'save', widget: createSaveButton(panel, translator) },\n            { name: 'insert', widget: createInsertButton(panel, translator) },\n            { name: 'cut', widget: createCutButton(panel, translator) },\n            { name: 'copy', widget: createCopyButton(panel, translator) },\n            { name: 'paste', widget: createPasteButton(panel, translator) },\n            { name: 'run', widget: createRunButton(panel, translator) },\n            {\n                name: 'interrupt',\n                widget: Toolbar.createInterruptButton(panel.sessionContext, translator)\n            },\n            {\n                name: 'restart',\n                widget: Toolbar.createRestartButton(panel.sessionContext, sessionDialogs, translator)\n            },\n            {\n                name: 'restart-and-run',\n                widget: createRestartRunAllButton(panel, sessionDialogs, translator)\n            },\n            { name: 'cellType', widget: createCellTypeItem(panel, translator) },\n            { name: 'spacer', widget: Toolbar.createSpacerItem() },\n            {\n                name: 'kernelName',\n                widget: Toolbar.createKernelNameItem(panel.sessionContext, sessionDialogs, translator)\n            },\n            {\n                name: 'kernelStatus',\n                widget: Toolbar.createKernelStatusItem(panel.sessionContext, translator)\n            }\n        ];\n    }\n    ToolbarItems.getDefaultItems = getDefaultItems;\n})(ToolbarItems || (ToolbarItems = {}));\n/**\n * A toolbar widget that switches cell types.\n */\nexport class CellTypeSwitcher extends ReactWidget {\n    /**\n     * Construct a new cell type switcher.\n     */\n    constructor(widget, translator) {\n        super();\n        /**\n         * Handle `change` events for the HTMLSelect component.\n         */\n        this.handleChange = (event) => {\n            if (event.target.value !== '-') {\n                NotebookActions.changeCellType(this._notebook, event.target.value);\n                this._notebook.activate();\n            }\n        };\n        /**\n         * Handle `keydown` events for the HTMLSelect component.\n         */\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === 13) {\n                this._notebook.activate();\n            }\n        };\n        this._trans = (translator || nullTranslator).load('jupyterlab');\n        this.addClass(TOOLBAR_CELLTYPE_CLASS);\n        this._notebook = widget;\n        if (widget.model) {\n            this.update();\n        }\n        widget.activeCellChanged.connect(this.update, this);\n        // Follow a change in the selection.\n        widget.selectionChanged.connect(this.update, this);\n    }\n    render() {\n        let value = '-';\n        if (this._notebook.activeCell) {\n            value = this._notebook.activeCell.model.type;\n        }\n        for (const widget of this._notebook.widgets) {\n            if (this._notebook.isSelectedOrActive(widget)) {\n                if (widget.model.type !== value) {\n                    value = '-';\n                    break;\n                }\n            }\n        }\n        return (React.createElement(HTMLSelect, { className: TOOLBAR_CELLTYPE_DROPDOWN_CLASS, onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: value, \"aria-label\": this._trans.__('Cell type'), title: this._trans.__('Select the cell type') },\n            React.createElement(\"option\", { value: \"-\" }, \"-\"),\n            React.createElement(\"option\", { value: \"code\" }, this._trans.__('Code')),\n            React.createElement(\"option\", { value: \"markdown\" }, this._trans.__('Markdown')),\n            React.createElement(\"option\", { value: \"raw\" }, this._trans.__('Raw'))));\n    }\n}\n//# sourceMappingURL=default-toolbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, each, toArray, ArrayIterator } from '@lumino/algorithm';\nimport * as models from '@jupyterlab/shared-models';\nimport { Signal } from '@lumino/signaling';\nimport { ObservableMap } from '@jupyterlab/observables';\n/**\n * A cell list object that supports undo/redo.\n */\nexport class CellList {\n    /**\n     * Construct the cell list.\n     */\n    constructor(modelDB, factory, model) {\n        /**\n         * Prevents that the modeldb event handler is executed when the shared-model event handler is executed and vice-versa.\n         */\n        this._mutex = models.createMutex();\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._factory = factory;\n        this._cellOrder = modelDB.createList('cellOrder');\n        this._cellMap = new ObservableMap();\n        this._cellOrder.changed.connect(this._onOrderChanged, this);\n        this.nbmodel = model;\n        this.nbmodel.changed.connect(this.onSharedModelChanged, this);\n        this.changed.connect(this.onModelDBChanged, this);\n    }\n    onModelDBChanged(self, change) {\n        this._mutex(() => {\n            const nbmodel = this.nbmodel;\n            nbmodel.transact(() => {\n                if (change.type === 'set' || change.type === 'remove') {\n                    nbmodel.deleteCellRange(change.oldIndex, change.oldIndex + change.oldValues.length);\n                }\n                if (change.type === 'set' ||\n                    change.type === 'add' ||\n                    change.type === 'move') {\n                    const cells = change.newValues.map(cell => {\n                        return cell.sharedModel.clone();\n                    });\n                    let insertLocation = change.newIndex;\n                    if (change.type === 'move' && insertLocation > change.oldIndex) {\n                        insertLocation += change.oldValues.length;\n                    }\n                    nbmodel.insertCells(insertLocation, cells);\n                    change.newValues.forEach((cell, index) => {\n                        cell.switchSharedModel(cells[index], false);\n                    });\n                }\n                if (change.type === 'move') {\n                    let from = change.oldIndex;\n                    if (from >= change.newIndex) {\n                        from += change.oldValues.length;\n                    }\n                    nbmodel.deleteCellRange(from, from + change.oldValues.length);\n                }\n            });\n        });\n    }\n    onSharedModelChanged(self, change) {\n        this._mutex(() => {\n            var _a;\n            let currpos = 0;\n            (_a = change.cellsChange) === null || _a === void 0 ? void 0 : _a.forEach(delta => {\n                if (delta.insert != null) {\n                    const cells = delta.insert.map(nbcell => {\n                        const cell = this._factory.createCell(nbcell.cell_type, {});\n                        cell.switchSharedModel(nbcell, true);\n                        return cell;\n                    });\n                    this.insertAll(currpos, cells);\n                    currpos += delta.insert.length;\n                }\n                else if (delta.delete != null) {\n                    this.removeRange(currpos, currpos + delta.delete);\n                }\n                else if (delta.retain != null) {\n                    currpos += delta.retain;\n                }\n            });\n        });\n    }\n    /**\n     * A signal emitted when the cell list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Test whether the cell list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Test whether the list is empty.\n     *\n     * @returns `true` if the cell list is empty, `false` otherwise.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get isEmpty() {\n        return this._cellOrder.length === 0;\n    }\n    /**\n     * Get the length of the cell list.\n     *\n     * @return The number of cells in the cell list.\n     *\n     * #### Notes\n     * This is a read-only property.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    get length() {\n        return this._cellOrder.length;\n    }\n    /**\n     * Create an iterator over the cells in the cell list.\n     *\n     * @returns A new iterator starting at the front of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        const arr = [];\n        for (const id of toArray(this._cellOrder)) {\n            arr.push(this._cellMap.get(id));\n        }\n        return new ArrayIterator(arr);\n    }\n    /**\n     * Dispose of the resources held by the cell list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        // Clean up the cell map and cell order objects.\n        for (const cell of this._cellMap.values()) {\n            cell.dispose();\n        }\n        this._cellMap.dispose();\n        this._cellOrder.dispose();\n    }\n    /**\n     * Get the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The cell at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._cellMap.get(this._cellOrder.get(index));\n    }\n    /**\n     * Set the cell at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    set(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.set(index, cell.id);\n    }\n    /**\n     * Add a cell to the back of the cell list.\n     *\n     * @param cell - The cell to add to the back of the cell list.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    push(cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        const num = this._cellOrder.push(cell.id);\n        return num;\n    }\n    /**\n     * Insert a cell into the cell list at a specific index.\n     *\n     * @param index - The index at which to insert the cell.\n     *\n     * @param cell - The cell to set at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cell to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insert(index, cell) {\n        // Set the internal data structures.\n        this._cellMap.set(cell.id, cell);\n        this._cellOrder.insert(index, cell.id);\n    }\n    /**\n     * Remove the first occurrence of a cell from the cell list.\n     *\n     * @param cell - The cell of interest.\n     *\n     * @returns The index of the removed cell, or `-1` if the cell\n     *   is not contained in the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     */\n    removeValue(cell) {\n        const index = ArrayExt.findFirstIndex(toArray(this._cellOrder), id => this._cellMap.get(id) === cell);\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the cell at a specific index.\n     *\n     * @param index - The index of the cell of interest.\n     *\n     * @returns The cell at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed cell and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const id = this._cellOrder.get(index);\n        this._cellOrder.remove(index);\n        const cell = this._cellMap.get(id);\n        return cell;\n    }\n    /**\n     * Remove all cells from the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        this._cellOrder.clear();\n    }\n    /**\n     * Move a cell from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        this._cellOrder.move(fromIndex, toIndex);\n    }\n    /**\n     * Push a set of cells to the back of the cell list.\n     *\n     * @param cells - An iterable or array-like set of cells to add.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    pushAll(cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            // Set the internal data structures.\n            this._cellMap.set(cell.id, cell);\n            this._cellOrder.push(cell.id);\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the cell list at the specified index.\n     *\n     * @param index - The index at which to insert the cells.\n     *\n     * @param cells - The cells to insert at the specified index.\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the cell list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     *\n     * #### Notes\n     * This should be considered to transfer ownership of the\n     * cells to the `CellList`. As such, `cell.dispose()` should\n     * not be called by other actors.\n     */\n    insertAll(index, cells) {\n        const newValues = toArray(cells);\n        each(newValues, cell => {\n            this._cellMap.set(cell.id, cell);\n            // @todo it looks like this compound operation shoult start before the `each` loop.\n            this._cellOrder.beginCompoundOperation();\n            this._cellOrder.insert(index++, cell.id);\n            this._cellOrder.endCompoundOperation();\n        });\n        return this.length;\n    }\n    /**\n     * Remove a range of items from the cell list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the cell list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed cell and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        this._cellOrder.removeRange(startIndex, endIndex);\n        return this.length;\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this.nbmodel.canRedo();\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this.nbmodel.canUndo();\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._cellOrder.beginCompoundOperation(isUndoAble);\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._cellOrder.endCompoundOperation();\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        this.nbmodel.undo();\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        this.nbmodel.redo();\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this.nbmodel.clearUndoHistory();\n    }\n    _onOrderChanged(order, change) {\n        if (change.type === 'add' || change.type === 'set') {\n            each(change.newValues, id => {\n                const existingCell = this._cellMap.get(id);\n                if (existingCell == null) {\n                    const cellDB = this._factory.modelDB;\n                    const cellType = cellDB.createValue(id + '.type');\n                    let cell;\n                    switch (cellType.get()) {\n                        case 'code':\n                            cell = this._factory.createCodeCell({ id: id });\n                            break;\n                        case 'markdown':\n                            cell = this._factory.createMarkdownCell({ id: id });\n                            break;\n                        default:\n                            cell = this._factory.createRawCell({ id: id });\n                            break;\n                    }\n                    this._cellMap.set(id, cell);\n                }\n                else if (!existingCell.sharedModel.isStandalone) {\n                    this._mutex(() => {\n                        // it does already exist, probably because it was deleted previously and we introduced it\n                        // copy it to a fresh codecell instance\n                        const cell = existingCell.toJSON();\n                        let freshCell = null;\n                        switch (cell.cell_type) {\n                            case 'code':\n                                freshCell = this._factory.createCodeCell({ cell });\n                                break;\n                            case 'markdown':\n                                freshCell = this._factory.createMarkdownCell({ cell });\n                                break;\n                            default:\n                                freshCell = this._factory.createRawCell({ cell });\n                                break;\n                        }\n                        this._cellMap.set(id, freshCell);\n                    });\n                }\n            });\n        }\n        const newValues = [];\n        const oldValues = [];\n        each(change.newValues, id => {\n            newValues.push(this._cellMap.get(id));\n        });\n        each(change.oldValues, id => {\n            oldValues.push(this._cellMap.get(id));\n        });\n        this._changed.emit({\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        });\n    }\n}\n//# sourceMappingURL=celllist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as models from '@jupyterlab/shared-models';\nimport { CodeCellModel, RawCellModel, MarkdownCellModel } from '@jupyterlab/cells';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { Signal } from '@lumino/signaling';\nimport { UUID } from '@lumino/coreutils';\nimport { ModelDB } from '@jupyterlab/observables';\nimport { CellList } from './celllist';\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * An implementation of a notebook Model.\n */\nexport class NotebookModel {\n    /**\n     * Construct a new notebook model.\n     */\n    constructor(options = {}) {\n        /**\n         * The shared notebook model.\n         */\n        this.sharedModel = models.YNotebook.create();\n        this._dirty = false;\n        this._readOnly = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._nbformat = nbformat.MAJOR_VERSION;\n        this._nbformatMinor = nbformat.MINOR_VERSION;\n        this._isDisposed = false;\n        if (options.modelDB) {\n            this.modelDB = options.modelDB;\n        }\n        else {\n            this.modelDB = new ModelDB();\n        }\n        this._isInitialized = options.isInitialized === false ? false : true;\n        const factory = options.contentFactory || NotebookModel.defaultContentFactory;\n        this.contentFactory = factory.clone(this.modelDB.view('cells'));\n        this._cells = new CellList(this.modelDB, this.contentFactory, this.sharedModel);\n        this._trans = (options.translator || nullTranslator).load('jupyterlab');\n        this._cells.changed.connect(this._onCellsChanged, this);\n        // Handle initial metadata.\n        const metadata = this.modelDB.createMap('metadata');\n        if (!metadata.has('language_info')) {\n            const name = options.languagePreference || '';\n            metadata.set('language_info', { name });\n        }\n        this._ensureMetadata();\n        metadata.changed.connect(this.triggerContentChange, this);\n        this._deletedCells = [];\n    }\n    /**\n     * A signal emitted when the document content changes.\n     */\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    /**\n     * A signal emitted when the document state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The dirty state of the document.\n     */\n    get dirty() {\n        return this._dirty;\n    }\n    set dirty(newValue) {\n        if (newValue === this._dirty) {\n            return;\n        }\n        const oldValue = this._dirty;\n        this._dirty = newValue;\n        this.triggerStateChange({ name: 'dirty', oldValue, newValue });\n    }\n    /**\n     * The read only state of the document.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(newValue) {\n        if (newValue === this._readOnly) {\n            return;\n        }\n        const oldValue = this._readOnly;\n        this._readOnly = newValue;\n        this.triggerStateChange({ name: 'readOnly', oldValue, newValue });\n    }\n    /**\n     * The metadata associated with the notebook.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the observable list of notebook cells.\n     */\n    get cells() {\n        return this._cells;\n    }\n    /**\n     * The major version number of the nbformat.\n     */\n    get nbformat() {\n        return this._nbformat;\n    }\n    /**\n     * The minor version number of the nbformat.\n     */\n    get nbformatMinor() {\n        return this._nbformatMinor;\n    }\n    /**\n     * The default kernel name of the document.\n     */\n    get defaultKernelName() {\n        const spec = this.metadata.get('kernelspec');\n        return spec ? spec.name : '';\n    }\n    /**\n     * A list of deleted cells for the notebook..\n     */\n    get deletedCells() {\n        return this._deletedCells;\n    }\n    /**\n     * If the model is initialized or not.\n     */\n    get isInitialized() {\n        return this._isInitialized;\n    }\n    /**\n     * The default kernel language of the document.\n     */\n    get defaultKernelLanguage() {\n        const info = this.metadata.get('language_info');\n        return info ? info.name : '';\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        const cells = this.cells;\n        this._cells = null;\n        cells.dispose();\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Serialize the model to a string.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n    /**\n     * Deserialize the model from a string.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromString(value) {\n        this.fromJSON(JSON.parse(value));\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        var _a, _b;\n        const cells = [];\n        for (let i = 0; i < ((_b = (_a = this.cells) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i++) {\n            const cell = this.cells.get(i).toJSON();\n            if (this._nbformat === 4 && this._nbformatMinor <= 4) {\n                // strip cell ids if we have notebook format 4.0-4.4\n                delete cell.id;\n            }\n            cells.push(cell);\n        }\n        this._ensureMetadata();\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            metadata[key] = JSON.parse(JSON.stringify(this.metadata.get(key)));\n        }\n        return {\n            metadata,\n            nbformat_minor: this._nbformatMinor,\n            nbformat: this._nbformat,\n            cells\n        };\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * Should emit a [contentChanged] signal.\n     */\n    fromJSON(value) {\n        const cells = [];\n        const factory = this.contentFactory;\n        const useId = value.nbformat === 4 && value.nbformat_minor >= 5;\n        for (const cell of value.cells) {\n            const options = { cell };\n            if (useId) {\n                options.id = cell.id;\n            }\n            switch (cell.cell_type) {\n                case 'code':\n                    cells.push(factory.createCodeCell(options));\n                    break;\n                case 'markdown':\n                    cells.push(factory.createMarkdownCell(options));\n                    break;\n                case 'raw':\n                    cells.push(factory.createRawCell(options));\n                    break;\n                default:\n                    continue;\n            }\n        }\n        this.cells.beginCompoundOperation();\n        this.cells.clear();\n        this.cells.pushAll(cells);\n        this.cells.endCompoundOperation();\n        let oldValue = 0;\n        let newValue = 0;\n        this._nbformatMinor = nbformat.MINOR_VERSION;\n        this._nbformat = nbformat.MAJOR_VERSION;\n        const origNbformat = value.metadata.orig_nbformat;\n        if (value.nbformat !== this._nbformat) {\n            oldValue = this._nbformat;\n            this._nbformat = newValue = value.nbformat;\n            this.triggerStateChange({ name: 'nbformat', oldValue, newValue });\n        }\n        if (value.nbformat_minor > this._nbformatMinor) {\n            oldValue = this._nbformatMinor;\n            this._nbformatMinor = newValue = value.nbformat_minor;\n            this.triggerStateChange({ name: 'nbformatMinor', oldValue, newValue });\n        }\n        // Alert the user if the format changes.\n        if (origNbformat !== undefined && this._nbformat !== origNbformat) {\n            const newer = this._nbformat > origNbformat;\n            let msg;\n            if (newer) {\n                msg = this._trans.__(`This notebook has been converted from an older notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (vthis._nbformat) will be used.\n'Older versions of Jupyter may not be able to read the new format.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            else {\n                msg = this._trans.__(`This notebook has been converted from an newer notebook format (v%1)\nto the current notebook format (v%2).\nThe next time you save this notebook, the current notebook format (v%2) will be used.\nSome features of the original notebook may not be available.' To preserve the original format version,\nclose the notebook without saving it.`, origNbformat, this._nbformat);\n            }\n            void showDialog({\n                title: this._trans.__('Notebook converted'),\n                body: msg,\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n        }\n        // Update the metadata.\n        this.metadata.clear();\n        const metadata = value.metadata;\n        for (const key in metadata) {\n            // orig_nbformat is not intended to be stored per spec.\n            if (key === 'orig_nbformat') {\n                continue;\n            }\n            this.metadata.set(key, metadata[key]);\n        }\n        this._ensureMetadata();\n        this.dirty = true;\n    }\n    /**\n     * Initialize the model with its current state.\n     *\n     * # Notes\n     * Adds an empty code cell if the model is empty\n     * and clears undo state.\n     */\n    initialize() {\n        if (!this.cells.length) {\n            const factory = this.contentFactory;\n            this.cells.push(factory.createCodeCell({}));\n        }\n        this._isInitialized = true;\n        this.cells.clearUndo();\n    }\n    /**\n     * Handle a change in the cells list.\n     */\n    _onCellsChanged(list, change) {\n        switch (change.type) {\n            case 'add':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            case 'remove':\n                break;\n            case 'set':\n                change.newValues.forEach(cell => {\n                    cell.contentChanged.connect(this.triggerContentChange, this);\n                });\n                break;\n            default:\n                break;\n        }\n        this.triggerContentChange();\n    }\n    /**\n     * Make sure we have the required metadata fields.\n     */\n    _ensureMetadata() {\n        const metadata = this.metadata;\n        if (!metadata.has('language_info')) {\n            metadata.set('language_info', { name: '' });\n        }\n        if (!metadata.has('kernelspec')) {\n            metadata.set('kernelspec', { name: '', display_name: '' });\n        }\n    }\n    /**\n     * Trigger a state change signal.\n     */\n    triggerStateChange(args) {\n        this._stateChanged.emit(args);\n    }\n    /**\n     * Trigger a content changed signal.\n     */\n    triggerContentChange() {\n        this._contentChanged.emit(void 0);\n        this.dirty = true;\n    }\n    /**\n     * Whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n}\n/**\n * The namespace for the `NotebookModel` class statics.\n */\n(function (NotebookModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create a new cell model factory.\n         */\n        constructor(options) {\n            this.codeCellContentFactory =\n                options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n            this.modelDB = options.modelDB;\n        }\n        /**\n         * Create a new cell by cell type.\n         *\n         * @param type:  the type of the cell to create.\n         *\n         * @param options: the cell creation options.\n         *\n         * #### Notes\n         * This method is intended to be a convenience method to programmaticaly\n         * call the other cell creation methods in the factory.\n         */\n        createCell(type, opts) {\n            switch (type) {\n                case 'code':\n                    return this.createCodeCell(opts);\n                case 'markdown':\n                    return this.createMarkdownCell(opts);\n                case 'raw':\n                default:\n                    return this.createRawCell(opts);\n            }\n        }\n        /**\n         * Create a new code cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new code cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         *   If the contentFactory is not provided, the instance\n         *   `codeCellContentFactory` will be used.\n         */\n        createCodeCell(options) {\n            if (options.contentFactory) {\n                options.contentFactory = this.codeCellContentFactory;\n            }\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new CodeCellModel(options);\n        }\n        /**\n         * Create a new markdown cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new markdown cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createMarkdownCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new MarkdownCellModel(options);\n        }\n        /**\n         * Create a new raw cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new raw cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createRawCell(options) {\n            if (this.modelDB) {\n                if (!options.id) {\n                    options.id = UUID.uuid4();\n                }\n                options.modelDB = this.modelDB.view(options.id);\n            }\n            return new RawCellModel(options);\n        }\n        /**\n         * Clone the content factory with a new IModelDB.\n         */\n        clone(modelDB) {\n            return new ContentFactory({\n                modelDB: modelDB,\n                codeCellContentFactory: this.codeCellContentFactory\n            });\n        }\n    }\n    NotebookModel.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    NotebookModel.defaultContentFactory = new ContentFactory({});\n})(NotebookModel || (NotebookModel = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { NotebookModel } from './model';\n/**\n * A model factory for notebooks.\n */\nexport class NotebookModelFactory {\n    /**\n     * Construct a new notebook model factory.\n     */\n    constructor(options) {\n        this._disposed = false;\n        const codeCellContentFactory = options.codeCellContentFactory;\n        this.contentFactory =\n            options.contentFactory ||\n                new NotebookModel.ContentFactory({ codeCellContentFactory });\n    }\n    /**\n     * The name of the model.\n     */\n    get name() {\n        return 'notebook';\n    }\n    /**\n     * The content type of the file.\n     */\n    get contentType() {\n        return 'notebook';\n    }\n    /**\n     * The format of the file.\n     */\n    get fileFormat() {\n        return 'json';\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the model factory.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Create a new model for a given path.\n     *\n     * @param languagePreference - An optional kernel language preference.\n     *\n     * @returns A new document model.\n     */\n    createNew(languagePreference, modelDB, isInitialized) {\n        const contentFactory = this.contentFactory;\n        return new NotebookModel({\n            languagePreference,\n            contentFactory,\n            modelDB,\n            isInitialized\n        });\n    }\n    /**\n     * Get the preferred kernel language given a path.\n     */\n    preferredLanguage(path) {\n        return '';\n    }\n}\n//# sourceMappingURL=modelfactory.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, each, chain } from '@lumino/algorithm';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { Collapse, Styling } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper, JSONEditor } from '@jupyterlab/codeeditor';\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { nullTranslator } from '@jupyterlab/translation';\nclass RankedPanel extends Widget {\n    constructor() {\n        super();\n        this._items = [];\n        this.layout = new PanelLayout();\n        this.addClass('jp-RankedPanel');\n    }\n    addWidget(widget, rank) {\n        const rankItem = { widget, rank };\n        const index = ArrayExt.upperBound(this._items, rankItem, Private.itemCmp);\n        ArrayExt.insert(this._items, index, rankItem);\n        const layout = this.layout;\n        layout.insertWidget(index, widget);\n    }\n    /**\n     * Handle the removal of a child\n     *\n     */\n    onChildRemoved(msg) {\n        const index = ArrayExt.findFirstIndex(this._items, item => item.widget === msg.child);\n        if (index !== -1) {\n            ArrayExt.removeAt(this._items, index);\n        }\n    }\n}\n/**\n * A widget that provides metadata tools.\n */\nexport class NotebookTools extends Widget {\n    /**\n     * Construct a new NotebookTools object.\n     */\n    constructor(options) {\n        super();\n        this.addClass('jp-NotebookTools');\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._commonTools = new RankedPanel();\n        this._advancedTools = new RankedPanel();\n        this._advancedTools.title.label = this._trans.__('Advanced Tools');\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(this._commonTools);\n        layout.addWidget(new Collapse({ widget: this._advancedTools }));\n        this._tracker = options.tracker;\n        this._tracker.currentChanged.connect(this._onActiveNotebookPanelChanged, this);\n        this._tracker.activeCellChanged.connect(this._onActiveCellChanged, this);\n        this._tracker.selectionChanged.connect(this._onSelectionChanged, this);\n        this._onActiveNotebookPanelChanged();\n        this._onActiveCellChanged();\n        this._onSelectionChanged();\n    }\n    /**\n     * The active cell widget.\n     */\n    get activeCell() {\n        return this._tracker.activeCell;\n    }\n    /**\n     * The currently selected cells.\n     */\n    get selectedCells() {\n        const panel = this._tracker.currentWidget;\n        if (!panel) {\n            return [];\n        }\n        const notebook = panel.content;\n        return notebook.widgets.filter(cell => notebook.isSelectedOrActive(cell));\n    }\n    /**\n     * The current notebook.\n     */\n    get activeNotebookPanel() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * Add a cell tool item.\n     */\n    addItem(options) {\n        var _a;\n        const tool = options.tool;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        let section;\n        if (options.section === 'advanced') {\n            section = this._advancedTools;\n        }\n        else {\n            section = this._commonTools;\n        }\n        tool.addClass('jp-NotebookTools-tool');\n        section.addWidget(tool, rank);\n        // TODO: perhaps the necessary notebookTools functionality should be\n        // consolidated into a single object, rather than a broad reference to this.\n        tool.notebookTools = this;\n        // Trigger the tool to update its active notebook and cell.\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveNotebookPanelMessage);\n        MessageLoop.sendMessage(tool, NotebookTools.ActiveCellMessage);\n    }\n    /**\n     * Handle a change to the notebook panel.\n     */\n    _onActiveNotebookPanelChanged() {\n        if (this._prevActiveNotebookModel &&\n            !this._prevActiveNotebookModel.isDisposed) {\n            this._prevActiveNotebookModel.metadata.changed.disconnect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        const activeNBModel = this.activeNotebookPanel && this.activeNotebookPanel.content\n            ? this.activeNotebookPanel.content.model\n            : null;\n        this._prevActiveNotebookModel = activeNBModel;\n        if (activeNBModel) {\n            activeNBModel.metadata.changed.connect(this._onActiveNotebookPanelMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveNotebookPanelMessage);\n        });\n    }\n    /**\n     * Handle a change to the active cell.\n     */\n    _onActiveCellChanged() {\n        if (this._prevActiveCell && !this._prevActiveCell.isDisposed) {\n            this._prevActiveCell.metadata.changed.disconnect(this._onActiveCellMetadataChanged, this);\n        }\n        const activeCell = this.activeCell ? this.activeCell.model : null;\n        this._prevActiveCell = activeCell;\n        if (activeCell) {\n            activeCell.metadata.changed.connect(this._onActiveCellMetadataChanged, this);\n        }\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.ActiveCellMessage);\n        });\n    }\n    /**\n     * Handle a change in the selection.\n     */\n    _onSelectionChanged() {\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, NotebookTools.SelectionMessage);\n        });\n    }\n    /**\n     * Handle a change in the active cell metadata.\n     */\n    _onActiveNotebookPanelMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activenotebookpanel-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    /**\n     * Handle a change in the notebook model metadata.\n     */\n    _onActiveCellMetadataChanged(sender, args) {\n        const message = new ObservableJSON.ChangeMessage('activecell-metadata-changed', args);\n        each(this._toolChildren(), widget => {\n            MessageLoop.sendMessage(widget, message);\n        });\n    }\n    _toolChildren() {\n        return chain(this._commonTools.children(), this._advancedTools.children());\n    }\n}\n/**\n * The namespace for NotebookTools class statics.\n */\n(function (NotebookTools) {\n    /**\n     * A singleton conflatable `'activenotebookpanel-changed'` message.\n     */\n    NotebookTools.ActiveNotebookPanelMessage = new ConflatableMessage('activenotebookpanel-changed');\n    /**\n     * A singleton conflatable `'activecell-changed'` message.\n     */\n    NotebookTools.ActiveCellMessage = new ConflatableMessage('activecell-changed');\n    /**\n     * A singleton conflatable `'selection-changed'` message.\n     */\n    NotebookTools.SelectionMessage = new ConflatableMessage('selection-changed');\n    /**\n     * The base notebook tool, meant to be subclassed.\n     */\n    class Tool extends Widget {\n        dispose() {\n            super.dispose();\n            if (this.notebookTools) {\n                this.notebookTools = null;\n            }\n        }\n        /**\n         * Process a message sent to the widget.\n         *\n         * @param msg - The message sent to the widget.\n         */\n        processMessage(msg) {\n            super.processMessage(msg);\n            switch (msg.type) {\n                case 'activenotebookpanel-changed':\n                    this.onActiveNotebookPanelChanged(msg);\n                    break;\n                case 'activecell-changed':\n                    this.onActiveCellChanged(msg);\n                    break;\n                case 'selection-changed':\n                    this.onSelectionChanged(msg);\n                    break;\n                case 'activecell-metadata-changed':\n                    this.onActiveCellMetadataChanged(msg);\n                    break;\n                case 'activenotebookpanel-metadata-changed':\n                    this.onActiveNotebookPanelMetadataChanged(msg);\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle a change to the notebook panel.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the selection.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onSelectionChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveCellMetadataChanged(msg) {\n            /* no-op */\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         *\n         * #### Notes\n         * The default implementation is a no-op.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            /* no-op */\n        }\n    }\n    NotebookTools.Tool = Tool;\n    /**\n     * A cell tool displaying the active cell contents.\n     */\n    class ActiveCellTool extends Tool {\n        /**\n         * Construct a new active cell tool.\n         */\n        constructor() {\n            super();\n            this._model = new CodeEditor.Model();\n            this.addClass('jp-ActiveCellTool');\n            this.addClass('jp-InputArea');\n            this.layout = new PanelLayout();\n        }\n        /**\n         * Dispose of the resources used by the tool.\n         */\n        dispose() {\n            if (this._model === null) {\n                return;\n            }\n            this._model.dispose();\n            this._model = null;\n            super.dispose();\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            const layout = this.layout;\n            const count = layout.widgets.length;\n            for (let i = 0; i < count; i++) {\n                layout.widgets[0].dispose();\n            }\n            if (this._cellModel && !this._cellModel.isDisposed) {\n                this._cellModel.value.changed.disconnect(this._onValueChanged, this);\n                this._cellModel.mimeTypeChanged.disconnect(this._onMimeTypeChanged, this);\n            }\n            if (!activeCell) {\n                const cell = new Widget();\n                cell.addClass('jp-InputArea-editor');\n                cell.addClass('jp-InputArea-editor');\n                layout.addWidget(cell);\n                this._cellModel = null;\n                return;\n            }\n            const promptNode = activeCell.promptNode\n                ? activeCell.promptNode.cloneNode(true)\n                : undefined;\n            const prompt = new Widget({ node: promptNode });\n            const factory = activeCell.contentFactory.editorFactory;\n            const cellModel = (this._cellModel = activeCell.model);\n            cellModel.value.changed.connect(this._onValueChanged, this);\n            cellModel.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n            this._model.value.text = cellModel.value.text.split('\\n')[0];\n            this._model.mimeType = cellModel.mimeType;\n            const model = this._model;\n            const editorWidget = new CodeEditorWrapper({ model, factory });\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.addClass('jp-InputArea-editor');\n            editorWidget.editor.setOption('readOnly', true);\n            layout.addWidget(prompt);\n            layout.addWidget(editorWidget);\n        }\n        /**\n         * Handle a change to the current editor value.\n         */\n        _onValueChanged() {\n            this._model.value.text = this._cellModel.value.text.split('\\n')[0];\n        }\n        /**\n         * Handle a change to the current editor mimetype.\n         */\n        _onMimeTypeChanged() {\n            this._model.mimeType = this._cellModel.mimeType;\n        }\n    }\n    NotebookTools.ActiveCellTool = ActiveCellTool;\n    /**\n     * A raw metadata editor.\n     */\n    class MetadataEditorTool extends Tool {\n        /**\n         * Construct a new raw metadata tool.\n         */\n        constructor(options) {\n            super();\n            const { editorFactory } = options;\n            this.addClass('jp-MetadataEditorTool');\n            const layout = (this.layout = new PanelLayout());\n            this.editor = new JSONEditor({\n                editorFactory\n            });\n            this.editor.title.label = options.label || 'Edit Metadata';\n            const titleNode = new Widget({ node: document.createElement('label') });\n            titleNode.node.textContent = options.label || 'Edit Metadata';\n            layout.addWidget(titleNode);\n            layout.addWidget(this.editor);\n        }\n    }\n    NotebookTools.MetadataEditorTool = MetadataEditorTool;\n    /**\n     * A notebook metadata editor\n     */\n    class NotebookMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Notebook Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the notebook.\n         */\n        onActiveNotebookPanelChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the notebook metadata.\n         */\n        onActiveNotebookPanelMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            var _a, _b;\n            const nb = this.notebookTools.activeNotebookPanel &&\n                this.notebookTools.activeNotebookPanel.content;\n            this.editor.source = (_b = (_a = nb === null || nb === void 0 ? void 0 : nb.model) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : null;\n        }\n    }\n    NotebookTools.NotebookMetadataEditorTool = NotebookMetadataEditorTool;\n    /**\n     * A cell metadata editor\n     */\n    class CellMetadataEditorTool extends MetadataEditorTool {\n        constructor(options) {\n            const translator = options.translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            options.label = options.label || trans.__('Cell Metadata');\n            super(options);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            this._update();\n        }\n        /**\n         * Handle a change to the active cell metadata.\n         */\n        onActiveCellMetadataChanged(msg) {\n            this._update();\n        }\n        _update() {\n            const cell = this.notebookTools.activeCell;\n            this.editor.source = cell ? cell.model.metadata : null;\n        }\n    }\n    NotebookTools.CellMetadataEditorTool = CellMetadataEditorTool;\n    /**\n     * A cell tool that provides a selection for a given metadata key.\n     */\n    class KeySelector extends Tool {\n        /**\n         * Construct a new KeySelector.\n         */\n        constructor(options) {\n            // TODO: use react\n            super({ node: Private.createSelectorNode(options) });\n            /**\n             * Get the value for the data.\n             */\n            this._getValue = (cell) => {\n                let value = cell.model.metadata.get(this.key);\n                if (value === undefined) {\n                    value = this._default;\n                }\n                return value;\n            };\n            /**\n             * Set the value for the data.\n             */\n            this._setValue = (cell, value) => {\n                if (value === this._default) {\n                    cell.model.metadata.delete(this.key);\n                }\n                else {\n                    cell.model.metadata.set(this.key, value);\n                }\n            };\n            this._changeGuard = false;\n            this.addClass('jp-KeySelector');\n            this.key = options.key;\n            this._default = options.default;\n            this._validCellTypes = options.validCellTypes || [];\n            this._getter = options.getter || this._getValue;\n            this._setter = options.setter || this._setValue;\n        }\n        /**\n         * The select node for the widget.\n         */\n        get selectNode() {\n            return this.node.getElementsByTagName('select')[0];\n        }\n        /**\n         * Handle the DOM events for the widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notebook panel's node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'change':\n                    this.onValueChanged();\n                    break;\n                default:\n                    break;\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            const node = this.selectNode;\n            node.addEventListener('change', this);\n        }\n        /**\n         * Handle `before-detach` messages for the widget.\n         */\n        onBeforeDetach(msg) {\n            const node = this.selectNode;\n            node.removeEventListener('change', this);\n        }\n        /**\n         * Handle a change to the active cell.\n         */\n        onActiveCellChanged(msg) {\n            const select = this.selectNode;\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell) {\n                select.disabled = true;\n                select.value = '';\n                return;\n            }\n            const cellType = activeCell.model.type;\n            if (this._validCellTypes.length &&\n                this._validCellTypes.indexOf(cellType) === -1) {\n                select.value = '';\n                select.disabled = true;\n                return;\n            }\n            select.disabled = false;\n            this._changeGuard = true;\n            const getter = this._getter;\n            select.value = JSON.stringify(getter(activeCell));\n            this._changeGuard = false;\n        }\n        /**\n         * Handle a change to the metadata of the active cell.\n         */\n        onActiveCellMetadataChanged(msg) {\n            if (this._changeGuard) {\n                return;\n            }\n            const select = this.selectNode;\n            const cell = this.notebookTools.activeCell;\n            if (msg.args.key === this.key && cell) {\n                this._changeGuard = true;\n                const getter = this._getter;\n                select.value = JSON.stringify(getter(cell));\n                this._changeGuard = false;\n            }\n        }\n        /**\n         * Handle a change to the value.\n         */\n        onValueChanged() {\n            const activeCell = this.notebookTools.activeCell;\n            if (!activeCell || this._changeGuard) {\n                return;\n            }\n            this._changeGuard = true;\n            const select = this.selectNode;\n            const setter = this._setter;\n            setter(activeCell, JSON.parse(select.value));\n            this._changeGuard = false;\n        }\n    }\n    NotebookTools.KeySelector = KeySelector;\n    /**\n     * Create a slideshow selector.\n     */\n    function createSlideShowSelector(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        trans.__('');\n        const options = {\n            key: 'slideshow',\n            title: trans.__('Slide Type'),\n            optionValueArray: [\n                ['-', null],\n                [trans.__('Slide'), 'slide'],\n                [trans.__('Sub-Slide'), 'subslide'],\n                [trans.__('Fragment'), 'fragment'],\n                [trans.__('Skip'), 'skip'],\n                [trans.__('Notes'), 'notes']\n            ],\n            getter: cell => {\n                const value = cell.model.metadata.get('slideshow');\n                return value && value['slide_type'];\n            },\n            setter: (cell, value) => {\n                let data = cell.model.metadata.get('slideshow') || Object.create(null);\n                if (value === null) {\n                    // Make a shallow copy so we aren't modifying the original metadata.\n                    data = Object.assign({}, data);\n                    delete data.slide_type;\n                }\n                else {\n                    data = Object.assign(Object.assign({}, data), { slide_type: value });\n                }\n                if (Object.keys(data).length > 0) {\n                    cell.model.metadata.set('slideshow', data);\n                }\n                else {\n                    cell.model.metadata.delete('slideshow');\n                }\n            }\n        };\n        return new KeySelector(options);\n    }\n    NotebookTools.createSlideShowSelector = createSlideShowSelector;\n    /**\n     * Create an nbconvert selector.\n     */\n    function createNBConvertSelector(optionValueArray, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return new KeySelector({\n            key: 'raw_mimetype',\n            title: trans.__('Raw NBConvert Format'),\n            optionValueArray: optionValueArray,\n            validCellTypes: ['raw']\n        });\n    }\n    NotebookTools.createNBConvertSelector = createNBConvertSelector;\n})(NotebookTools || (NotebookTools = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A comparator function for widget rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Create the node for a KeySelector.\n     */\n    function createSelectorNode(options) {\n        const name = options.key;\n        const title = options.title || name[0].toLocaleUpperCase() + name.slice(1);\n        const optionNodes = [];\n        let value;\n        let option;\n        each(options.optionValueArray, item => {\n            option = item[0];\n            value = JSON.stringify(item[1]);\n            optionNodes.push(h.option({ value }, option));\n        });\n        const node = VirtualDOM.realize(h.div({}, h.label(title, h.select({}, optionNodes))));\n        Styling.styleNode(node);\n        return node;\n    }\n    Private.createSelectorNode = createSelectorNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=notebooktools.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, each } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Drag } from '@lumino/dragdrop';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { ElementExt } from '@lumino/domutils';\nimport { Cell, CodeCell, MarkdownCell, RawCell } from '@jupyterlab/cells';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n/**\n * The data attribute added to a widget that can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The data attribute added to a widget that can undo.\n */\nconst UNDOER = 'jpUndoer';\n/**\n * The class name added to notebook widgets.\n */\nconst NB_CLASS = 'jp-Notebook';\n/**\n * The class name added to notebook widget cells.\n */\nconst NB_CELL_CLASS = 'jp-Notebook-cell';\n/**\n * The class name added to a notebook in edit mode.\n */\nconst EDIT_CLASS = 'jp-mod-editMode';\n/**\n * The class name added to a notebook in command mode.\n */\nconst COMMAND_CLASS = 'jp-mod-commandMode';\n/**\n * The class name added to the active cell.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The class name added to selected cells.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to an active cell when there are other selected cells.\n */\nconst OTHER_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to unconfined images.\n */\nconst UNCONFINED_CLASS = 'jp-mod-unconfined';\n/**\n * The class name added to a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to a drop source.\n */\nconst DROP_SOURCE_CLASS = 'jp-mod-dropSource';\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A widget which renders static non-interactive notebooks.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class StaticNotebook extends Widget {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        super();\n        this._editorConfig = StaticNotebook.defaultEditorConfig;\n        this._notebookConfig = StaticNotebook.defaultNotebookConfig;\n        this._mimetype = 'text/plain';\n        this._model = null;\n        this._modelChanged = new Signal(this);\n        this._modelContentChanged = new Signal(this);\n        this.addClass(NB_CLASS);\n        this.node.dataset[KERNEL_USER] = 'true';\n        this.node.dataset[UNDOER] = 'true';\n        this.rendermime = options.rendermime;\n        this.layout = new Private.NotebookPanelLayout();\n        this.contentFactory =\n            options.contentFactory || StaticNotebook.defaultContentFactory;\n        this.editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this.notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._mimetypeService = options.mimeTypeService;\n    }\n    /**\n     * A signal emitted when the model of the notebook changes.\n     */\n    get modelChanged() {\n        return this._modelChanged;\n    }\n    /**\n     * A signal emitted when the model content changes.\n     *\n     * #### Notes\n     * This is a convenience signal that follows the current model.\n     */\n    get modelContentChanged() {\n        return this._modelContentChanged;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(newValue) {\n        newValue = newValue || null;\n        if (this._model === newValue) {\n            return;\n        }\n        const oldValue = this._model;\n        this._model = newValue;\n        if (oldValue && oldValue.modelDB.isCollaborative) {\n            void oldValue.modelDB.connected.then(() => {\n                oldValue.modelDB.collaborators.changed.disconnect(this._onCollaboratorsChanged, this);\n            });\n        }\n        if (newValue && newValue.modelDB.isCollaborative) {\n            void newValue.modelDB.connected.then(() => {\n                newValue.modelDB.collaborators.changed.connect(this._onCollaboratorsChanged, this);\n            });\n        }\n        // Trigger private, protected, and public changes.\n        this._onModelChanged(oldValue, newValue);\n        this.onModelChanged(oldValue, newValue);\n        this._modelChanged.emit(void 0);\n    }\n    /**\n     * Get the mimetype for code cells.\n     */\n    get codeMimetype() {\n        return this._mimetype;\n    }\n    /**\n     * A read-only sequence of the widgets in the notebook.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n        this._updateEditorConfig();\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n        this._updateNotebookConfig();\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle a new model.\n     *\n     * #### Notes\n     * This method is called after the model change has been handled\n     * internally and before the `modelChanged` signal is emitted.\n     * The default implementation is a no-op.\n     */\n    onModelChanged(oldValue, newValue) {\n        // No-op.\n    }\n    /**\n     * Handle changes to the notebook model content.\n     *\n     * #### Notes\n     * The default implementation emits the `modelContentChanged` signal.\n     */\n    onModelContentChanged(model, args) {\n        this._modelContentChanged.emit(void 0);\n    }\n    /**\n     * Handle changes to the notebook model metadata.\n     *\n     * #### Notes\n     * The default implementation updates the mimetypes of the code cells\n     * when the `language_info` metadata changes.\n     */\n    onMetadataChanged(sender, args) {\n        switch (args.key) {\n            case 'language_info':\n                this._updateMimetype();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     *\n     * The default implementation is a no-op\n     */\n    onCellInserted(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being moved.\n     *\n     * The default implementation is a no-op\n     */\n    onCellMoved(fromIndex, toIndex) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a cell being removed.\n     *\n     * The default implementation is a no-op\n     */\n    onCellRemoved(index, cell) {\n        // This is a no-op.\n    }\n    /**\n     * Handle a new model on the widget.\n     */\n    _onModelChanged(oldValue, newValue) {\n        const layout = this.layout;\n        if (oldValue) {\n            oldValue.cells.changed.disconnect(this._onCellsChanged, this);\n            oldValue.metadata.changed.disconnect(this.onMetadataChanged, this);\n            oldValue.contentChanged.disconnect(this.onModelContentChanged, this);\n            // TODO: reuse existing cell widgets if possible. Remember to initially\n            // clear the history of each cell if we do this.\n            while (layout.widgets.length) {\n                this._removeCell(0);\n            }\n        }\n        if (!newValue) {\n            this._mimetype = 'text/plain';\n            return;\n        }\n        this._updateMimetype();\n        const cells = newValue.cells;\n        if (!cells.length && newValue.isInitialized) {\n            cells.push(newValue.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n        }\n        each(cells, (cell, i) => {\n            this._insertCell(i, cell);\n        });\n        cells.changed.connect(this._onCellsChanged, this);\n        newValue.contentChanged.connect(this.onModelContentChanged, this);\n        newValue.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Handle a change cells event.\n     */\n    _onCellsChanged(sender, args) {\n        let index = 0;\n        switch (args.type) {\n            case 'add':\n                index = args.newIndex;\n                each(args.newValues, value => {\n                    this._insertCell(index++, value);\n                });\n                break;\n            case 'move':\n                this._moveCell(args.oldIndex, args.newIndex);\n                break;\n            case 'remove':\n                each(args.oldValues, value => {\n                    this._removeCell(args.oldIndex);\n                });\n                // Add default cell if there are no cells remaining.\n                if (!sender.length) {\n                    const model = this.model;\n                    // Add the cell in a new context to avoid triggering another\n                    // cell changed event during the handling of this signal.\n                    requestAnimationFrame(() => {\n                        if (model && !model.isDisposed && !model.cells.length) {\n                            model.cells.push(model.contentFactory.createCell(this.notebookConfig.defaultCell, {}));\n                        }\n                    });\n                }\n                break;\n            case 'set':\n                // TODO: reuse existing widgets if possible.\n                index = args.newIndex;\n                each(args.newValues, value => {\n                    // Note: this ordering (insert then remove)\n                    // is important for getting the active cell\n                    // index for the editable notebook correct.\n                    this._insertCell(index, value);\n                    this._removeCell(index + 1);\n                    index++;\n                });\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Create a cell widget and insert into the notebook.\n     */\n    _insertCell(index, cell) {\n        let widget;\n        switch (cell.type) {\n            case 'code':\n                widget = this._createCodeCell(cell);\n                widget.model.mimeType = this._mimetype;\n                break;\n            case 'markdown':\n                widget = this._createMarkdownCell(cell);\n                if (cell.value.text === '') {\n                    widget.rendered = false;\n                }\n                break;\n            default:\n                widget = this._createRawCell(cell);\n        }\n        widget.addClass(NB_CELL_CLASS);\n        const layout = this.layout;\n        layout.insertWidget(index, widget);\n        this.onCellInserted(index, widget);\n    }\n    /**\n     * Create a code cell widget from a code cell model.\n     */\n    _createCodeCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.code;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false,\n            placeholder: false,\n            maxNumberOutputs: this.notebookConfig.maxNumberOutputs\n        };\n        const cell = this.contentFactory.createCodeCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        cell.syncScrolled = true;\n        return cell;\n    }\n    /**\n     * Create a markdown cell widget from a markdown cell model.\n     */\n    _createMarkdownCell(model) {\n        const rendermime = this.rendermime;\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.markdown;\n        const options = {\n            editorConfig,\n            model,\n            rendermime,\n            contentFactory,\n            updateEditorOnShow: false\n        };\n        const cell = this.contentFactory.createMarkdownCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Create a raw cell widget from a raw cell model.\n     */\n    _createRawCell(model) {\n        const contentFactory = this.contentFactory;\n        const editorConfig = this.editorConfig.raw;\n        const options = {\n            editorConfig,\n            model,\n            contentFactory,\n            updateEditorOnShow: false\n        };\n        const cell = this.contentFactory.createRawCell(options, this);\n        cell.syncCollapse = true;\n        cell.syncEditable = true;\n        return cell;\n    }\n    /**\n     * Move a cell widget.\n     */\n    _moveCell(fromIndex, toIndex) {\n        const layout = this.layout;\n        layout.insertWidget(toIndex, layout.widgets[fromIndex]);\n        this.onCellMoved(fromIndex, toIndex);\n    }\n    /**\n     * Remove a cell widget.\n     */\n    _removeCell(index) {\n        const layout = this.layout;\n        const widget = layout.widgets[index];\n        widget.parent = null;\n        this.onCellRemoved(index, widget);\n        widget.dispose();\n    }\n    /**\n     * Update the mimetype of the notebook.\n     */\n    _updateMimetype() {\n        var _a;\n        const info = (_a = this._model) === null || _a === void 0 ? void 0 : _a.metadata.get('language_info');\n        if (!info) {\n            return;\n        }\n        this._mimetype = this._mimetypeService.getMimeTypeByLanguage(info);\n        each(this.widgets, widget => {\n            if (widget.model.type === 'code') {\n                widget.model.mimeType = this._mimetype;\n            }\n        });\n    }\n    /**\n     * Handle an update to the collaborators.\n     */\n    _onCollaboratorsChanged() {\n        var _a, _b, _c;\n        // If there are selections corresponding to non-collaborators,\n        // they are stale and should be removed.\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            for (const key of cell.model.selections.keys()) {\n                if (false === ((_c = (_b = (_a = this._model) === null || _a === void 0 ? void 0 : _a.modelDB) === null || _b === void 0 ? void 0 : _b.collaborators) === null || _c === void 0 ? void 0 : _c.has(key))) {\n                    cell.model.selections.delete(key);\n                }\n            }\n        }\n    }\n    /**\n     * Update editor settings for notebook cells.\n     */\n    _updateEditorConfig() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            const cell = this.widgets[i];\n            let config;\n            switch (cell.model.type) {\n                case 'code':\n                    config = this._editorConfig.code;\n                    break;\n                case 'markdown':\n                    config = this._editorConfig.markdown;\n                    break;\n                default:\n                    config = this._editorConfig.raw;\n                    break;\n            }\n            let editorOptions = {};\n            Object.keys(config).forEach((key) => {\n                var _a;\n                editorOptions[key] = (_a = config[key]) !== null && _a !== void 0 ? _a : null;\n            });\n            cell.editor.setOptions(editorOptions);\n            cell.editor.refresh();\n        }\n    }\n    /**\n     * Apply updated notebook settings.\n     */\n    _updateNotebookConfig() {\n        // Apply scrollPastEnd setting.\n        this.toggleClass('jp-mod-scrollPastEnd', this._notebookConfig.scrollPastEnd);\n    }\n}\n/**\n * The namespace for the `StaticNotebook` class statics.\n */\n(function (StaticNotebook) {\n    /**\n     * Default configuration options for cell editors.\n     */\n    StaticNotebook.defaultEditorConfig = {\n        code: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'off', matchBrackets: true, autoClosingBrackets: true }),\n        markdown: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false }),\n        raw: Object.assign(Object.assign({}, CodeEditor.defaultConfig), { lineWrap: 'on', matchBrackets: false, autoClosingBrackets: false })\n    };\n    /**\n     * Default configuration options for notebooks.\n     */\n    StaticNotebook.defaultNotebookConfig = {\n        scrollPastEnd: true,\n        defaultCell: 'code',\n        recordTiming: false,\n        maxNumberOutputs: 50\n    };\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create a new code cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createCodeCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new CodeCell(options).initializeState();\n        }\n        /**\n         * Create a new markdown cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createMarkdownCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new MarkdownCell(options).initializeState();\n        }\n        /**\n         * Create a new raw cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createRawCell(options, parent) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new RawCell(options).initializeState();\n        }\n    }\n    StaticNotebook.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the static notebook widget.\n     */\n    StaticNotebook.defaultContentFactory = new ContentFactory();\n})(StaticNotebook || (StaticNotebook = {}));\n/**\n * A notebook widget that supports interactivity.\n */\nexport class Notebook extends StaticNotebook {\n    /**\n     * Construct a notebook widget.\n     */\n    constructor(options) {\n        super(Private.processNotebookOptions(options));\n        this._activeCellIndex = -1;\n        this._activeCell = null;\n        this._mode = 'command';\n        this._drag = null;\n        this._fragment = '';\n        this._dragData = null;\n        this._mouseMode = null;\n        this._activeCellChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n        this._checkCacheOnNextResize = false;\n        this.node.tabIndex = -1; // Allow the widget to take focus.\n        // Allow the node to scroll while dragging items.\n        this.node.setAttribute('data-lm-dragscroll', 'true');\n    }\n    /**\n     * A signal emitted when the active cell changes.\n     *\n     * #### Notes\n     * This can be due to the active index changing or the\n     * cell at the active index changing.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the state of the notebook changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the selection state of the notebook changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * The interactivity mode of the notebook.\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(newValue) {\n        const activeCell = this.activeCell;\n        if (!activeCell) {\n            newValue = 'command';\n        }\n        if (newValue === this._mode) {\n            this._ensureFocus();\n            return;\n        }\n        // Post an update request.\n        this.update();\n        const oldValue = this._mode;\n        this._mode = newValue;\n        if (newValue === 'edit') {\n            // Edit mode deselects all cells.\n            each(this.widgets, widget => {\n                this.deselect(widget);\n            });\n            //  Edit mode unrenders an active markdown widget.\n            if (activeCell instanceof MarkdownCell) {\n                activeCell.rendered = false;\n            }\n            activeCell.inputHidden = false;\n        }\n        else {\n            // Focus on the notebook document, which blurs the active cell.\n            this.node.focus();\n        }\n        this._stateChanged.emit({ name: 'mode', oldValue, newValue });\n        this._ensureFocus();\n    }\n    /**\n     * The active cell index of the notebook.\n     *\n     * #### Notes\n     * The index will be clamped to the bounds of the notebook cells.\n     */\n    get activeCellIndex() {\n        if (!this.model) {\n            return -1;\n        }\n        return this.model.cells.length ? this._activeCellIndex : -1;\n    }\n    set activeCellIndex(newValue) {\n        const oldValue = this._activeCellIndex;\n        if (!this.model || !this.model.cells.length) {\n            newValue = -1;\n        }\n        else {\n            newValue = Math.max(newValue, 0);\n            newValue = Math.min(newValue, this.model.cells.length - 1);\n        }\n        this._activeCellIndex = newValue;\n        const cell = this.widgets[newValue];\n        if (cell !== this._activeCell) {\n            // Post an update request.\n            this.update();\n            this._activeCell = cell;\n            this._activeCellChanged.emit(cell);\n        }\n        if (this.mode === 'edit' && cell instanceof MarkdownCell) {\n            cell.rendered = false;\n        }\n        this._ensureFocus();\n        if (newValue === oldValue) {\n            return;\n        }\n        this._trimSelections();\n        this._stateChanged.emit({ name: 'activeCellIndex', oldValue, newValue });\n    }\n    /**\n     * Get the active cell widget.\n     *\n     * #### Notes\n     * This is a cell or `null` if there is no active cell.\n     */\n    get activeCell() {\n        return this._activeCell;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Select a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    select(widget) {\n        if (Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, true);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Deselect a cell widget.\n     *\n     * #### Notes\n     * It is a no-op if the value does not change.\n     * It will emit the `selectionChanged` signal.\n     */\n    deselect(widget) {\n        if (!Private.selectedProperty.get(widget)) {\n            return;\n        }\n        Private.selectedProperty.set(widget, false);\n        this._selectionChanged.emit(void 0);\n        this.update();\n    }\n    /**\n     * Whether a cell is selected.\n     */\n    isSelected(widget) {\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Whether a cell is selected or is the active cell.\n     */\n    isSelectedOrActive(widget) {\n        if (widget === this._activeCell) {\n            return true;\n        }\n        return Private.selectedProperty.get(widget);\n    }\n    /**\n     * Deselect all of the cells.\n     */\n    deselectAll() {\n        let changed = false;\n        each(this.widgets, widget => {\n            if (Private.selectedProperty.get(widget)) {\n                changed = true;\n            }\n            Private.selectedProperty.set(widget, false);\n        });\n        if (changed) {\n            this._selectionChanged.emit(void 0);\n        }\n        // Make sure we have a valid active cell.\n        this.activeCellIndex = this.activeCellIndex; // eslint-disable-line\n        this.update();\n    }\n    /**\n     * Move the head of an existing contiguous selection to extend the selection.\n     *\n     * @param index - The new head of the existing selection.\n     *\n     * #### Notes\n     * If there is no existing selection, the active cell is considered an\n     * existing one-cell selection.\n     *\n     * If the new selection is a single cell, that cell becomes the active cell\n     * and all cells are deselected.\n     *\n     * There is no change if there are no cells (i.e., activeCellIndex is -1).\n     */\n    extendContiguousSelectionTo(index) {\n        let { head, anchor } = this.getContiguousSelection();\n        let i;\n        // Handle the case of no current selection.\n        if (anchor === null || head === null) {\n            if (index === this.activeCellIndex) {\n                // Already collapsed selection, nothing more to do.\n                return;\n            }\n            // We will start a new selection below.\n            head = this.activeCellIndex;\n            anchor = this.activeCellIndex;\n        }\n        // Move the active cell. We do this before the collapsing shortcut below.\n        this.activeCellIndex = index;\n        // Make sure the index is valid, according to the rules for setting and clipping the\n        // active cell index. This may change the index.\n        index = this.activeCellIndex;\n        // Collapse the selection if it is only the active cell.\n        if (index === anchor) {\n            this.deselectAll();\n            return;\n        }\n        let selectionChanged = false;\n        if (head < index) {\n            if (head < anchor) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between head and index except anchor.\n            for (i = head + 1; i < index; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        else if (index < head) {\n            if (anchor < head) {\n                Private.selectedProperty.set(this.widgets[head], false);\n                selectionChanged = true;\n            }\n            // Toggle everything strictly between index and head except anchor.\n            for (i = index + 1; i < head; i++) {\n                if (i !== anchor) {\n                    Private.selectedProperty.set(this.widgets[i], !Private.selectedProperty.get(this.widgets[i]));\n                    selectionChanged = true;\n                }\n            }\n        }\n        // Anchor and index should *always* be selected.\n        if (!Private.selectedProperty.get(this.widgets[anchor])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[anchor], true);\n        if (!Private.selectedProperty.get(this.widgets[index])) {\n            selectionChanged = true;\n        }\n        Private.selectedProperty.set(this.widgets[index], true);\n        if (selectionChanged) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Get the head and anchor of a contiguous cell selection.\n     *\n     * The head of a contiguous selection is always the active cell.\n     *\n     * If there are no cells selected, `{head: null, anchor: null}` is returned.\n     *\n     * Throws an error if the currently selected cells do not form a contiguous\n     * selection.\n     */\n    getContiguousSelection() {\n        const cells = this.widgets;\n        const first = ArrayExt.findFirstIndex(cells, c => this.isSelected(c));\n        // Return early if no cells are selected.\n        if (first === -1) {\n            return { head: null, anchor: null };\n        }\n        const last = ArrayExt.findLastIndex(cells, c => this.isSelected(c), -1, first);\n        // Check that the selection is contiguous.\n        for (let i = first; i <= last; i++) {\n            if (!this.isSelected(cells[i])) {\n                throw new Error('Selection not contiguous');\n            }\n        }\n        // Check that the active cell is one of the endpoints of the selection.\n        const activeIndex = this.activeCellIndex;\n        if (first !== activeIndex && last !== activeIndex) {\n            throw new Error('Active cell not at endpoint of selection');\n        }\n        // Determine the head and anchor of the selection.\n        if (first === activeIndex) {\n            return { head: first, anchor: last };\n        }\n        else {\n            return { head: last, anchor: first };\n        }\n    }\n    /**\n     * Scroll so that the given position is centered.\n     *\n     * @param position - The vertical position in the notebook widget.\n     *\n     * @param threshold - An optional threshold for the scroll (0-50, defaults to\n     * 25).\n     *\n     * #### Notes\n     * If the position is within the threshold percentage of the widget height,\n     * measured from the center of the widget, the scroll position will not be\n     * changed. A threshold of 0 means we will always scroll so the position is\n     * centered, and a threshold of 50 means scrolling only happens if position is\n     * outside the current window.\n     */\n    scrollToPosition(position, threshold = 25) {\n        const node = this.node;\n        const ar = node.getBoundingClientRect();\n        const delta = position - ar.top - ar.height / 2;\n        if (Math.abs(delta) > (ar.height * threshold) / 100) {\n            node.scrollTop += delta;\n        }\n    }\n    /**\n     * Scroll so that the given cell is in view. Selects and activates cell.\n     *\n     * @param cell - A cell in the notebook widget.\n     *\n     */\n    scrollToCell(cell) {\n        // use Phosphor to scroll\n        ElementExt.scrollIntoViewIfNeeded(this.node, cell.node);\n        // change selection and active cell:\n        this.deselectAll();\n        this.select(cell);\n        cell.activate();\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        // Wait all cells are rendered then set fragment and update.\n        void Promise.all(this.widgets.map(widget => widget.ready)).then(() => {\n            this._fragment = fragment;\n            this.update();\n        });\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (!this.model) {\n            return;\n        }\n        switch (event.type) {\n            case 'contextmenu':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtContextMenuCapture(event);\n                }\n                break;\n            case 'mousedown':\n                if (event.eventPhase === Event.CAPTURING_PHASE) {\n                    this._evtMouseDownCapture(event);\n                }\n                else {\n                    this._evtMouseDown(event);\n                }\n                break;\n            case 'mouseup':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMouseup(event);\n                }\n                break;\n            case 'mousemove':\n                if (event.currentTarget === document) {\n                    this._evtDocumentMousemove(event);\n                }\n                break;\n            case 'keydown':\n                this._ensureFocus(true);\n                break;\n            case 'dblclick':\n                this._evtDblClick(event);\n                break;\n            case 'focusin':\n                this._evtFocusIn(event);\n                break;\n            case 'focusout':\n                this._evtFocusOut(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('contextmenu', this, true);\n        node.addEventListener('mousedown', this, true);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('dblclick', this);\n        node.addEventListener('focusin', this);\n        node.addEventListener('focusout', this);\n        // Capture drag events for the notebook widget\n        // in order to preempt the drag/drop handlers in the\n        // code editor widgets, which can take text data.\n        node.addEventListener('lm-dragenter', this, true);\n        node.addEventListener('lm-dragleave', this, true);\n        node.addEventListener('lm-dragover', this, true);\n        node.addEventListener('lm-drop', this, true);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('contextmenu', this, true);\n        node.removeEventListener('mousedown', this, true);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('dblclick', this);\n        node.removeEventListener('focusin', this);\n        node.removeEventListener('focusout', this);\n        node.removeEventListener('lm-dragenter', this, true);\n        node.removeEventListener('lm-dragleave', this, true);\n        node.removeEventListener('lm-dragover', this, true);\n        node.removeEventListener('lm-drop', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        this._checkCacheOnNextResize = true;\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (!this._checkCacheOnNextResize) {\n            return super.onResize(msg);\n        }\n        this._checkCacheOnNextResize = false;\n        const cache = this._cellLayoutStateCache;\n        const width = parseInt(this.node.style.width, 10);\n        if (cache) {\n            if (width === cache.width) {\n                // Cache identical, do nothing\n                return;\n            }\n        }\n        // Update cache\n        this._cellLayoutStateCache = { width };\n        // Fallback:\n        for (const w of this.widgets) {\n            if (w instanceof Cell) {\n                w.editorWidget.update();\n            }\n        }\n    }\n    /**\n     * A message handler invoked on an `'before-hide'` message.\n     */\n    onBeforeHide(msg) {\n        // Update cache\n        const width = parseInt(this.node.style.width, 10);\n        this._cellLayoutStateCache = { width };\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        const activeCell = this.activeCell;\n        // Set the appropriate classes on the cells.\n        if (this.mode === 'edit') {\n            this.addClass(EDIT_CLASS);\n            this.removeClass(COMMAND_CLASS);\n        }\n        else {\n            this.addClass(COMMAND_CLASS);\n            this.removeClass(EDIT_CLASS);\n        }\n        if (activeCell) {\n            activeCell.addClass(ACTIVE_CLASS);\n        }\n        let count = 0;\n        each(this.widgets, widget => {\n            if (widget !== activeCell) {\n                widget.removeClass(ACTIVE_CLASS);\n            }\n            widget.removeClass(OTHER_SELECTED_CLASS);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(SELECTED_CLASS);\n                count++;\n            }\n            else {\n                widget.removeClass(SELECTED_CLASS);\n            }\n        });\n        if (count > 1) {\n            activeCell === null || activeCell === void 0 ? void 0 : activeCell.addClass(OTHER_SELECTED_CLASS);\n        }\n        if (this._fragment) {\n            let el;\n            try {\n                el = this.node.querySelector(this._fragment);\n            }\n            catch (error) {\n                console.warn('Unable to set URI fragment identifier', error);\n            }\n            if (el) {\n                el.scrollIntoView();\n            }\n            this._fragment = '';\n        }\n    }\n    /**\n     * Handle a cell being inserted.\n     */\n    onCellInserted(index, cell) {\n        if (this.model && this.model.modelDB.isCollaborative) {\n            const modelDB = this.model.modelDB;\n            void modelDB.connected.then(() => {\n                if (!cell.isDisposed) {\n                    // Setup the selection style for collaborators.\n                    const localCollaborator = modelDB.collaborators.localCollaborator;\n                    cell.editor.uuid = localCollaborator.sessionId;\n                    cell.editor.selectionStyle = Object.assign(Object.assign({}, CodeEditor.defaultSelectionStyle), { color: localCollaborator.color });\n                }\n            });\n        }\n        cell.editor.edgeRequested.connect(this._onEdgeRequest, this);\n        // If the insertion happened above, increment the active cell\n        // index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex + 1\n                : this.activeCellIndex;\n    }\n    /**\n     * Handle a cell being moved.\n     */\n    onCellMoved(fromIndex, toIndex) {\n        const i = this.activeCellIndex;\n        if (fromIndex === i) {\n            this.activeCellIndex = toIndex;\n        }\n        else if (fromIndex < i && i <= toIndex) {\n            this.activeCellIndex--;\n        }\n        else if (toIndex <= i && i < fromIndex) {\n            this.activeCellIndex++;\n        }\n    }\n    /**\n     * Handle a cell being removed.\n     */\n    onCellRemoved(index, cell) {\n        // If the removal happened above, decrement the active\n        // cell index, otherwise it stays the same.\n        this.activeCellIndex =\n            index <= this.activeCellIndex\n                ? this.activeCellIndex - 1\n                : this.activeCellIndex;\n        if (this.isSelected(cell)) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n    /**\n     * Handle a new model.\n     */\n    onModelChanged(oldValue, newValue) {\n        super.onModelChanged(oldValue, newValue);\n        // Try to set the active cell index to 0.\n        // It will be set to `-1` if there is no new model or the model is empty.\n        this.activeCellIndex = 0;\n    }\n    /**\n     * Handle edge request signals from cells.\n     */\n    _onEdgeRequest(editor, location) {\n        const prev = this.activeCellIndex;\n        if (location === 'top') {\n            this.activeCellIndex--;\n            // Move the cursor to the first position on the last line.\n            if (this.activeCellIndex < prev) {\n                const editor = this.activeCell.editor;\n                const lastLine = editor.lineCount - 1;\n                editor.setCursorPosition({ line: lastLine, column: 0 });\n            }\n        }\n        else if (location === 'bottom') {\n            this.activeCellIndex++;\n            // Move the cursor to the first character.\n            if (this.activeCellIndex > prev) {\n                const editor = this.activeCell.editor;\n                editor.setCursorPosition({ line: 0, column: 0 });\n            }\n        }\n        this.mode = 'edit';\n    }\n    /**\n     * Ensure that the notebook has proper focus.\n     */\n    _ensureFocus(force = false) {\n        const activeCell = this.activeCell;\n        if (this.mode === 'edit' && activeCell) {\n            if (!activeCell.editor.hasFocus()) {\n                activeCell.editor.focus();\n            }\n        }\n        if (force && !this.node.contains(document.activeElement)) {\n            this.node.focus();\n        }\n    }\n    /**\n     * Find the cell index containing the target html element.\n     *\n     * #### Notes\n     * Returns -1 if the cell is not found.\n     */\n    _findCell(node) {\n        // Trace up the DOM hierarchy to find the root cell node.\n        // Then find the corresponding child and select it.\n        let n = node;\n        while (n && n !== this.node) {\n            if (n.classList.contains(NB_CELL_CLASS)) {\n                const i = ArrayExt.findFirstIndex(this.widgets, widget => widget.node === n);\n                if (i !== -1) {\n                    return i;\n                }\n                break;\n            }\n            n = n.parentElement;\n        }\n        return -1;\n    }\n    /**\n     * Find the target of html mouse event and cell index containing this target.\n     *\n     * #### Notes\n     * Returned index is -1 if the cell is not found.\n     */\n    _findEventTargetAndCell(event) {\n        let target = event.target;\n        let index = this._findCell(target);\n        if (index === -1) {\n            // `event.target` sometimes gives an orphaned node in Firefox 57, which\n            // can have `null` anywhere in its parent line. If we fail to find a cell\n            // using `event.target`, try again using a target reconstructed from the\n            // position of the click event.\n            target = document.elementFromPoint(event.clientX, event.clientY);\n            index = this._findCell(target);\n        }\n        return [target, index];\n    }\n    /**\n     * Handle `contextmenu` event.\n     */\n    _evtContextMenuCapture(event) {\n        // Allow the event to propagate un-modified if the user\n        // is holding the shift-key (and probably requesting\n        // the native context menu).\n        if (event.shiftKey) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        if (widget && widget.editorWidget.node.contains(target)) {\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` event in the capture phase for the widget.\n     */\n    _evtMouseDownCapture(event) {\n        const { button, shiftKey } = event;\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        // On OS X, the context menu may be triggered with ctrl-left-click. In\n        // Firefox, ctrl-left-click gives an event with button 2, but in Chrome,\n        // ctrl-left-click gives an event with button 0 with the ctrl modifier.\n        if (button === 2 &&\n            !shiftKey &&\n            widget &&\n            widget.editorWidget.node.contains(target)) {\n            this.mode = 'command';\n            // Prevent CodeMirror from focusing the editor.\n            // TODO: find an editor-agnostic solution.\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        var _a;\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2)) {\n            return;\n        }\n        // Shift right-click gives the browser default behavior.\n        if (shiftKey && button === 2) {\n            return;\n        }\n        const [target, index] = this._findEventTargetAndCell(event);\n        const widget = this.widgets[index];\n        let targetArea;\n        if (widget) {\n            if (widget.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (widget.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'notebook';\n        }\n        // Make sure we go to command mode if the click isn't in the cell editor If\n        // we do click in the cell editor, the editor handles the focus event to\n        // switch to edit mode.\n        if (targetArea !== 'input') {\n            this.mode = 'command';\n        }\n        if (targetArea === 'notebook') {\n            this.deselectAll();\n        }\n        else if (targetArea === 'prompt' || targetArea === 'cell') {\n            // We don't want to prevent the default selection behavior\n            // if there is currently text selected in an output.\n            const hasSelection = ((_a = window.getSelection()) !== null && _a !== void 0 ? _a : '').toString() !== '';\n            if (button === 0 && shiftKey && !hasSelection) {\n                // Prevent browser selecting text in prompt or output\n                event.preventDefault();\n                // Shift-click - extend selection\n                try {\n                    this.extendContiguousSelectionTo(index);\n                }\n                catch (e) {\n                    console.error(e);\n                    this.deselectAll();\n                    return;\n                }\n                // Enter selecting mode\n                this._mouseMode = 'select';\n                document.addEventListener('mouseup', this, true);\n                document.addEventListener('mousemove', this, true);\n            }\n            else if (button === 0 && !shiftKey) {\n                // Prepare to start a drag if we are on the drag region.\n                if (targetArea === 'prompt') {\n                    // Prepare for a drag start\n                    this._dragData = {\n                        pressX: event.clientX,\n                        pressY: event.clientY,\n                        index: index\n                    };\n                    // Enter possible drag mode\n                    this._mouseMode = 'couldDrag';\n                    document.addEventListener('mouseup', this, true);\n                    document.addEventListener('mousemove', this, true);\n                    event.preventDefault();\n                }\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n            }\n            else if (button === 2) {\n                if (!this.isSelectedOrActive(widget)) {\n                    this.deselectAll();\n                    this.activeCellIndex = index;\n                }\n                event.preventDefault();\n            }\n        }\n        else if (targetArea === 'input') {\n            if (button === 2 && !this.isSelectedOrActive(widget)) {\n                this.deselectAll();\n                this.activeCellIndex = index;\n            }\n        }\n        // If we didn't set focus above, make sure we get focus now.\n        this._ensureFocus(true);\n    }\n    /**\n     * Handle the `'mouseup'` event on the document.\n     */\n    _evtDocumentMouseup(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Remove the event listeners we put on the document\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        if (this._mouseMode === 'couldDrag') {\n            // We didn't end up dragging if we are here, so treat it as a click event.\n            const [, index] = this._findEventTargetAndCell(event);\n            this.deselectAll();\n            this.activeCellIndex = index;\n        }\n        this._mouseMode = null;\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtDocumentMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // If in select mode, update the selection\n        switch (this._mouseMode) {\n            case 'select': {\n                const target = event.target;\n                const index = this._findCell(target);\n                if (index !== -1) {\n                    this.extendContiguousSelectionTo(index);\n                }\n                break;\n            }\n            case 'couldDrag': {\n                // Check for a drag initialization.\n                const data = this._dragData;\n                const dx = Math.abs(event.clientX - data.pressX);\n                const dy = Math.abs(event.clientY - data.pressY);\n                if (dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD) {\n                    this._mouseMode = null;\n                    this._startDrag(data.index, event.clientX, event.clientY);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\n        if (elements.length) {\n            elements[0].classList.remove(DROP_TARGET_CLASS);\n        }\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index === -1) {\n            return;\n        }\n        const widget = this.layout.widgets[index];\n        widget.node.classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (!event.mimeData.hasData(JUPYTER_CELL_MIME)) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Model presence should be checked before calling event handlers\n        const model = this.model;\n        const source = event.source;\n        if (source === this) {\n            // Handle the case where we are moving cells within\n            // the same notebook.\n            event.dropAction = 'move';\n            const toMove = event.mimeData.getData('internal:cells');\n            // Compute the to/from indices for the move.\n            let fromIndex = ArrayExt.firstIndexOf(this.widgets, toMove[0]);\n            let toIndex = this._findCell(target);\n            // This check is needed for consistency with the view.\n            if (toIndex !== -1 && toIndex > fromIndex) {\n                toIndex -= 1;\n            }\n            else if (toIndex === -1) {\n                // If the drop is within the notebook but not on any cell,\n                // most often this means it is past the cell areas, so\n                // set it to move the cells to the end of the notebook.\n                toIndex = this.widgets.length - 1;\n            }\n            // Don't move if we are within the block of selected cells.\n            if (toIndex >= fromIndex && toIndex < fromIndex + toMove.length) {\n                return;\n            }\n            // Move the cells one by one\n            model.cells.beginCompoundOperation();\n            if (fromIndex < toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex, toIndex);\n                });\n            }\n            else if (fromIndex > toIndex) {\n                each(toMove, cellWidget => {\n                    model.cells.move(fromIndex++, toIndex++);\n                });\n            }\n            model.cells.endCompoundOperation();\n        }\n        else {\n            // Handle the case where we are copying cells between\n            // notebooks.\n            event.dropAction = 'copy';\n            // Find the target cell and insert the copied cells.\n            let index = this._findCell(target);\n            if (index === -1) {\n                index = this.widgets.length;\n            }\n            const start = index;\n            const values = event.mimeData.getData(JUPYTER_CELL_MIME);\n            const factory = model.contentFactory;\n            // Insert the copies of the original cells.\n            model.cells.beginCompoundOperation();\n            each(values, (cell) => {\n                let value;\n                switch (cell.cell_type) {\n                    case 'code':\n                        value = factory.createCodeCell({ cell });\n                        break;\n                    case 'markdown':\n                        value = factory.createMarkdownCell({ cell });\n                        break;\n                    default:\n                        value = factory.createRawCell({ cell });\n                        break;\n                }\n                model.cells.insert(index++, value);\n            });\n            model.cells.endCompoundOperation();\n            // Select the inserted cells.\n            this.deselectAll();\n            this.activeCellIndex = start;\n            this.extendContiguousSelectionTo(index - 1);\n        }\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        var _a;\n        const cells = this.model.cells;\n        const selected = [];\n        const toMove = [];\n        each(this.widgets, (widget, i) => {\n            const cell = cells.get(i);\n            if (this.isSelectedOrActive(widget)) {\n                widget.addClass(DROP_SOURCE_CLASS);\n                selected.push(cell.toJSON());\n                toMove.push(widget);\n            }\n        });\n        const activeCell = this.activeCell;\n        let dragImage = null;\n        let countString;\n        if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.type) === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            countString = ' ';\n            if (executionCount) {\n                countString = executionCount.toString();\n            }\n        }\n        else {\n            countString = '';\n        }\n        // Create the drag image.\n        dragImage = Private.createDragImage(selected.length, countString, (_a = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model.value.text.split('\\n')[0].slice(0, 26)) !== null && _a !== void 0 ? _a : '');\n        // Set up the drag event.\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            supportedActions: 'copy-move',\n            proposedAction: 'copy',\n            source: this\n        });\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n        // Add mimeData for the fully reified cell widgets, for the\n        // case where the target is in the same notebook and we\n        // can just move the cells.\n        this._drag.mimeData.setData('internal:cells', toMove);\n        // Add mimeData for the text content of the selected cells,\n        // allowing for drag/drop into plain text fields.\n        const textContent = toMove.map(cell => cell.model.value.text).join('\\n');\n        this._drag.mimeData.setData('text/plain', textContent);\n        // Remove mousemove and mouseup listeners and start the drag.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        this._mouseMode = null;\n        void this._drag.start(clientX, clientY).then(action => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            each(toMove, widget => {\n                widget.removeClass(DROP_SOURCE_CLASS);\n            });\n        });\n    }\n    /**\n     * Handle `focus` events for the widget.\n     */\n    _evtFocusIn(event) {\n        const target = event.target;\n        const index = this._findCell(target);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            // If the editor itself does not have focus, ensure command mode.\n            if (!widget.editorWidget.node.contains(target)) {\n                this.mode = 'command';\n            }\n            this.activeCellIndex = index;\n            // If the editor has focus, ensure edit mode.\n            const node = widget.editorWidget.node;\n            if (node.contains(target)) {\n                this.mode = 'edit';\n            }\n        }\n        else {\n            // No cell has focus, ensure command mode.\n            this.mode = 'command';\n        }\n        if (this.mode === 'command' && target !== this.node) {\n            delete this.node.dataset[CODE_RUNNER];\n        }\n        else {\n            this.node.dataset[CODE_RUNNER] = 'true';\n        }\n    }\n    /**\n     * Handle `focusout` events for the notebook.\n     */\n    _evtFocusOut(event) {\n        const relatedTarget = event.relatedTarget;\n        // Bail if the window is losing focus, to preserve edit mode. This test\n        // assumes that we explicitly focus things rather than calling blur()\n        if (!relatedTarget) {\n            return;\n        }\n        // Bail if the item gaining focus is another cell,\n        // and we should not be entering command mode.\n        const index = this._findCell(relatedTarget);\n        if (index !== -1) {\n            const widget = this.widgets[index];\n            if (widget.editorWidget.node.contains(relatedTarget)) {\n                return;\n            }\n        }\n        // Otherwise enter command mode if not already.\n        if (this.mode !== 'command') {\n            this.mode = 'command';\n            // Switching to command mode currently focuses the notebook element, so\n            // refocus the relatedTarget so the focus actually switches as intended.\n            if (relatedTarget) {\n                relatedTarget.focus();\n            }\n        }\n    }\n    /**\n     * Handle `dblclick` events for the widget.\n     */\n    _evtDblClick(event) {\n        const model = this.model;\n        if (!model) {\n            return;\n        }\n        this.deselectAll();\n        const [target, index] = this._findEventTargetAndCell(event);\n        if (index === -1) {\n            return;\n        }\n        this.activeCellIndex = index;\n        if (model.cells.get(index).type === 'markdown') {\n            const widget = this.widgets[index];\n            widget.rendered = false;\n        }\n        else if (target.localName === 'img') {\n            target.classList.toggle(UNCONFINED_CLASS);\n        }\n    }\n    /**\n     * Remove selections from inactive cells to avoid\n     * spurious cursors.\n     */\n    _trimSelections() {\n        for (let i = 0; i < this.widgets.length; i++) {\n            if (i !== this._activeCellIndex) {\n                const cell = this.widgets[i];\n                cell.model.selections.delete(cell.editor.uuid);\n            }\n        }\n    }\n}\n/**\n * The namespace for the `Notebook` class statics.\n */\n(function (Notebook) {\n    /**\n     * The default implementation of a notebook content factory..\n     *\n     * #### Notes\n     * Override methods on this class to customize the default notebook factory\n     * methods that create notebook content.\n     */\n    class ContentFactory extends StaticNotebook.ContentFactory {\n    }\n    Notebook.ContentFactory = ContentFactory;\n    Notebook.defaultContentFactory = new ContentFactory();\n})(Notebook || (Notebook = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for the selected state of a cell.\n     */\n    Private.selectedProperty = new AttachedProperty({\n        name: 'selected',\n        create: () => false\n    });\n    /**\n     * A custom panel layout for the notebook.\n     */\n    class NotebookPanelLayout extends PanelLayout {\n        /**\n         * A message handler invoked on an `'update-request'` message.\n         *\n         * #### Notes\n         * This is a reimplementation of the base class method,\n         * and is a no-op.\n         */\n        onUpdateRequest(msg) {\n            // This is a no-op.\n        }\n    }\n    Private.NotebookPanelLayout = NotebookPanelLayout;\n    /**\n     * Create a cell drag image.\n     */\n    function createDragImage(count, promptNumber, cellContent) {\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    Private.createDragImage = createDragImage;\n    /**\n     * Process the `IOptions` passed to the notebook widget.\n     *\n     * #### Notes\n     * This defaults the content factory to that in the `Notebook` namespace.\n     */\n    function processNotebookOptions(options) {\n        if (options.contentFactory) {\n            return options;\n        }\n        else {\n            return {\n                rendermime: options.rendermime,\n                languagePreference: options.languagePreference,\n                contentFactory: Notebook.defaultContentFactory,\n                mimeTypeService: options.mimeTypeService\n            };\n        }\n    }\n    Private.processNotebookOptions = processNotebookOptions;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { isMarkdownCellModel } from '@jupyterlab/cells';\nimport { each } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Printing, showDialog, Dialog } from '@jupyterlab/apputils';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { Notebook } from './widget';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to notebook panels.\n */\nconst NOTEBOOK_PANEL_CLASS = 'jp-NotebookPanel';\nconst NOTEBOOK_PANEL_TOOLBAR_CLASS = 'jp-NotebookPanel-toolbar';\nconst NOTEBOOK_PANEL_NOTEBOOK_CLASS = 'jp-NotebookPanel-notebook';\n/**\n * A widget that hosts a notebook toolbar and content area.\n *\n * #### Notes\n * The widget keeps the document metadata in sync with the current\n * kernel on the context.\n */\nexport class NotebookPanel extends DocumentWidget {\n    /**\n     * Construct a new notebook panel.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * Whether we are currently in a series of autorestarts we have already\n         * notified the user about.\n         */\n        this._autorestarting = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // Set up CSS classes\n        this.addClass(NOTEBOOK_PANEL_CLASS);\n        this.toolbar.addClass(NOTEBOOK_PANEL_TOOLBAR_CLASS);\n        this.content.addClass(NOTEBOOK_PANEL_NOTEBOOK_CLASS);\n        // Set up things related to the context\n        this.content.model = this.context.model;\n        this.context.sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n        this.context.sessionContext.statusChanged.connect(this._onSessionStatusChanged, this);\n        this.context.saveState.connect(this._onSave, this);\n        void this.revealed.then(() => {\n            if (this.isDisposed) {\n                // this widget has already been disposed, bail\n                return;\n            }\n            // Set the document edit mode on initial open if it looks like a new document.\n            if (this.content.widgets.length === 1) {\n                const cellModel = this.content.widgets[0].model;\n                if (cellModel.type === 'code' && cellModel.value.text === '') {\n                    this.content.mode = 'edit';\n                }\n            }\n        });\n    }\n    _onSave(sender, state) {\n        if (state === 'started' && this.model) {\n            // Find markdown cells\n            const { cells } = this.model;\n            each(cells, cell => {\n                if (isMarkdownCellModel(cell)) {\n                    for (const key of cell.attachments.keys) {\n                        if (!cell.value.text.includes(key)) {\n                            cell.attachments.remove(key);\n                        }\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * The session context used by the panel.\n     */\n    get sessionContext() {\n        return this.context.sessionContext;\n    }\n    /**\n     * The model for the widget.\n     */\n    get model() {\n        return this.content.model;\n    }\n    /**\n     * Update the options for the current notebook panel.\n     *\n     * @param config new options to set\n     */\n    setConfig(config) {\n        this.content.editorConfig = config.editorConfig;\n        this.content.notebookConfig = config.notebookConfig;\n        // Update kernel shutdown behavior\n        const kernelPreference = this.context.sessionContext.kernelPreference;\n        this.context.sessionContext.kernelPreference = Object.assign(Object.assign({}, kernelPreference), { shutdownOnDispose: config.kernelShutdown });\n    }\n    /**\n     * Set URI fragment identifier.\n     */\n    setFragment(fragment) {\n        void this.context.ready.then(() => {\n            this.content.setFragment(fragment);\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n    }\n    /**\n     * Prints the notebook by converting to HTML with nbconvert.\n     */\n    [Printing.symbol]() {\n        return async () => {\n            // Save before generating HTML\n            if (this.context.model.dirty && !this.context.model.readOnly) {\n                await this.context.save();\n            }\n            await Printing.printURL(PageConfig.getNBConvertURL({\n                format: 'html',\n                download: false,\n                path: this.context.path\n            }));\n        };\n    }\n    /**\n     * Handle a change in the kernel by updating the document metadata.\n     */\n    _onKernelChanged(sender, args) {\n        if (!this.model || !args.newValue) {\n            return;\n        }\n        const { newValue } = args;\n        void newValue.info.then(info => {\n            var _a;\n            if (this.model &&\n                ((_a = this.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === newValue) {\n                this._updateLanguage(info.language_info);\n            }\n        });\n        void this._updateSpec(newValue);\n    }\n    _onSessionStatusChanged(sender, status) {\n        var _a;\n        // If the status is autorestarting, and we aren't already in a series of\n        // autorestarts, show the dialog.\n        if (status === 'autorestarting' && !this._autorestarting) {\n            // The kernel died and the server is restarting it. We notify the user so\n            // they know why their kernel state is gone.\n            void showDialog({\n                title: this._trans.__('Kernel Restarting'),\n                body: this._trans.__('The kernel for %1 appears to have died. It will restart automatically.', (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path),\n                buttons: [Dialog.okButton({ label: this._trans.__('Ok') })]\n            });\n            this._autorestarting = true;\n        }\n        else if (status === 'restarting') {\n            // Another autorestart attempt will first change the status to\n            // restarting, then to autorestarting again, so we don't reset the\n            // autorestarting status if the status is 'restarting'.\n            /* no-op */\n        }\n        else {\n            this._autorestarting = false;\n        }\n    }\n    /**\n     * Update the kernel language.\n     */\n    _updateLanguage(language) {\n        this.model.metadata.set('language_info', language);\n    }\n    /**\n     * Update the kernel spec.\n     */\n    async _updateSpec(kernel) {\n        const spec = await kernel.spec;\n        if (this.isDisposed) {\n            return;\n        }\n        this.model.metadata.set('kernelspec', {\n            name: kernel.name,\n            display_name: spec === null || spec === void 0 ? void 0 : spec.display_name,\n            language: spec === null || spec === void 0 ? void 0 : spec.language\n        });\n    }\n}\n/**\n * A namespace for `NotebookPanel` statics.\n */\n(function (NotebookPanel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory extends Notebook.ContentFactory {\n        /**\n         * Create a new content area for the panel.\n         */\n        createNotebook(options) {\n            return new Notebook(options);\n        }\n    }\n    NotebookPanel.ContentFactory = ContentFactory;\n    /**\n     * Default content factory for the notebook panel.\n     */\n    NotebookPanel.defaultContentFactory = new ContentFactory();\n    /* tslint:disable */\n    /**\n     * The notebook renderer token.\n     */\n    NotebookPanel.IContentFactory = new Token('@jupyterlab/notebook:IContentFactory');\n    /* tslint:enable */\n})(NotebookPanel || (NotebookPanel = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nexport class NotebookTracker extends WidgetTracker {\n    constructor() {\n        super(...arguments);\n        this._activeCell = null;\n        this._activeCellChanged = new Signal(this);\n        this._selectionChanged = new Signal(this);\n    }\n    /**\n     * The currently focused cell.\n     *\n     * #### Notes\n     * This is a read-only property. If there is no cell with the focus, then this\n     * value is `null`.\n     */\n    get activeCell() {\n        const widget = this.currentWidget;\n        if (!widget) {\n            return null;\n        }\n        return widget.content.activeCell || null;\n    }\n    /**\n     * A signal emitted when the current active cell changes.\n     *\n     * #### Notes\n     * If there is no cell with the focus, then `null` will be emitted.\n     */\n    get activeCellChanged() {\n        return this._activeCellChanged;\n    }\n    /**\n     * A signal emitted when the selection state changes.\n     */\n    get selectionChanged() {\n        return this._selectionChanged;\n    }\n    /**\n     * Add a new notebook panel to the tracker.\n     *\n     * @param panel - The notebook panel being added.\n     */\n    add(panel) {\n        const promise = super.add(panel);\n        panel.content.activeCellChanged.connect(this._onActiveCellChanged, this);\n        panel.content.selectionChanged.connect(this._onSelectionChanged, this);\n        return promise;\n    }\n    /**\n     * Dispose of the resources held by the tracker.\n     */\n    dispose() {\n        this._activeCell = null;\n        super.dispose();\n    }\n    /**\n     * Handle the current change event.\n     */\n    onCurrentChanged(widget) {\n        // Store an internal reference to active cell to prevent false positives.\n        const activeCell = this.activeCell;\n        if (activeCell && activeCell === this._activeCell) {\n            return;\n        }\n        this._activeCell = activeCell;\n        if (!widget) {\n            return;\n        }\n        // Since the notebook has changed, immediately signal an active cell change\n        this._activeCellChanged.emit(widget.content.activeCell || null);\n    }\n    _onActiveCellChanged(sender, cell) {\n        // Check if the active cell change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._activeCell = cell || null;\n            this._activeCellChanged.emit(this._activeCell);\n        }\n    }\n    _onSelectionChanged(sender) {\n        // Check if the selection change happened for the current notebook.\n        if (this.currentWidget && this.currentWidget.content === sender) {\n            this._selectionChanged.emit(void 0);\n        }\n    }\n}\n//# sourceMappingURL=tracker.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { ToolbarItems } from './default-toolbar';\nimport { NotebookPanel } from './panel';\nimport { StaticNotebook } from './widget';\nimport { sessionContextDialogs } from '@jupyterlab/apputils';\n/**\n * A widget factory for notebook panels.\n */\nexport class NotebookWidgetFactory extends ABCWidgetFactory {\n    /**\n     * Construct a new notebook widget factory.\n     *\n     * @param options - The options used to construct the factory.\n     */\n    constructor(options) {\n        super(options);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || NotebookPanel.defaultContentFactory;\n        this.mimeTypeService = options.mimeTypeService;\n        this._editorConfig =\n            options.editorConfig || StaticNotebook.defaultEditorConfig;\n        this._notebookConfig =\n            options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n        this._sessionDialogs = options.sessionDialogs || sessionContextDialogs;\n    }\n    /**\n     * A configuration object for cell editor settings.\n     */\n    get editorConfig() {\n        return this._editorConfig;\n    }\n    set editorConfig(value) {\n        this._editorConfig = value;\n    }\n    /**\n     * A configuration object for notebook settings.\n     */\n    get notebookConfig() {\n        return this._notebookConfig;\n    }\n    set notebookConfig(value) {\n        this._notebookConfig = value;\n    }\n    /**\n     * Create a new widget.\n     *\n     * #### Notes\n     * The factory will start the appropriate kernel.\n     */\n    createNewWidget(context, source) {\n        const nbOptions = {\n            rendermime: source\n                ? source.content.rendermime\n                : this.rendermime.clone({ resolver: context.urlResolver }),\n            contentFactory: this.contentFactory,\n            mimeTypeService: this.mimeTypeService,\n            editorConfig: source ? source.content.editorConfig : this._editorConfig,\n            notebookConfig: source\n                ? source.content.notebookConfig\n                : this._notebookConfig\n        };\n        const content = this.contentFactory.createNotebook(nbOptions);\n        return new NotebookPanel({ context, content });\n    }\n    /**\n     * Default factory for toolbar items to be added after the widget is created.\n     */\n    defaultToolbarFactory(widget) {\n        return ToolbarItems.getDefaultItems(widget, this._sessionDialogs, this.translator);\n    }\n}\n//# sourceMappingURL=widgetfactory.js.map","import * as React from 'react';\nimport { VDomRenderer, VDomModel } from '@jupyterlab/apputils';\nimport { Text } from '@jupyterlab/coreutils';\nimport { TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A pure function for rendering a Command/Edit mode component.\n *\n * @param props: the props for rendering the component.\n *\n * @returns a tsx component for command/edit mode.\n */\nfunction CommandEditComponent(props) {\n    const trans = (props.translator || nullTranslator).load('jupyterlab');\n    return (React.createElement(TextItem, { source: trans.__('Mode: %1', Text.titleCase(props.notebookMode)) }));\n}\n/**\n * StatusBar item to display which notebook mode user is in.\n */\nexport class CommandEditStatus extends VDomRenderer {\n    /**\n     * Construct a new CommandEdit status item.\n     */\n    constructor(translator) {\n        super(new CommandEditStatus.Model());\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n    }\n    /**\n     * Render the CommandEdit status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = this._trans.__('Notebook is in %1 mode', this.model.notebookMode);\n        return (React.createElement(CommandEditComponent, { notebookMode: this.model.notebookMode, translator: this.translator }));\n    }\n}\n/**\n * A namespace for CommandEdit statics.\n */\n(function (CommandEditStatus) {\n    /**\n     * A VDomModle for the CommandEdit renderer.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * On a change to the notebook, update the mode.\n             */\n            this._onChanged = (_notebook) => {\n                const oldMode = this._notebookMode;\n                if (this._notebook) {\n                    this._notebookMode = _notebook.mode;\n                }\n                else {\n                    this._notebookMode = 'command';\n                }\n                this._triggerChange(oldMode, this._notebookMode);\n            };\n            this._notebookMode = 'command';\n            this._notebook = null;\n        }\n        /**\n         * The current mode of the current notebook.\n         */\n        get notebookMode() {\n            return this._notebookMode;\n        }\n        /**\n         * Set the current notebook for the model.\n         */\n        set notebook(notebook) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.stateChanged.disconnect(this._onChanged, this);\n                oldNotebook.activeCellChanged.disconnect(this._onChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onChanged, this);\n            }\n            const oldMode = this._notebookMode;\n            this._notebook = notebook;\n            if (this._notebook === null) {\n                this._notebookMode = 'command';\n            }\n            else {\n                this._notebookMode = this._notebook.mode;\n                this._notebook.stateChanged.connect(this._onChanged, this);\n                this._notebook.activeCellChanged.connect(this._onChanged, this);\n                this._notebook.modelContentChanged.connect(this._onChanged, this);\n            }\n            this._triggerChange(oldMode, this._notebookMode);\n        }\n        /**\n         * Trigger a state change for the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState !== newState) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    CommandEditStatus.Model = Model;\n})(CommandEditStatus || (CommandEditStatus = {}));\n//# sourceMappingURL=modestatus.js.map","import React from 'react';\nimport { VDomRenderer, VDomModel } from '@jupyterlab/apputils';\nimport { notTrustedIcon, trustedIcon } from '@jupyterlab/ui-components';\nimport { toArray } from '@lumino/algorithm';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Determine the notebook trust status message.\n */\nfunction cellTrust(props, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    if (props.trustedCells === props.totalCells) {\n        return [\n            trans.__('Notebook trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else if (props.activeCellTrusted) {\n        return [\n            trans.__('Active cell trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-trusted'\n        ];\n    }\n    else {\n        return [\n            trans.__('Notebook not trusted: %1 of %2 cells trusted.', props.trustedCells, props.totalCells),\n            'jp-StatusItem-untrusted'\n        ];\n    }\n}\n/**\n * A pure function for a notebook trust status component.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for notebook trust.\n */\nfunction NotebookTrustComponent(props) {\n    if (props.allCellsTrusted) {\n        return React.createElement(trustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n    else {\n        return React.createElement(notTrustedIcon.react, { top: '2px', stylesheet: 'statusBar' });\n    }\n}\n/**\n * The NotebookTrust status item.\n */\nexport class NotebookTrustStatus extends VDomRenderer {\n    /**\n     * Construct a new status item.\n     */\n    constructor(translator) {\n        super(new NotebookTrustStatus.Model());\n        this.translator = translator || nullTranslator;\n    }\n    /**\n     * Render the NotebookTrust status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        this.node.title = cellTrust(this.model, this.translator)[0];\n        return (React.createElement(\"div\", null,\n            React.createElement(NotebookTrustComponent, { allCellsTrusted: this.model.trustedCells === this.model.totalCells, activeCellTrusted: this.model.activeCellTrusted, totalCells: this.model.totalCells, trustedCells: this.model.trustedCells })));\n    }\n}\n/**\n * A namespace for NotebookTrust statics.\n */\n(function (NotebookTrustStatus) {\n    /**\n     * A VDomModel for the NotebookTrust status item.\n     */\n    class Model extends VDomModel {\n        constructor() {\n            super(...arguments);\n            this._trustedCells = 0;\n            this._totalCells = 0;\n            this._activeCellTrusted = false;\n            this._notebook = null;\n        }\n        /**\n         * The number of trusted cells in the current notebook.\n         */\n        get trustedCells() {\n            return this._trustedCells;\n        }\n        /**\n         * The total number of cells in the current notebook.\n         */\n        get totalCells() {\n            return this._totalCells;\n        }\n        /**\n         * Whether the active cell is trusted.\n         */\n        get activeCellTrusted() {\n            return this._activeCellTrusted;\n        }\n        /**\n         * The current notebook for the model.\n         */\n        get notebook() {\n            return this._notebook;\n        }\n        set notebook(model) {\n            const oldNotebook = this._notebook;\n            if (oldNotebook !== null) {\n                oldNotebook.activeCellChanged.disconnect(this._onActiveCellChanged, this);\n                oldNotebook.modelContentChanged.disconnect(this._onModelChanged, this);\n            }\n            const oldState = this._getAllState();\n            this._notebook = model;\n            if (this._notebook === null) {\n                this._trustedCells = 0;\n                this._totalCells = 0;\n                this._activeCellTrusted = false;\n            }\n            else {\n                // Add listeners\n                this._notebook.activeCellChanged.connect(this._onActiveCellChanged, this);\n                this._notebook.modelContentChanged.connect(this._onModelChanged, this);\n                // Derive values\n                if (this._notebook.activeCell !== undefined) {\n                    this._activeCellTrusted = this._notebook.activeCell.model.trusted;\n                }\n                else {\n                    this._activeCellTrusted = false;\n                }\n                const { total, trusted } = this._deriveCellTrustState(this._notebook.model);\n                this._totalCells = total;\n                this._trustedCells = trusted;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the notebook model changes, update the trust state.\n         */\n        _onModelChanged(notebook) {\n            const oldState = this._getAllState();\n            const { total, trusted } = this._deriveCellTrustState(notebook.model);\n            this._totalCells = total;\n            this._trustedCells = trusted;\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * When the active cell changes, update the trust state.\n         */\n        _onActiveCellChanged(model, cell) {\n            const oldState = this._getAllState();\n            if (cell) {\n                this._activeCellTrusted = cell.model.trusted;\n            }\n            else {\n                this._activeCellTrusted = false;\n            }\n            this._triggerChange(oldState, this._getAllState());\n        }\n        /**\n         * Given a notebook model, figure out how many of the cells are trusted.\n         */\n        _deriveCellTrustState(model) {\n            if (model === null) {\n                return { total: 0, trusted: 0 };\n            }\n            const cells = toArray(model.cells);\n            const trusted = cells.reduce((accum, current) => {\n                if (current.trusted) {\n                    return accum + 1;\n                }\n                else {\n                    return accum;\n                }\n            }, 0);\n            const total = cells.length;\n            return {\n                total,\n                trusted\n            };\n        }\n        /**\n         * Get the current state of the model.\n         */\n        _getAllState() {\n            return [this._trustedCells, this._totalCells, this.activeCellTrusted];\n        }\n        /**\n         * Trigger a change in the renderer.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState[0] !== newState[0] ||\n                oldState[1] !== newState[1] ||\n                oldState[2] !== newState[2]) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    NotebookTrustStatus.Model = Model;\n})(NotebookTrustStatus || (NotebookTrustStatus = {}));\n//# sourceMappingURL=truststatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The notebook widget factory token.\n */\nexport const INotebookWidgetFactory = new Token('@jupyterlab/notebook:INotebookWidgetFactory');\n/* tslint:enable */\n/* tslint:disable */\n/**\n * The notebook tools token.\n */\nexport const INotebookTools = new Token('@jupyterlab/notebook:INotebookTools');\n/* tslint:disable */\n/**\n * The notebook tracker token.\n */\nexport const INotebookTracker = new Token('@jupyterlab/notebook:INotebookTracker');\n//# sourceMappingURL=tokens.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}
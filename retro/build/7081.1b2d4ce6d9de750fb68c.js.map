{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/observablemap.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/observablestring.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/undoablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application-extension/node_modules/@jupyterlab/observables/lib/modeldb.js"],"names":["Private","ObservableMap","options","this","_map","Map","_changed","Signal","_isDisposed","_itemCmp","itemCmp","values","key","set","size","value","oldVal","get","undefined","Error","emit","type","oldValue","newValue","has","keyList","forEach","v","k","push","valList","delete","keys","i","length","isDisposed","clear","first","second","ObservableJSON","super","JSONExt","out","Object","create","ChangeMessage","Message","args","ObservableString","initialText","_text","start","end","index","text","slice","ObservableList","_array","each","ArrayIterator","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","item","remove","copy","fromIndex","toIndex","toArray","startIndex","endIndex","ObservableUndoableList","serializer","_inCompound","_isUndoable","_madeCompoundChange","_index","_stack","_serializer","changed","connect","_onListChanged","isUndoAble","canUndo","changes","change","reverse","_undoChange","canRedo","_redoChange","list","evt","_copyChange","fromJSON","insert","move","toJSON","IdentitySerializer","ObservableValue","initialValue","_value","IChangedArgs","ModelDB","isPrepopulated","isCollaborative","connected","Promise","resolve","_toDispose","_disposables","DisposableSet","_basePath","basePath","baseDB","_db","path","_resolvePath","str","add","vec","map","val","view","dispose"],"mappings":"6SA4KIA,E,iCAtKG,MAAMC,EAIT,YAAYC,EAAU,IAKlB,GAJAC,KAAKC,KAAO,IAAIC,IAChBF,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAKK,aAAc,EACnBL,KAAKM,SAAWP,EAAQQ,SAAWV,EAAQU,QACvCR,EAAQS,OACR,IAAK,MAAMC,KAAOV,EAAQS,OACtBR,KAAKC,KAAKS,IAAID,EAAKV,EAAQS,OAAOC,IAO9C,WACI,MAAO,MAKX,cACI,OAAOT,KAAKG,SAKhB,iBACI,OAAOH,KAAKK,YAKhB,WACI,OAAOL,KAAKC,KAAKU,KAiBrB,IAAIF,EAAKG,GACL,MAAMC,EAASb,KAAKC,KAAKa,IAAIL,GAC7B,QAAcM,IAAVH,EACA,MAAMI,MAAM,6CAGhB,MAAMT,EAAUP,KAAKM,SACrB,YAAeS,IAAXF,GAAwBN,EAAQM,EAAQD,KAG5CZ,KAAKC,KAAKS,IAAID,EAAKG,GACnBZ,KAAKG,SAASc,KAAK,CACfC,KAAML,EAAS,SAAW,MAC1BJ,IAAKA,EACLU,SAAUN,EACVO,SAAUR,KAPHC,EAkBf,IAAIJ,GACA,OAAOT,KAAKC,KAAKa,IAAIL,GASzB,IAAIA,GACA,OAAOT,KAAKC,KAAKoB,IAAIZ,GAOzB,OACI,MAAMa,EAAU,GAIhB,OAHAtB,KAAKC,KAAKsB,SAAQ,CAACC,EAAGC,KAClBH,EAAQI,KAAKD,MAEVH,EAOX,SACI,MAAMK,EAAU,GAIhB,OAHA3B,KAAKC,KAAKsB,SAAQ,CAACC,EAAGC,KAClBE,EAAQD,KAAKF,MAEVG,EAaX,OAAOlB,GACH,MAAMI,EAASb,KAAKC,KAAKa,IAAIL,GAU7B,OATgBT,KAAKC,KAAK2B,OAAOnB,IAE7BT,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNT,IAAKA,EACLU,SAAUN,EACVO,cAAUL,IAGXF,EAKX,QAEI,MAAMS,EAAUtB,KAAK6B,OACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAChC9B,KAAK4B,OAAON,EAAQQ,IAM5B,UACQ9B,KAAKgC,aAGThC,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAKC,KAAKgC,WAOlB,SAAWpC,GAOPA,EAAQU,QAHR,SAAiB2B,EAAOC,GACpB,OAAOD,IAAUC,GALzB,CAQGtC,IAAYA,EAAU,K,eC7KlB,MAAMuC,UAAuBtC,EAIhC,YAAYC,EAAU,IAClBsC,MAAM,CACF9B,QAAS,EAAA+B,QAAA,UACT9B,OAAQT,EAAQS,SAMxB,SACI,MAAM+B,EAAMC,OAAOC,OAAO,MACpBZ,EAAO7B,KAAK6B,OAClB,IAAK,MAAMpB,KAAOoB,EAAM,CACpB,MAAMjB,EAAQZ,KAAKc,IAAIL,QACTM,IAAVH,IACA2B,EAAI9B,GAAO,EAAA6B,QAAA,SAAiB1B,IAGpC,OAAO2B,IAMf,SAAWH,GAIP,MAAMM,UAAsB,EAAAC,QAIxB,YAAYzB,EAAM0B,GACdP,MAAMnB,GACNlB,KAAK4C,KAAOA,GAGpBR,EAAeM,cAAgBA,EAbnC,CAcGN,IAAmBA,EAAiB,KC5ChC,MAAMS,EAIT,YAAYC,EAAc,IACtB9C,KAAK+C,MAAQ,GACb/C,KAAKK,aAAc,EACnBL,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAK+C,MAAQD,EAKjB,WACI,MAAO,SAKX,cACI,OAAO9C,KAAKG,SAKhB,SAASS,GACDA,EAAMmB,SAAW/B,KAAK+C,MAAMhB,QAAUnB,IAAUZ,KAAK+C,QAGzD/C,KAAK+C,MAAQnC,EACbZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACN8B,MAAO,EACPC,IAAKrC,EAAMmB,OACXnB,MAAOA,KAMf,WACI,OAAOZ,KAAK+C,MAShB,OAAOG,EAAOC,GACVnD,KAAK+C,MAAQ/C,KAAK+C,MAAMK,MAAM,EAAGF,GAASC,EAAOnD,KAAK+C,MAAMK,MAAMF,GAClElD,KAAKG,SAASc,KAAK,CACfC,KAAM,SACN8B,MAAOE,EACPD,IAAKC,EAAQC,EAAKpB,OAClBnB,MAAOuC,IAUf,OAAOH,EAAOC,GACV,MAAM9B,EAAWnB,KAAK+C,MAAMK,MAAMJ,EAAOC,GACzCjD,KAAK+C,MAAQ/C,KAAK+C,MAAMK,MAAM,EAAGJ,GAAShD,KAAK+C,MAAMK,MAAMH,GAC3DjD,KAAKG,SAASc,KAAK,CACfC,KAAM,SACN8B,MAAOA,EACPC,IAAKA,EACLrC,MAAOO,IAMf,QACInB,KAAKmD,KAAO,GAKhB,iBACI,OAAOnD,KAAKK,YAKhB,UACQL,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAKiC,U,IC4QT,E,WA5WG,MAAMoB,EAIT,YAAYtD,EAAU,IAClBC,KAAKsD,OAAS,GACdtD,KAAKK,aAAc,EACnBL,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,WACJ,IAAnBD,EAAQS,SACR,IAAA+C,MAAKxD,EAAQS,QAAQI,IACjBZ,KAAKsD,OAAO5B,KAAKd,MAGzBZ,KAAKM,SAAWP,EAAQQ,SAAW,EAAQA,QAK/C,WACI,MAAO,OAKX,cACI,OAAOP,KAAKG,SAKhB,aACI,OAAOH,KAAKsD,OAAOvB,OAKvB,iBACI,OAAO/B,KAAKK,YAKhB,UACQL,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAKiC,SAaT,OACI,OAAO,IAAI,EAAAuB,cAAcxD,KAAKsD,QAYlC,IAAIJ,GACA,OAAOlD,KAAKsD,OAAOJ,GAkBvB,IAAIA,EAAOtC,GACP,MAAMO,EAAWnB,KAAKsD,OAAOJ,GAC7B,QAAcnC,IAAVH,EACA,MAAM,IAAII,MAAM,iCAIhBT,EADYP,KAAKM,UACTa,EAAUP,KAGtBZ,KAAKsD,OAAOJ,GAAStC,EACrBZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNuC,SAAUP,EACVQ,SAAUR,EACVS,UAAW,CAACxC,GACZyC,UAAW,CAAChD,MAgBpB,KAAKA,GACD,MAAMiD,EAAM7D,KAAKsD,OAAO5B,KAAKd,GAQ7B,OAPAZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNuC,UAAW,EACXC,SAAU1D,KAAK+B,OAAS,EACxB4B,UAAW,GACXC,UAAW,CAAChD,KAETiD,EAqBX,OAAOX,EAAOtC,GACV,EAAAkD,SAAA,OAAgB9D,KAAKsD,OAAQJ,EAAOtC,GACpCZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNuC,UAAW,EACXC,SAAUR,EACVS,UAAW,GACXC,UAAW,CAAChD,KAiBpB,YAAYA,GACR,MAAML,EAAUP,KAAKM,SACf4C,EAAQ,EAAAY,SAAA,eAAwB9D,KAAKsD,QAAQS,GACxCxD,EAAQwD,EAAMnD,KAGzB,OADAZ,KAAKgE,OAAOd,GACLA,EAmBX,OAAOA,GACH,MAAMtC,EAAQ,EAAAkD,SAAA,SAAkB9D,KAAKsD,OAAQJ,GAC7C,QAAcnC,IAAVH,EAUJ,OAPAZ,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNuC,SAAUP,EACVQ,UAAW,EACXE,UAAW,GACXD,UAAW,CAAC/C,KAETA,EAWX,QACI,MAAMqD,EAAOjE,KAAKsD,OAAOF,QACzBpD,KAAKsD,OAAOvB,OAAS,EACrB/B,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNuC,SAAU,EACVC,SAAU,EACVE,UAAW,GACXD,UAAWM,IAoBnB,KAAKC,EAAWC,GACZ,GAAInE,KAAK+B,QAAU,GAAKmC,IAAcC,EAClC,OAEJ,MAAM3D,EAAS,CAACR,KAAKsD,OAAOY,IAC5B,EAAAJ,SAAA,KAAc9D,KAAKsD,OAAQY,EAAWC,GACtCnE,KAAKG,SAASc,KAAK,CACfC,KAAM,OACNuC,SAAUS,EACVR,SAAUS,EACVR,UAAWnD,EACXoD,UAAWpD,IAgBnB,QAAQA,GACJ,MAAMkD,EAAW1D,KAAK+B,OAWtB,OAVA,IAAAwB,MAAK/C,GAAQI,IACTZ,KAAKsD,OAAO5B,KAAKd,MAErBZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNuC,UAAW,EACXC,WACAC,UAAW,GACXC,WAAW,IAAAQ,SAAQ5D,KAEhBR,KAAK+B,OAqBhB,UAAUmB,EAAO1C,GACb,MAAMkD,EAAWR,GACjB,IAAAK,MAAK/C,GAAQI,IACT,EAAAkD,SAAA,OAAgB9D,KAAKsD,OAAQJ,IAAStC,MAE1CZ,KAAKG,SAASc,KAAK,CACfC,KAAM,MACNuC,UAAW,EACXC,WACAC,UAAW,GACXC,WAAW,IAAAQ,SAAQ5D,KAqB3B,YAAY6D,EAAYC,GACpB,MAAMX,EAAY3D,KAAKsD,OAAOF,MAAMiB,EAAYC,GAChD,IAAK,IAAIxC,EAAIuC,EAAYvC,EAAIwC,EAAUxC,IACnC,EAAAgC,SAAA,SAAkB9D,KAAKsD,OAAQe,GASnC,OAPArE,KAAKG,SAASc,KAAK,CACfC,KAAM,SACNuC,SAAUY,EACVX,UAAW,EACXC,YACAC,UAAW,KAER5D,KAAK+B,SAOpB,SAAWlC,GAOPA,EAAQU,QAHR,SAAiB2B,EAAOC,GACpB,OAAOD,IAAUC,GALzB,CAQG,IAAY,EAAU,KCrXlB,MAAMoC,UAA+BlB,EAIxC,YAAYmB,GACRnC,QACArC,KAAKyE,aAAc,EACnBzE,KAAK0E,aAAc,EACnB1E,KAAK2E,qBAAsB,EAC3B3E,KAAK4E,QAAU,EACf5E,KAAK6E,OAAS,GACd7E,KAAK8E,YAAcN,EACnBxE,KAAK+E,QAAQC,QAAQhF,KAAKiF,eAAgBjF,MAK9C,cACI,OAAOA,KAAK4E,OAAS5E,KAAK6E,OAAO9C,OAAS,EAK9C,cACI,OAAO/B,KAAK4E,QAAU,EAQ1B,uBAAuBM,GACnBlF,KAAKyE,aAAc,EACnBzE,KAAK0E,aAA6B,IAAfQ,EACnBlF,KAAK2E,qBAAsB,EAK/B,uBACI3E,KAAKyE,aAAc,EACnBzE,KAAK0E,aAAc,EACf1E,KAAK2E,qBACL3E,KAAK4E,SAMb,OACI,IAAK5E,KAAKmF,QACN,OAEJ,MAAMC,EAAUpF,KAAK6E,OAAO7E,KAAK4E,QACjC5E,KAAK0E,aAAc,EACnB,IAAK,MAAMW,KAAUD,EAAQE,UACzBtF,KAAKuF,YAAYF,GAErBrF,KAAK0E,aAAc,EACnB1E,KAAK4E,SAKT,OACI,IAAK5E,KAAKwF,QACN,OAEJxF,KAAK4E,SACL,MAAMQ,EAAUpF,KAAK6E,OAAO7E,KAAK4E,QACjC5E,KAAK0E,aAAc,EACnB,IAAK,MAAMW,KAAUD,EACjBpF,KAAKyF,YAAYJ,GAErBrF,KAAK0E,aAAc,EAKvB,YACI1E,KAAK4E,QAAU,EACf5E,KAAK6E,OAAS,GAKlB,eAAea,EAAML,GACjB,GAAIrF,KAAKgC,aAAehC,KAAK0E,YACzB,OAGC1E,KAAKyE,aAAgBzE,KAAK2E,sBAC3B3E,KAAK6E,OAAS7E,KAAK6E,OAAOzB,MAAM,EAAGpD,KAAK4E,OAAS,IAGrD,MAAMe,EAAM3F,KAAK4F,YAAYP,GAEzBrF,KAAK6E,OAAO7E,KAAK4E,OAAS,GAC1B5E,KAAK6E,OAAO7E,KAAK4E,OAAS,GAAGlD,KAAKiE,GAGlC3F,KAAK6E,OAAOnD,KAAK,CAACiE,IAGjB3F,KAAKyE,YAINzE,KAAK2E,qBAAsB,EAH3B3E,KAAK4E,SASb,YAAYS,GACR,IAAInC,EAAQ,EACZ,MAAMsB,EAAaxE,KAAK8E,YACxB,OAAQO,EAAOnE,MACX,IAAK,OACD,IAAAqC,MAAK8B,EAAOzB,WAAW,KACnB5D,KAAKgE,OAAOqB,EAAO3B,aAEvB,MACJ,IAAK,MACDR,EAAQmC,EAAO5B,UACf,IAAAF,MAAK8B,EAAO1B,WAAW/C,IACnBZ,KAAKU,IAAIwC,IAASsB,EAAWqB,SAASjF,OAE1C,MACJ,IAAK,SACDsC,EAAQmC,EAAO5B,UACf,IAAAF,MAAK8B,EAAO1B,WAAW/C,IACnBZ,KAAK8F,OAAO5C,IAASsB,EAAWqB,SAASjF,OAE7C,MACJ,IAAK,OACDZ,KAAK+F,KAAKV,EAAO3B,SAAU2B,EAAO5B,UAClC,MACJ,QACI,QAMZ,YAAY4B,GACR,IAAInC,EAAQ,EACZ,MAAMsB,EAAaxE,KAAK8E,YACxB,OAAQO,EAAOnE,MACX,IAAK,MACDgC,EAAQmC,EAAO3B,UACf,IAAAH,MAAK8B,EAAOzB,WAAWhD,IACnBZ,KAAK8F,OAAO5C,IAASsB,EAAWqB,SAASjF,OAE7C,MACJ,IAAK,MACDsC,EAAQmC,EAAO3B,UACf,IAAAH,MAAK8B,EAAOzB,WAAWhD,IACnBZ,KAAKU,IAAI2E,EAAO3B,WAAYc,EAAWqB,SAASjF,OAEpD,MACJ,IAAK,UACD,IAAA2C,MAAK8B,EAAO1B,WAAW,KACnB3D,KAAKgE,OAAOqB,EAAO5B,aAEvB,MACJ,IAAK,OACDzD,KAAK+F,KAAKV,EAAO5B,SAAU4B,EAAO3B,UAClC,MACJ,QACI,QAMZ,YAAY2B,GACR,MAAM1B,EAAY,IAClB,IAAAJ,MAAK8B,EAAO1B,WAAW/C,IACnB+C,EAAUjC,KAAK1B,KAAK8E,YAAYkB,OAAOpF,OAE3C,MAAMgD,EAAY,GAIlB,OAHA,IAAAL,MAAK8B,EAAOzB,WAAWhD,IACnBgD,EAAUlC,KAAK1B,KAAK8E,YAAYkB,OAAOpF,OAEpC,CACHM,KAAMmE,EAAOnE,KACbuC,SAAU4B,EAAO5B,SACjBC,SAAU2B,EAAO3B,SACjBC,YACAC,eAOZ,SAAWW,GAkBPA,EAAuB0B,mBAdvB,MAII,OAAOrF,GACH,OAAOA,EAKX,SAASA,GACL,OAAOA,IAfnB,CAmBG2D,IAA2BA,EAAyB,KCpNhD,MAAM2B,EAMT,YAAYC,EAAe,MACvBnG,KAAKoG,OAAS,KACdpG,KAAKG,SAAW,IAAI,EAAAC,OAAOJ,MAC3BA,KAAKK,aAAc,EACnBL,KAAKoG,OAASD,EAKlB,WACI,MAAO,QAKX,iBACI,OAAOnG,KAAKK,YAKhB,cACI,OAAOL,KAAKG,SAKhB,MACI,OAAOH,KAAKoG,OAKhB,IAAIxF,GACA,MAAMO,EAAWnB,KAAKoG,OAClB,EAAA9D,QAAA,UAAkBnB,EAAUP,KAGhCZ,KAAKoG,OAASxF,EACdZ,KAAKG,SAASc,KAAK,CACfE,SAAUA,EACVC,SAAUR,KAMlB,UACQZ,KAAKK,cAGTL,KAAKK,aAAc,EACnB,EAAAD,OAAA,UAAiBJ,MACjBA,KAAKoG,OAAS,QAMtB,SAAWF,GAMPA,EAAgBG,aAFhB,QAJJ,CAOGH,IAAoBA,EAAkB,KAIlC,MAAMI,EAIT,YAAYvG,EAAU,IAKlBC,KAAKuG,gBAAiB,EAItBvG,KAAKwG,iBAAkB,EAMvBxG,KAAKyG,UAAYC,QAAQC,aAAQ,GACjC3G,KAAK4G,YAAa,EAClB5G,KAAKK,aAAc,EACnBL,KAAK6G,aAAe,IAAI,EAAAC,cACxB9G,KAAK+G,UAAYhH,EAAQiH,UAAY,GACjCjH,EAAQkH,OACRjH,KAAKkH,IAAMnH,EAAQkH,QAGnBjH,KAAKkH,IAAM,IAAIpH,EACfE,KAAK4G,YAAa,GAQ1B,eACI,OAAO5G,KAAK+G,UAKhB,iBACI,OAAO/G,KAAKK,YAShB,IAAI8G,GACA,OAAOnH,KAAKkH,IAAIpG,IAAId,KAAKoH,aAAaD,IAS1C,IAAIA,GACA,OAAOnH,KAAKkH,IAAI7F,IAAIrB,KAAKoH,aAAaD,IAS1C,aAAaA,GACT,MAAME,EAAM,IAAIxE,EAGhB,OAFA7C,KAAK6G,aAAaS,IAAID,GACtBrH,KAAKU,IAAIyG,EAAME,GACRA,EAaX,WAAWF,GACP,MAAMI,EAAM,IAAIhD,EAAuB,IAAIA,EAAuB0B,oBAGlE,OAFAjG,KAAK6G,aAAaS,IAAIC,GACtBvH,KAAKU,IAAIyG,EAAMI,GACRA,EAaX,UAAUJ,GACN,MAAMK,EAAM,IAAIpF,EAGhB,OAFApC,KAAK6G,aAAaS,IAAIE,GACtBxH,KAAKU,IAAIyG,EAAMK,GACRA,EASX,YAAYL,GACR,MAAMM,EAAM,IAAIvB,EAGhB,OAFAlG,KAAK6G,aAAaS,IAAIG,GACtBzH,KAAKU,IAAIyG,EAAMM,GACRA,EAQX,SAASN,GACL,MAAMM,EAAMzH,KAAKc,IAAIqG,GACrB,IAAKM,GAAoB,UAAbA,EAAIvG,KACZ,MAAMF,MAAM,iDAEhB,OAAOyG,EAAI3G,MAUf,SAASqG,EAAMvG,GACX,MAAM6G,EAAMzH,KAAKc,IAAIqG,GACrB,IAAKM,GAAoB,UAAbA,EAAIvG,KACZ,MAAMF,MAAM,gDAEhByG,EAAI/G,IAAIE,GAUZ,KAAKoG,GACD,MAAMU,EAAO,IAAIpB,EAAQ,CAAEU,WAAUC,OAAQjH,OAE7C,OADAA,KAAK6G,aAAaS,IAAII,GACfA,EAWX,IAAIP,EAAMvG,GACNZ,KAAKkH,IAAIxG,IAAIV,KAAKoH,aAAaD,GAAOvG,GAK1C,UACQZ,KAAKgC,aAGThC,KAAKK,aAAc,EACfL,KAAK4G,YACL5G,KAAKkH,IAAIS,UAEb3H,KAAK6G,aAAac,WAKtB,aAAaR,GAIT,OAHInH,KAAK+G,YACLI,EAAOnH,KAAK+G,UAAY,IAAMI,GAE3BA","file":"7081.1b2d4ce6d9de750fb68c.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservbleMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableString]]\n */\nexport class ObservableString {\n    /**\n     * Construct a new observable string.\n     */\n    constructor(initialText = '') {\n        this._text = '';\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._text = initialText;\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'String';\n    }\n    /**\n     * A signal emitted when the string has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Set the value of the string.\n     */\n    set text(value) {\n        if (value.length === this._text.length && value === this._text) {\n            return;\n        }\n        this._text = value;\n        this._changed.emit({\n            type: 'set',\n            start: 0,\n            end: value.length,\n            value: value\n        });\n    }\n    /**\n     * Get the value of the string.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Insert a substring.\n     *\n     * @param index - The starting index.\n     *\n     * @param text - The substring to insert.\n     */\n    insert(index, text) {\n        this._text = this._text.slice(0, index) + text + this._text.slice(index);\n        this._changed.emit({\n            type: 'insert',\n            start: index,\n            end: index + text.length,\n            value: text\n        });\n    }\n    /**\n     * Remove a substring.\n     *\n     * @param start - The starting index.\n     *\n     * @param end - The ending index.\n     */\n    remove(start, end) {\n        const oldValue = this._text.slice(start, end);\n        this._text = this._text.slice(0, start) + this._text.slice(end);\n        this._changed.emit({\n            type: 'remove',\n            start: start,\n            end: end,\n            value: oldValue\n        });\n    }\n    /**\n     * Set the ObservableString to an empty string.\n     */\n    clear() {\n        this.text = '';\n    }\n    /**\n     * Test whether the string has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the string.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n}\n//# sourceMappingURL=observablestring.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        ArrayExt.insert(this._array, index, value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each } from '@lumino/algorithm';\nimport { ObservableList } from './observablelist';\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList extends ObservableList {\n    /**\n     * Construct a new undoable observable list.\n     */\n    constructor(serializer) {\n        super();\n        this._inCompound = false;\n        this._isUndoable = true;\n        this._madeCompoundChange = false;\n        this._index = -1;\n        this._stack = [];\n        this._serializer = serializer;\n        this.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this._index < this._stack.length - 1;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this._index >= 0;\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._inCompound = true;\n        this._isUndoable = isUndoAble !== false;\n        this._madeCompoundChange = false;\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._inCompound = false;\n        this._isUndoable = true;\n        if (this._madeCompoundChange) {\n            this._index++;\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        if (!this.canUndo) {\n            return;\n        }\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes.reverse()) {\n            this._undoChange(change);\n        }\n        this._isUndoable = true;\n        this._index--;\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        if (!this.canRedo) {\n            return;\n        }\n        this._index++;\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes) {\n            this._redoChange(change);\n        }\n        this._isUndoable = true;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this._index = -1;\n        this._stack = [];\n    }\n    /**\n     * Handle a change in the list.\n     */\n    _onListChanged(list, change) {\n        if (this.isDisposed || !this._isUndoable) {\n            return;\n        }\n        // Clear everything after this position if necessary.\n        if (!this._inCompound || !this._madeCompoundChange) {\n            this._stack = this._stack.slice(0, this._index + 1);\n        }\n        // Copy the change.\n        const evt = this._copyChange(change);\n        // Put the change in the stack.\n        if (this._stack[this._index + 1]) {\n            this._stack[this._index + 1].push(evt);\n        }\n        else {\n            this._stack.push([evt]);\n        }\n        // If not in a compound operation, increase index.\n        if (!this._inCompound) {\n            this._index++;\n        }\n        else {\n            this._madeCompoundChange = true;\n        }\n    }\n    /**\n     * Undo a change event.\n     */\n    _undoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                each(change.newValues, () => {\n                    this.remove(change.newIndex);\n                });\n                break;\n            case 'set':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.set(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'move':\n                this.move(change.newIndex, change.oldIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Redo a change event.\n     */\n    _redoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'set':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.set(change.newIndex++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                each(change.oldValues, () => {\n                    this.remove(change.oldIndex);\n                });\n                break;\n            case 'move':\n                this.move(change.oldIndex, change.newIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Copy a change as JSON.\n     */\n    _copyChange(change) {\n        const oldValues = [];\n        each(change.oldValues, value => {\n            oldValues.push(this._serializer.toJSON(value));\n        });\n        const newValues = [];\n        each(change.newValues, value => {\n            newValues.push(this._serializer.toJSON(value));\n        });\n        return {\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        };\n    }\n}\n/**\n * Namespace for ObservableUndoableList utilities.\n */\n(function (ObservableUndoableList) {\n    /**\n     * A default, identity serializer.\n     */\n    class IdentitySerializer {\n        /**\n         * Identity serialize.\n         */\n        toJSON(value) {\n            return value;\n        }\n        /**\n         * Identity deserialize.\n         */\n        fromJSON(value) {\n            return value;\n        }\n    }\n    ObservableUndoableList.IdentitySerializer = IdentitySerializer;\n})(ObservableUndoableList || (ObservableUndoableList = {}));\n//# sourceMappingURL=undoablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DisposableSet } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ObservableMap } from './observablemap';\nimport { ObservableJSON } from './observablejson';\nimport { ObservableString } from './observablestring';\nimport { ObservableUndoableList } from './undoablelist';\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue {\n    /**\n     * Constructor for the value.\n     *\n     * @param initialValue: the starting value for the `ObservableValue`.\n     */\n    constructor(initialValue = null) {\n        this._value = null;\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._value = initialValue;\n    }\n    /**\n     * The observable type.\n     */\n    get type() {\n        return 'Value';\n    }\n    /**\n     * Whether the value has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the current value, or `undefined` if it has not been set.\n     */\n    get() {\n        return this._value;\n    }\n    /**\n     * Set the current value.\n     */\n    set(value) {\n        const oldValue = this._value;\n        if (JSONExt.deepEqual(oldValue, value)) {\n            return;\n        }\n        this._value = value;\n        this._changed.emit({\n            oldValue: oldValue,\n            newValue: value\n        });\n    }\n    /**\n     * Dispose of the resources held by the value.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._value = null;\n    }\n}\n/**\n * The namespace for the `ObservableValue` class statics.\n */\n(function (ObservableValue) {\n    /**\n     * The changed args object emitted by the `IObservableValue`.\n     */\n    class IChangedArgs {\n    }\n    ObservableValue.IChangedArgs = IChangedArgs;\n})(ObservableValue || (ObservableValue = {}));\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB {\n    /**\n     * Constructor for the `ModelDB`.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the model has been populated with\n         * any model values.\n         */\n        this.isPrepopulated = false;\n        /**\n         * Whether the model is collaborative.\n         */\n        this.isCollaborative = false;\n        /**\n         * A promise resolved when the model is connected\n         * to its backend. For the in-memory ModelDB it\n         * is immediately resolved.\n         */\n        this.connected = Promise.resolve(void 0);\n        this._toDispose = false;\n        this._isDisposed = false;\n        this._disposables = new DisposableSet();\n        this._basePath = options.basePath || '';\n        if (options.baseDB) {\n            this._db = options.baseDB;\n        }\n        else {\n            this._db = new ObservableMap();\n            this._toDispose = true;\n        }\n    }\n    /**\n     * The base path for the `ModelDB`. This is prepended\n     * to all the paths that are passed in to the member\n     * functions of the object.\n     */\n    get basePath() {\n        return this._basePath;\n    }\n    /**\n     * Whether the database is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Get a value for a path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns an `IObservable`.\n     */\n    get(path) {\n        return this._db.get(this._resolvePath(path));\n    }\n    /**\n     * Whether the `IModelDB` has an object at this path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns a boolean for whether an object is at `path`.\n     */\n    has(path) {\n        return this._db.has(this._resolvePath(path));\n    }\n    /**\n     * Create a string and insert it in the database.\n     *\n     * @param path: the path for the string.\n     *\n     * @returns the string that was created.\n     */\n    createString(path) {\n        const str = new ObservableString();\n        this._disposables.add(str);\n        this.set(path, str);\n        return str;\n    }\n    /**\n     * Create an undoable list and insert it in the database.\n     *\n     * @param path: the path for the list.\n     *\n     * @returns the list that was created.\n     *\n     * #### Notes\n     * The list can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createList(path) {\n        const vec = new ObservableUndoableList(new ObservableUndoableList.IdentitySerializer());\n        this._disposables.add(vec);\n        this.set(path, vec);\n        return vec;\n    }\n    /**\n     * Create a map and insert it in the database.\n     *\n     * @param path: the path for the map.\n     *\n     * @returns the map that was created.\n     *\n     * #### Notes\n     * The map can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createMap(path) {\n        const map = new ObservableJSON();\n        this._disposables.add(map);\n        this.set(path, map);\n        return map;\n    }\n    /**\n     * Create an opaque value and insert it in the database.\n     *\n     * @param path: the path for the value.\n     *\n     * @returns the value that was created.\n     */\n    createValue(path) {\n        const val = new ObservableValue();\n        this._disposables.add(val);\n        this.set(path, val);\n        return val;\n    }\n    /**\n     * Get a value at a path, or `undefined if it has not been set\n     * That value must already have been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     */\n    getValue(path) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call getValue for an ObservableValue');\n        }\n        return val.get();\n    }\n    /**\n     * Set a value at a path. That value must already have\n     * been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     *\n     * @param value: the new value.\n     */\n    setValue(path, value) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call setValue on an ObservableValue');\n        }\n        val.set(value);\n    }\n    /**\n     * Create a view onto a subtree of the model database.\n     *\n     * @param basePath: the path for the root of the subtree.\n     *\n     * @returns an `IModelDB` with a view onto the original\n     *   `IModelDB`, with `basePath` prepended to all paths.\n     */\n    view(basePath) {\n        const view = new ModelDB({ basePath, baseDB: this });\n        this._disposables.add(view);\n        return view;\n    }\n    /**\n     * Set a value at a path. Not intended to\n     * be called by user code, instead use the\n     * `create*` factory methods.\n     *\n     * @param path: the path to set the value at.\n     *\n     * @param value: the value to set at the path.\n     */\n    set(path, value) {\n        this._db.set(this._resolvePath(path), value);\n    }\n    /**\n     * Dispose of the resources held by the database.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        if (this._toDispose) {\n            this._db.dispose();\n        }\n        this._disposables.dispose();\n    }\n    /**\n     * Compute the fully resolved path for a path argument.\n     */\n    _resolvePath(path) {\n        if (this._basePath) {\n            path = this._basePath + '.' + path;\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=modeldb.js.map"],"sourceRoot":""}
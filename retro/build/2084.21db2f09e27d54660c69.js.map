{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/widget.js"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","super","this","addClass","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","widget","_rendered","hide","show","isDisposed","dispose","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","AttachmentsModel","_map","ObservableMap","_isDisposed","_stateChanged","Signal","_changed","_modelDB","_serialized","_changeGuard","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","modelDB","createValue","get","fromJSON","toJSON","_onSerializedChanged","has","item","_createItem","delete","forEach","clear","ret","createAttachmentModel","_onGenericChange","sender","args","emit","newValue","AttachmentModel","AttachmentsResolver","_parent","_model","url","startsWith","resolveUrl","path","getDownloadUrl","attachment","data","mimeType","imageRendererFactory","Error","_b","_c","isLocal","call","Private","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","id","UUID","contentChanged","stateChanged","_modelDBMutex","onGenericChange","observableMetadata","createMap","onModelDBMetadataChange","trusted","onTrustedChanged","metadata","Array","isArray","source","join","JSONExt","sharedModel","getId","getValue","setValue","create","JSON","parse","stringify","cell_type","event","getMetadata","_changeCellMetata","setMetadata","jupyter","collapsed","name","scrolled","tags","change","_onSharedModelChanged","metadataChange","map","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","RawCellModel","MarkdownCellModel","CodeCellModel","outputs","execution_count","_onExecutionCountChanged","setOutputs","_outputs","createOutputArea","onModelDBOutputsChange","collapseChanged","oldValue","hasOwnProperty","reinitialize","clearExecution","getOutputs","output","add","switchSharedModel","codeCell","newValues","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","executionCountChange","OutputAreaModel","outputs_hidden","newJupyter","s","t","p","prototype","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_readOnly","_inputHidden","_syncCollapse","_syncEditable","header","createCellHeader","inputWrapper","_inputWrapper","Panel","inputCollapser","input","_input","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","setOptions","onMetadataChanged","loadCollapseState","loadEditableState","firstElementChild","syncEditable","saveEditableState","current","readOnly","Promise","resolve","setPrompt","syncCollapse","saveCollapseState","handleInputHidden","assign","source_hidden","constructor","msg","focus","refresh","getOption","setOption","toggleClass","_editorFactory","OutputPrompt","Stdin","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","rendermime","_rendermime","outputWrapper","_outputWrapper","outputCollapser","_output","OutputArea","maxNumberOutputs","outputLengthChanged","_outputLengthHandler","insertWidget","_outputPlaceholder","onStateChanged","initializeState","loadScrolledState","removeWidget","isHidden","_outputsScrolled","syncScrolled","saveScrolledState","outputsScrolled","SimplifiedOutputArea","disconnect","force","execute","async","sessionContext","code","trim","session","kernel","cellId","recordTiming","future","msgPromise","outputArea","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onAfterAttach","addEventListener","removeEventListener","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","toArray","filter","types","withContent","URI","_generateURI","updateCellSourceWithAttachment","then","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","onerror","console","error","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_renderer","_prevText","_ready","PromiseDelegate","clone","resolver","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderInput","promise","_handleRendered","inputArea","removeClass","showEditor","onUpdateRequest","attachmentName","textToBeAppended","mimeModel","MimeModel","createRenderer","renderModel","RawCell"],"mappings":"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","file":"2084.21db2f09e27d54660c69.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        layout.addWidget(editor);\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._modelDB = null;\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            options.contentFactory || AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n        // If we are given a IModelDB, keep an up-to-date\n        // serialized copy of the AttachmentsModel in it.\n        if (options.modelDB) {\n            this._modelDB = options.modelDB;\n            this._serialized = this._modelDB.createValue('attachments');\n            if (this._serialized.get()) {\n                this.fromJSON(this._serialized.get());\n            }\n            else {\n                this._serialized.set(this.toJSON());\n            }\n            this._serialized.changed.connect(this._onSerializedChanged, this);\n        }\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * If the serialized version of the outputs have changed due to a remote\n     * action, then update the model accordingly.\n     */\n    _onSerializedChanged(sender, args) {\n        if (!this._changeGuard) {\n            this._changeGuard = true;\n            this.fromJSON(args.newValue);\n            this._changeGuard = false;\n        }\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachemntsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attchment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport * as models from '@jupyterlab/shared-models';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            modelDB: options.modelDB,\n            id: options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4()\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        /**\n         * A mutex to update the shared model.\n         */\n        this._modelDBMutex = models.createMutex();\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onModelDBMetadataChange, this);\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source.join('');\n        }\n        else {\n            this.value.text = cell.source;\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Handle a change to the cell metadata modelDB and reflect it in the shared model.\n     */\n    onModelDBMetadataChange(sender, event) {\n        const metadata = this.sharedModel.getMetadata();\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'change':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'remove':\n                    delete metadata[event.key];\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n            this.sharedModel.setMetadata(metadata);\n        });\n    }\n    /**\n     * Change the cell metadata for a given event.\n     *\n     * @param metadata The cell metadata.\n     * @param event The event to handle.\n     */\n    _changeCellMetata(metadata, event) {\n        switch (event.key) {\n            case 'jupyter':\n                metadata.jupyter = event.newValue;\n                break;\n            case 'collapsed':\n                metadata.collapsed = event.newValue;\n                break;\n            case 'name':\n                metadata.name = event.newValue;\n                break;\n            case 'scrolled':\n                metadata.scrolled = event.newValue;\n                break;\n            case 'tags':\n                metadata.tags = event.newValue;\n                break;\n            case 'trusted':\n                metadata.trusted = event.newValue;\n                break;\n            default:\n                // The default is applied for custom metadata that are not\n                // defined in the official nbformat but which are defined\n                // by the user.\n                metadata[event.key] = event.newValue;\n        }\n    }\n    /**\n     * Handle a change to the cell shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the shared model changes.\n     *\n     * This method overrides the CodeEditor protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CodeEditor._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            var _a;\n            if (change.metadataChange) {\n                const newValue = (_a = change.metadataChange) === null || _a === void 0 ? void 0 : _a.newValue;\n                if (newValue) {\n                    Object.keys(newValue).map(key => {\n                        switch (key) {\n                            case 'collapsed':\n                                this.metadata.set('collapsed', newValue.jupyter);\n                                break;\n                            case 'jupyter':\n                                this.metadata.set('jupyter', newValue.jupyter);\n                                break;\n                            case 'name':\n                                this.metadata.set('name', newValue.name);\n                                break;\n                            case 'scrolled':\n                                this.metadata.set('scrolled', newValue.scrolled);\n                                break;\n                            case 'tags':\n                                this.metadata.set('tags', newValue.tags);\n                                break;\n                            case 'trusted':\n                                this.metadata.set('trusted', newValue.trusted);\n                                break;\n                            default:\n                                // The default is applied for custom metadata that are not\n                                // defined in the official nbformat but which are defined\n                                // by the user.\n                                this.metadata.set(key, newValue[key]);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = cell.outputs;\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        this._modelDBMutex(() => {\n            const sharedCell = this.sharedModel;\n            sharedCell.setOutputs(outputs !== null && outputs !== void 0 ? outputs : []);\n        });\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onModelDBOutputsChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            this.clearExecution();\n            sharedModel.getOutputs().forEach(output => this._outputs.add(output));\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.getValue('executionCount');\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onModelDBOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex + outputs.length, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the output shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the nbcell changes.\n     *\n     * This method overrides the CellModel protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CellModel._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            if (change.outputsChange) {\n                this.clearExecution();\n                sender.getOutputs().forEach(output => this._outputs.add(output));\n            }\n            if (change.executionCountChange) {\n                this.executionCount = change.executionCountChange.newValue\n                    ? change.executionCountChange.newValue\n                    : null;\n            }\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            codeCell.execution_count = args.newValue\n                ? args.newValue\n                : null;\n        });\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, SimplifiedOutputArea, OutputPrompt, Stdin } from '@jupyterlab/outputarea';\nimport { MimeModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { some, filter, toArray } from '@lumino/algorithm';\nimport { PanelLayout, Panel, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellHeader, CellFooter } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            let editorOptions = {};\n            Object.keys(options.editorConfig).forEach((key) => {\n                var _a, _b;\n                editorOptions[key] = (_b = (_a = options.editorConfig) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : null;\n            });\n            this.editor.setOptions(editorOptions);\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        // Insert the output before the cell footer.\n        const outputWrapper = (this._outputWrapper = new Panel());\n        outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n        const outputCollapser = new OutputCollapser();\n        outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n        const output = (this._output = new OutputArea({\n            model: model.outputs,\n            rendermime,\n            contentFactory: contentFactory,\n            maxNumberOutputs: options.maxNumberOutputs\n        }));\n        output.addClass(CELL_OUTPUT_AREA_CLASS);\n        // Set a CSS if there are no outputs, and connect a signal for future\n        // changes to the number of outputs. This is for conditional styling\n        // if there are no outputs.\n        if (model.outputs.length === 0) {\n            this.addClass(NO_OUTPUTS_CLASS);\n        }\n        output.outputLengthChanged.connect(this._outputLengthHandler, this);\n        outputWrapper.addWidget(outputCollapser);\n        outputWrapper.addWidget(output);\n        this.layout.insertWidget(2, outputWrapper);\n        this._outputPlaceholder = new OutputPlaceholder(() => {\n            this.outputHidden = !this.outputHidden;\n        });\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderInput(this._renderer);\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n}\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}
{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/commands.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/index.js"],"names":["CommandIDs","createNew","createNewMarkdown","changeFontSize","lineNumbers","lineWrap","changeTabs","matchBrackets","autoClosingBrackets","createConsole","replaceSelection","runCode","runAllCode","markdownPreview","undo","redo","cut","copy","paste","selectAll","FACTORY","config","Object","assign","CodeEditor","Commands","getCreateConsoleFunction","commands","async","widget","args","_a","options","console","execute","activate","name","context","contentsModel","path","preferredLanguage","model","defaultKernelLanguage","ref","id","insertMode","pathChanged","connect","sender","value","session","setPath","setName","updateWidget","transientConfigs","editor","editorOptions","keys","forEach","key","includes","setOptions","addChangeFontSizeCommand","settingRegistry","trans","addCommand","delta","Number","isNaN","error","style","window","getComputedStyle","document","documentElement","cssSize","parseInt","getPropertyValue","currentSize","fontSize","set","catch","reason","message","label","addLineNumbersCommand","isEnabled","isToggled","__","addWordWrapCommand","addChangeTabsCommand","tabSize","insertSpaces","size","addMatchBracketsCommand","addAutoClosingBracketsCommand","addReplaceSelectionCommand","tracker","_b","text","currentWidget","content","call","addCreateConsoleCommand","icon","consoleIcon","addRunCodeCommand","code","extension","PathExt","selection","getSelection","start","end","selected","column","line","getOffsetAt","substring","MarkdownCodeBlocks","blocks","block","startLine","endLine","getLine","cursor","getCursorPosition","lineCount","setCursorPosition","Promise","resolve","addRunAllCodeCommand","addMarkdownPreviewCommand","mode","isVisible","markdownIcon","addUndoCommand","undoIcon","stylesheet","addRedoCommand","redoIcon","addCutCommand","getTextSelection","Clipboard","isSelected","cutIcon","addCopyCommand","copyIcon","addPasteCommand","clipboard","navigator","clipboardData","readText","Boolean","pasteIcon","addSelectAllCommand","execCommand","selectionObj","cwd","ext","type","then","factory","addCreateNewCommand","browserFactory","isPalette","paletteLabel","launcherLabel","caption","undefined","LabIcon","iconName","textEditorIcon","defaultBrowser","fileExt","addCreateNewMarkdownCommand","addCreateNewToLauncher","launcher","add","command","category","rank","addCreateNewMarkdownToLauncher","addChangeTabsCommandsToPalette","palette","paletteCategory","addItem","_n","addCreateNewCommandToPalette","addCreateNewMarkdownCommandToPalette","addChangeFontSizeCommandsToPalette","addEditingCommandsToSettingsMenu","menu","tabMenu","Menu","title","settingsMenu","addGroup","submenu","addCreateNewFileToFileMenu","fileMenu","newMenu","addCreateNewMarkdownFileToFileMenu","addUndoRedoToEditMenu","editMenu","undoers","addEditorViewerToViewMenu","viewMenu","editorViewers","toggleLineNumbers","getOption","setOption","toggleWordWrap","newValue","toggleMatchBrackets","lineNumbersToggled","wordWrapToggled","matchBracketsToggled","addConsoleCreatorToFileMenu","consoleCreators","createConsoleLabel","n","addCodeRunnersToRunMenu","consoleTracker","sessionDialogs","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","current","find","sessionContext","run","runAll","restartAndRunAll","sessionContextDialogs","restart","restarted","addCreateConsoleToContextMenu","app","contextMenu","selector","addMarkdownPreviewToContextMenu","addUndoCommandToContextMenu","addRedoCommandToContextMenu","addCutCommandToContextMenu","addCopyCommandToContextMenu","addPasteCommandToContextMenu","addSelectAllCommandToContextMenu","updateSettings","settings","get","composite","notifyCommandChanged","updateTracker","addCommands","addLauncherItems","addKernelLanguageLauncherItems","availableKernelFileTypes","addPaletteItems","addKernelLanguagePaletteItems","addMenuItems","addKernelLanguageMenuItems","addContextMenuItems","editorServices","translator","restorer","load","FileEditorFactory","factoryOptions","fileTypes","defaultFor","restored","shell","WidgetTracker","namespace","commonLanguageFileTypeData","Map","restore","all","changed","widgetCreated","save","docRegistry","addWidgetFactory","widgetAdded","specsManager","serviceManager","kernelspecs","ready","Set","specs","spec","specModel","exts","language","getAvailableKernelFileTypes","requires","IEditorServices","IFileBrowserFactory","ISettingRegistry","ITranslator","optional","IConsoleTracker","ICommandPalette","ILauncher","IMainMenu","ILayoutRestorer","ISessionContextDialogs","provides","IEditorTracker","autoStart","tabSpaceStatus","IStatusBar","editorTracker","statusBar","item","TabSpaceStatus","registerStatusItem","align","isActive","has"],"mappings":"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","file":"2508.cf6e27003045eec5be08.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs, Clipboard } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { MarkdownCodeBlocks, PathExt } from '@jupyterlab/coreutils';\nimport { consoleIcon, copyIcon, cutIcon, markdownIcon, pasteIcon, redoIcon, textEditorIcon, undoIcon, LabIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\n/**\n * The command IDs used by the fileeditor plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'fileeditor:create-new';\n    CommandIDs.createNewMarkdown = 'fileeditor:create-new-markdown-file';\n    CommandIDs.changeFontSize = 'fileeditor:change-font-size';\n    CommandIDs.lineNumbers = 'fileeditor:toggle-line-numbers';\n    CommandIDs.lineWrap = 'fileeditor:toggle-line-wrap';\n    CommandIDs.changeTabs = 'fileeditor:change-tabs';\n    CommandIDs.matchBrackets = 'fileeditor:toggle-match-brackets';\n    CommandIDs.autoClosingBrackets = 'fileeditor:toggle-autoclosing-brackets';\n    CommandIDs.createConsole = 'fileeditor:create-console';\n    CommandIDs.replaceSelection = 'fileeditor:replace-selection';\n    CommandIDs.runCode = 'fileeditor:run-code';\n    CommandIDs.runAllCode = 'fileeditor:run-all';\n    CommandIDs.markdownPreview = 'fileeditor:markdown-preview';\n    CommandIDs.undo = 'fileeditor:undo';\n    CommandIDs.redo = 'fileeditor:redo';\n    CommandIDs.cut = 'fileeditor:cut';\n    CommandIDs.copy = 'fileeditor:copy';\n    CommandIDs.paste = 'fileeditor:paste';\n    CommandIDs.selectAll = 'fileeditor:select-all';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates editor widgets.\n */\nexport const FACTORY = 'Editor';\nlet config = Object.assign({}, CodeEditor.defaultConfig);\n/**\n * A utility class for adding commands and menu items,\n * for use by the File Editor extension or other Editor extensions.\n */\nexport var Commands;\n(function (Commands) {\n    /**\n     * Accessor function that returns the createConsole function for use by Create Console commands\n     */\n    function getCreateConsoleFunction(commands) {\n        return async function createConsole(widget, args) {\n            var _a;\n            const options = args || {};\n            const console = await commands.execute('console:create', {\n                activate: options['activate'],\n                name: (_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name,\n                path: widget.context.path,\n                preferredLanguage: widget.context.model.defaultKernelLanguage,\n                ref: widget.id,\n                insertMode: 'split-bottom'\n            });\n            widget.context.pathChanged.connect((sender, value) => {\n                var _a;\n                console.session.setPath(value);\n                console.session.setName((_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name);\n            });\n        };\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateSettings(settings, commands) {\n        config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n        // Trigger a refresh of the rendered commands\n        commands.notifyCommandChanged();\n    }\n    Commands.updateSettings = updateSettings;\n    /**\n     * Update the settings of the current tracker instances.\n     */\n    function updateTracker(tracker) {\n        tracker.forEach(widget => {\n            updateWidget(widget.content);\n        });\n    }\n    Commands.updateTracker = updateTracker;\n    /**\n     * Update the settings of a widget.\n     * Skip global settings for transient editor specific configs.\n     */\n    function updateWidget(widget) {\n        const transientConfigs = ['lineNumbers', 'lineWrap', 'matchBrackets'];\n        const editor = widget.editor;\n        let editorOptions = {};\n        Object.keys(config).forEach((key) => {\n            if (!transientConfigs.includes(key)) {\n                editorOptions[key] = config[key];\n            }\n        });\n        editor.setOptions(editorOptions);\n    }\n    Commands.updateWidget = updateWidget;\n    /**\n     * Wrapper function for adding the default File Editor commands\n     */\n    function addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory) {\n        // Add a command to change font size.\n        addChangeFontSizeCommand(commands, settingRegistry, trans, id);\n        addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled);\n        addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled);\n        addChangeTabsCommand(commands, settingRegistry, trans, id);\n        addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled);\n        addAutoClosingBracketsCommand(commands, settingRegistry, trans, id);\n        addReplaceSelectionCommand(commands, tracker, trans, isEnabled);\n        addCreateConsoleCommand(commands, tracker, trans, isEnabled);\n        addRunCodeCommand(commands, tracker, trans, isEnabled);\n        addRunAllCodeCommand(commands, tracker, trans, isEnabled);\n        addMarkdownPreviewCommand(commands, tracker, trans);\n        // Add a command for creating a new text file.\n        addCreateNewCommand(commands, browserFactory, trans);\n        // Add a command for creating a new Markdown file.\n        addCreateNewMarkdownCommand(commands, browserFactory, trans);\n        addUndoCommand(commands, tracker, trans, isEnabled);\n        addRedoCommand(commands, tracker, trans, isEnabled);\n        addCutCommand(commands, tracker, trans, isEnabled);\n        addCopyCommand(commands, tracker, trans, isEnabled);\n        addPasteCommand(commands, tracker, trans, isEnabled);\n        addSelectAllCommand(commands, tracker, trans, isEnabled);\n    }\n    Commands.addCommands = addCommands;\n    /**\n     * Add a command to change font size for File Editor\n     */\n    function addChangeFontSizeCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeFontSize, {\n            execute: args => {\n                const delta = Number(args['delta']);\n                if (Number.isNaN(delta)) {\n                    console.error(`${CommandIDs.changeFontSize}: delta arg must be a number`);\n                    return;\n                }\n                const style = window.getComputedStyle(document.documentElement);\n                const cssSize = parseInt(style.getPropertyValue('--jp-code-font-size'), 10);\n                const currentSize = config.fontSize || cssSize;\n                config.fontSize = currentSize + delta;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: args => args['name']\n        });\n    }\n    Commands.addChangeFontSizeCommand = addChangeFontSizeCommand;\n    /**\n     * Add the Line Numbers command\n     */\n    function addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineNumbers, {\n            execute: () => {\n                config.lineNumbers = !config.lineNumbers;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: () => config.lineNumbers,\n            label: trans.__('Line Numbers')\n        });\n    }\n    Commands.addLineNumbersCommand = addLineNumbersCommand;\n    /**\n     * Add the Word Wrap command\n     */\n    function addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineWrap, {\n            execute: args => {\n                config.lineWrap = args['mode'] || 'off';\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: args => {\n                const lineWrap = args['mode'] || 'off';\n                return config.lineWrap === lineWrap;\n            },\n            label: trans.__('Word Wrap')\n        });\n    }\n    Commands.addWordWrapCommand = addWordWrapCommand;\n    /**\n     * Add command for changing tabs size or type in File Editor\n     */\n    function addChangeTabsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeTabs, {\n            label: args => args['name'],\n            execute: args => {\n                config.tabSize = args['size'] || 4;\n                config.insertSpaces = !!args['insertSpaces'];\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isToggled: args => {\n                const insertSpaces = !!args['insertSpaces'];\n                const size = args['size'] || 4;\n                return config.insertSpaces === insertSpaces && config.tabSize === size;\n            }\n        });\n    }\n    Commands.addChangeTabsCommand = addChangeTabsCommand;\n    /**\n     * Add the Match Brackets command\n     */\n    function addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.matchBrackets, {\n            execute: () => {\n                config.matchBrackets = !config.matchBrackets;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Match Brackets'),\n            isEnabled,\n            isToggled: () => config.matchBrackets\n        });\n    }\n    Commands.addMatchBracketsCommand = addMatchBracketsCommand;\n    /**\n     * Add the Auto Close Brackets for Text Editor command\n     */\n    function addAutoClosingBracketsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: () => {\n                config.autoClosingBrackets = !config.autoClosingBrackets;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Auto Close Brackets for Text Editor'),\n            isToggled: () => config.autoClosingBrackets\n        });\n    }\n    Commands.addAutoClosingBracketsCommand = addAutoClosingBracketsCommand;\n    /**\n     * Add the replace selection for text editor command\n     */\n    function addReplaceSelectionCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.replaceSelection, {\n            execute: args => {\n                var _a, _b;\n                const text = args['text'] || '';\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                (_b = (_a = widget.content.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n            },\n            isEnabled,\n            label: trans.__('Replace Selection in Editor')\n        });\n    }\n    Commands.addReplaceSelectionCommand = addReplaceSelectionCommand;\n    /**\n     * Add the Create Console for Editor command\n     */\n    function addCreateConsoleCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.createConsole, {\n            execute: args => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return getCreateConsoleFunction(commands)(widget, args);\n            },\n            isEnabled,\n            icon: consoleIcon,\n            label: trans.__('Create Console for Editor')\n        });\n    }\n    Commands.addCreateConsoleCommand = addCreateConsoleCommand;\n    /**\n     * Add the Run Code command\n     */\n    function addRunCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runCode, {\n            execute: () => {\n                var _a;\n                // Run the appropriate code, taking into account a ```fenced``` code block.\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                const selection = editor.getSelection();\n                const { start, end } = selection;\n                let selected = start.column !== end.column || start.line !== end.line;\n                if (selected) {\n                    // Get the selected code from the editor.\n                    const start = editor.getOffsetAt(selection.start);\n                    const end = editor.getOffsetAt(selection.end);\n                    code = editor.model.value.text.substring(start, end);\n                }\n                else if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    const { text } = editor.model.value;\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        if (block.startLine <= start.line && start.line <= block.endLine) {\n                            code = block.code;\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n                if (!selected) {\n                    // no selection, submit whole line and advance\n                    code = editor.getLine(selection.start.line);\n                    const cursor = editor.getCursorPosition();\n                    if (cursor.line + 1 === editor.lineCount) {\n                        const text = editor.model.value.text;\n                        editor.model.value.text = text + '\\n';\n                    }\n                    editor.setCursorPosition({\n                        line: cursor.line + 1,\n                        column: cursor.column\n                    });\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run Code')\n        });\n    }\n    Commands.addRunCodeCommand = addRunCodeCommand;\n    /**\n     * Add the Run All Code command\n     */\n    function addRunAllCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runAllCode, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const text = editor.model.value.text;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    // For Markdown files, run only code blocks.\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        code += block.code;\n                    }\n                }\n                else {\n                    code = text;\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run All Code')\n        });\n    }\n    Commands.addRunAllCodeCommand = addRunAllCodeCommand;\n    /**\n     * Add markdown preview command\n     */\n    function addMarkdownPreviewCommand(commands, tracker, trans) {\n        commands.addCommand(CommandIDs.markdownPreview, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const path = widget.context.path;\n                return commands.execute('markdownviewer:open', {\n                    path,\n                    options: {\n                        mode: 'split-right'\n                    }\n                });\n            },\n            isVisible: () => {\n                const widget = tracker.currentWidget;\n                return ((widget && PathExt.extname(widget.context.path) === '.md') || false);\n            },\n            icon: markdownIcon,\n            label: trans.__('Show Markdown Preview')\n        });\n    }\n    Commands.addMarkdownPreviewCommand = addMarkdownPreviewCommand;\n    /**\n     * Add undo command\n     */\n    function addUndoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.undo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.undo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are undo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: undoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Undo')\n        });\n    }\n    Commands.addUndoCommand = addUndoCommand;\n    /**\n     * Add redo command\n     */\n    function addRedoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.redo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.redo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are redo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: redoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Redo')\n        });\n    }\n    Commands.addRedoCommand = addRedoCommand;\n    /**\n     * Add cut command\n     */\n    function addCutCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.cut, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n                editor.replaceSelection && editor.replaceSelection('');\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Cut')\n        });\n    }\n    Commands.addCutCommand = addCutCommand;\n    /**\n     * Add copy command\n     */\n    function addCopyCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.copy, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy')\n        });\n    }\n    Commands.addCopyCommand = addCopyCommand;\n    /**\n     * Add paste command\n     */\n    function addPasteCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.paste, {\n            execute: async () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                // Get data from clipboard\n                const clipboard = window.navigator.clipboard;\n                const clipboardData = await clipboard.readText();\n                if (clipboardData) {\n                    // Paste data to the editor\n                    editor.replaceSelection && editor.replaceSelection(clipboardData);\n                }\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Paste')\n        });\n    }\n    Commands.addPasteCommand = addPasteCommand;\n    /**\n     * Add select all command\n     */\n    function addSelectAllCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.selectAll, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                editor.execCommand('selectAll');\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            label: trans.__('Select All')\n        });\n    }\n    Commands.addSelectAllCommand = addSelectAllCommand;\n    /**\n     * Helper function to check if there is a text selection in the editor\n     */\n    function isSelected(editor) {\n        const selectionObj = editor.getSelection();\n        const { start, end } = selectionObj;\n        const selected = start.column !== end.column || start.line !== end.line;\n        return selected;\n    }\n    /**\n     * Helper function to get text selection from the editor\n     */\n    function getTextSelection(editor) {\n        const selectionObj = editor.getSelection();\n        const start = editor.getOffsetAt(selectionObj.start);\n        const end = editor.getOffsetAt(selectionObj.end);\n        const text = editor.model.value.text.substring(start, end);\n        return text;\n    }\n    /**\n     * Function to create a new untitled text file, given the current working directory.\n     */\n    function createNew(commands, cwd, ext = 'txt') {\n        return commands\n            .execute('docmanager:new-untitled', {\n            path: cwd,\n            type: 'file',\n            ext\n        })\n            .then(model => {\n            return commands.execute('docmanager:open', {\n                path: model.path,\n                factory: FACTORY\n            });\n        });\n    }\n    /**\n     * Add the New File command\n     *\n     * Defaults to Text/.txt if file type data is not specified\n     */\n    function addCreateNewCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNew, {\n            label: args => {\n                var _a, _b;\n                if (args.isPalette) {\n                    return (_a = args.paletteLabel) !== null && _a !== void 0 ? _a : trans.__('New Text File');\n                }\n                return (_b = args.launcherLabel) !== null && _b !== void 0 ? _b : trans.__('Text File');\n            },\n            caption: args => { var _a; return (_a = args.caption) !== null && _a !== void 0 ? _a : trans.__('Create a new text file'); },\n            icon: args => {\n                var _a;\n                return args.isPalette\n                    ? undefined\n                    : LabIcon.resolve({\n                        icon: (_a = args.iconName) !== null && _a !== void 0 ? _a : textEditorIcon\n                    });\n            },\n            execute: args => {\n                var _a;\n                const cwd = args.cwd || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd, (_a = args.fileExt) !== null && _a !== void 0 ? _a : 'txt');\n            }\n        });\n    }\n    Commands.addCreateNewCommand = addCreateNewCommand;\n    /**\n     * Add the New Markdown File command\n     */\n    function addCreateNewMarkdownCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNewMarkdown, {\n            label: args => args['isPalette']\n                ? trans.__('New Markdown File')\n                : trans.__('Markdown File'),\n            caption: trans.__('Create a new markdown file'),\n            icon: args => (args['isPalette'] ? undefined : markdownIcon),\n            execute: args => {\n                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd, 'md');\n            }\n        });\n    }\n    Commands.addCreateNewMarkdownCommand = addCreateNewMarkdownCommand;\n    /**\n     * Wrapper function for adding the default launcher items for File Editor\n     */\n    function addLauncherItems(launcher, trans) {\n        addCreateNewToLauncher(launcher, trans);\n        addCreateNewMarkdownToLauncher(launcher, trans);\n    }\n    Commands.addLauncherItems = addLauncherItems;\n    /**\n     * Add Create New Text File to the Launcher\n     */\n    function addCreateNewToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNew,\n            category: trans.__('Other'),\n            rank: 1\n        });\n    }\n    Commands.addCreateNewToLauncher = addCreateNewToLauncher;\n    /**\n     * Add Create New Markdown to the Launcher\n     */\n    function addCreateNewMarkdownToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNewMarkdown,\n            category: trans.__('Other'),\n            rank: 2\n        });\n    }\n    Commands.addCreateNewMarkdownToLauncher = addCreateNewMarkdownToLauncher;\n    /**\n     * Add ___ File items to the Launcher for common file types associated with available kernels\n     */\n    function addKernelLanguageLauncherItems(launcher, trans, availableKernelFileTypes) {\n        for (let ext of availableKernelFileTypes) {\n            launcher.add({\n                command: CommandIDs.createNew,\n                category: trans.__('Other'),\n                rank: 3,\n                args: ext\n            });\n        }\n    }\n    Commands.addKernelLanguageLauncherItems = addKernelLanguageLauncherItems;\n    /**\n     * Wrapper function for adding the default items to the File Editor palette\n     */\n    function addPaletteItems(palette, trans) {\n        addChangeTabsCommandsToPalette(palette, trans);\n        addCreateNewCommandToPalette(palette, trans);\n        addCreateNewMarkdownCommandToPalette(palette, trans);\n        addChangeFontSizeCommandsToPalette(palette, trans);\n    }\n    Commands.addPaletteItems = addPaletteItems;\n    /**\n     * Add commands to change the tab indentation to the File Editor palette\n     */\n    function addChangeTabsCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        const command = 'fileeditor:change-tabs';\n        palette.addItem({ command, args, category: paletteCategory });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            palette.addItem({ command, args, category: paletteCategory });\n        }\n    }\n    Commands.addChangeTabsCommandsToPalette = addChangeTabsCommandsToPalette;\n    /**\n     * Add a Create New File command to the File Editor palette\n     */\n    function addCreateNewCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNew,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewCommandToPalette = addCreateNewCommandToPalette;\n    /**\n     * Add a Create New Markdown command to the File Editor palette\n     */\n    function addCreateNewMarkdownCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNewMarkdown,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewMarkdownCommandToPalette = addCreateNewMarkdownCommandToPalette;\n    /**\n     * Add commands to change the font size to the File Editor palette\n     */\n    function addChangeFontSizeCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const command = CommandIDs.changeFontSize;\n        let args = { name: trans.__('Increase Font Size'), delta: 1 };\n        palette.addItem({ command, args, category: paletteCategory });\n        args = { name: trans.__('Decrease Font Size'), delta: -1 };\n        palette.addItem({ command, args, category: paletteCategory });\n    }\n    Commands.addChangeFontSizeCommandsToPalette = addChangeFontSizeCommandsToPalette;\n    /**\n     * Add New ___ File commands to the File Editor palette for common file types associated with available kernels\n     */\n    function addKernelLanguagePaletteItems(palette, trans, availableKernelFileTypes) {\n        const paletteCategory = trans.__('Text Editor');\n        for (let ext of availableKernelFileTypes) {\n            palette.addItem({\n                command: CommandIDs.createNew,\n                args: Object.assign(Object.assign({}, ext), { isPalette: true }),\n                category: paletteCategory\n            });\n        }\n    }\n    Commands.addKernelLanguagePaletteItems = addKernelLanguagePaletteItems;\n    /**\n     * Wrapper function for adding the default menu items for File Editor\n     */\n    function addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs) {\n        // Add the editing commands to the settings menu.\n        addEditingCommandsToSettingsMenu(menu, commands, trans);\n        // Add new text file creation to the file menu.\n        addCreateNewFileToFileMenu(menu);\n        // Add new markdown file creation to the file menu.\n        addCreateNewMarkdownFileToFileMenu(menu);\n        // Add undo/redo hooks to the edit menu.\n        addUndoRedoToEditMenu(menu, tracker);\n        // Add editor view options.\n        addEditorViewerToViewMenu(menu, tracker, trans);\n        // Add a console creator the the file menu.\n        addConsoleCreatorToFileMenu(menu, commands, tracker, trans);\n        // Add a code runner to the run menu.\n        if (consoleTracker) {\n            addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs);\n        }\n    }\n    Commands.addMenuItems = addMenuItems;\n    /**\n     * Add File Editor editing commands to the Settings menu, including:\n     * Indent with Tab, Tab Spaces, Change Font Size, and auto closing brackets\n     */\n    function addEditingCommandsToSettingsMenu(menu, commands, trans) {\n        const tabMenu = new Menu({ commands });\n        tabMenu.title.label = trans.__('Text Editor Indentation');\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        const command = 'fileeditor:change-tabs';\n        tabMenu.addItem({ command, args });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            tabMenu.addItem({ command, args });\n        }\n        menu.settingsMenu.addGroup([\n            {\n                command: CommandIDs.changeFontSize,\n                args: { name: trans.__('Increase Text Editor Font Size'), delta: +1 }\n            },\n            {\n                command: CommandIDs.changeFontSize,\n                args: { name: trans.__('Decrease Text Editor Font Size'), delta: -1 }\n            },\n            { type: 'submenu', submenu: tabMenu },\n            { command: CommandIDs.autoClosingBrackets }\n        ], 30);\n    }\n    Commands.addEditingCommandsToSettingsMenu = addEditingCommandsToSettingsMenu;\n    /**\n     * Add a Create New File command to the File menu\n     */\n    function addCreateNewFileToFileMenu(menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 30);\n    }\n    Commands.addCreateNewFileToFileMenu = addCreateNewFileToFileMenu;\n    /**\n     * Add a Create New Markdown File command to the File menu\n     */\n    function addCreateNewMarkdownFileToFileMenu(menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNewMarkdown }], 30);\n    }\n    Commands.addCreateNewMarkdownFileToFileMenu = addCreateNewMarkdownFileToFileMenu;\n    /**\n     * Add Create New ___ File commands to the File menu for common file types associated with available kernels\n     */\n    function addKernelLanguageMenuItems(menu, availableKernelFileTypes) {\n        for (let ext of availableKernelFileTypes) {\n            menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew, args: ext }], 30);\n        }\n    }\n    Commands.addKernelLanguageMenuItems = addKernelLanguageMenuItems;\n    /**\n     * Add File Editor undo and redo widgets to the Edit menu\n     */\n    function addUndoRedoToEditMenu(menu, tracker) {\n        menu.editMenu.undoers.add({\n            tracker,\n            undo: widget => {\n                widget.content.editor.undo();\n            },\n            redo: widget => {\n                widget.content.editor.redo();\n            }\n        });\n    }\n    Commands.addUndoRedoToEditMenu = addUndoRedoToEditMenu;\n    /**\n     * Add a File Editor editor viewer to the View Menu\n     */\n    function addEditorViewerToViewMenu(menu, tracker, trans) {\n        menu.viewMenu.editorViewers.add({\n            tracker,\n            toggleLineNumbers: widget => {\n                const lineNumbers = !widget.content.editor.getOption('lineNumbers');\n                widget.content.editor.setOption('lineNumbers', lineNumbers);\n            },\n            toggleWordWrap: widget => {\n                const oldValue = widget.content.editor.getOption('lineWrap');\n                const newValue = oldValue === 'off' ? 'on' : 'off';\n                widget.content.editor.setOption('lineWrap', newValue);\n            },\n            toggleMatchBrackets: widget => {\n                const matchBrackets = !widget.content.editor.getOption('matchBrackets');\n                widget.content.editor.setOption('matchBrackets', matchBrackets);\n            },\n            lineNumbersToggled: widget => widget.content.editor.getOption('lineNumbers'),\n            wordWrapToggled: widget => widget.content.editor.getOption('lineWrap') !== 'off',\n            matchBracketsToggled: widget => widget.content.editor.getOption('matchBrackets')\n        });\n    }\n    Commands.addEditorViewerToViewMenu = addEditorViewerToViewMenu;\n    /**\n     * Add a File Editor console creator to the File menu\n     */\n    function addConsoleCreatorToFileMenu(menu, commands, tracker, trans) {\n        const createConsole = getCreateConsoleFunction(commands);\n        menu.fileMenu.consoleCreators.add({\n            tracker,\n            createConsoleLabel: (n) => trans.__('Create Console for Editor'),\n            createConsole\n        });\n    }\n    Commands.addConsoleCreatorToFileMenu = addConsoleCreatorToFileMenu;\n    /**\n     * Add a File Editor code runner to the Run menu\n     */\n    function addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs) {\n        menu.runMenu.codeRunners.add({\n            tracker,\n            runLabel: (n) => trans.__('Run Code'),\n            runAllLabel: (n) => trans.__('Run All Code'),\n            restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Code'),\n            isEnabled: current => !!consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; }),\n            run: () => commands.execute(CommandIDs.runCode),\n            runAll: () => commands.execute(CommandIDs.runAllCode),\n            restartAndRunAll: current => {\n                const widget = consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; });\n                if (widget) {\n                    return (sessionDialogs || sessionContextDialogs)\n                        .restart(widget.sessionContext)\n                        .then(restarted => {\n                        if (restarted) {\n                            void commands.execute(CommandIDs.runAllCode);\n                        }\n                        return restarted;\n                    });\n                }\n            }\n        });\n    }\n    Commands.addCodeRunnersToRunMenu = addCodeRunnersToRunMenu;\n    /**\n     * Wrapper function for adding the default items to the File Editor context menu\n     */\n    function addContextMenuItems(app) {\n        addCreateConsoleToContextMenu(app);\n        addMarkdownPreviewToContextMenu(app);\n        addUndoCommandToContextMenu(app);\n        addRedoCommandToContextMenu(app);\n        addCutCommandToContextMenu(app);\n        addCopyCommandToContextMenu(app);\n        addPasteCommandToContextMenu(app);\n        addSelectAllCommandToContextMenu(app);\n    }\n    Commands.addContextMenuItems = addContextMenuItems;\n    /**\n     * Add a Create Console item to the File Editor context menu\n     */\n    function addCreateConsoleToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.createConsole,\n            selector: '.jp-FileEditor'\n        });\n    }\n    Commands.addCreateConsoleToContextMenu = addCreateConsoleToContextMenu;\n    /**\n     * Add a Markdown Preview item to the File Editor context menu\n     */\n    function addMarkdownPreviewToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.markdownPreview,\n            selector: '.jp-FileEditor'\n        });\n    }\n    Commands.addMarkdownPreviewToContextMenu = addMarkdownPreviewToContextMenu;\n    /**\n     * Add a Undo item to the File Editor context menu\n     */\n    function addUndoCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.undo,\n            selector: '.jp-FileEditor',\n            rank: 1\n        });\n    }\n    Commands.addUndoCommandToContextMenu = addUndoCommandToContextMenu;\n    /**\n     * Add a Redo item to the File Editor context menu\n     */\n    function addRedoCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.redo,\n            selector: '.jp-FileEditor',\n            rank: 2\n        });\n    }\n    Commands.addRedoCommandToContextMenu = addRedoCommandToContextMenu;\n    /**\n     * Add a Cut item to the File Editor context menu\n     */\n    function addCutCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.cut,\n            selector: '.jp-FileEditor',\n            rank: 3\n        });\n    }\n    Commands.addCutCommandToContextMenu = addCutCommandToContextMenu;\n    /**\n     * Add a Copy item to the File Editor context menu\n     */\n    function addCopyCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.copy,\n            selector: '.jp-FileEditor',\n            rank: 4\n        });\n    }\n    Commands.addCopyCommandToContextMenu = addCopyCommandToContextMenu;\n    /**\n     * Add a Paste item to the File Editor context menu\n     */\n    function addPasteCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.paste,\n            selector: '.jp-FileEditor',\n            rank: 5\n        });\n    }\n    Commands.addPasteCommandToContextMenu = addPasteCommandToContextMenu;\n    /**\n     * Add a Select All item to the File Editor context menu\n     */\n    function addSelectAllCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.selectAll,\n            selector: '.jp-FileEditor',\n            rank: 6\n        });\n    }\n    Commands.addSelectAllCommandToContextMenu = addSelectAllCommandToContextMenu;\n})(Commands || (Commands = {}));\n//# sourceMappingURL=commands.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module fileeditor-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker, ISessionContextDialogs } from '@jupyterlab/apputils';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { FileEditorFactory, IEditorTracker, TabSpaceStatus } from '@jupyterlab/fileeditor';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Menu } from '@lumino/widgets';\nimport { Commands, FACTORY } from './commands';\nexport { Commands } from './commands';\n/**\n * The editor tracker extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/fileeditor-extension:plugin',\n    requires: [\n        IEditorServices,\n        IFileBrowserFactory,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        IConsoleTracker,\n        ICommandPalette,\n        ILauncher,\n        IMainMenu,\n        ILayoutRestorer,\n        ISessionContextDialogs\n    ],\n    provides: IEditorTracker,\n    autoStart: true\n};\n/**\n * A plugin that provides a status item allowing the user to\n * switch tabs vs spaces and tab widths for text editors.\n */\nexport const tabSpaceStatus = {\n    id: '@jupyterlab/fileeditor-extension:tab-space-status',\n    autoStart: true,\n    requires: [IEditorTracker, ISettingRegistry, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, editorTracker, settingRegistry, translator, statusBar) => {\n        const trans = translator.load('jupyterlab');\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        // Create a menu for switching tabs vs spaces.\n        const menu = new Menu({ commands: app.commands });\n        const command = 'fileeditor:change-tabs';\n        const { shell } = app;\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        menu.addItem({ command, args });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            menu.addItem({ command, args });\n        }\n        // Create the status item.\n        const item = new TabSpaceStatus({ menu, translator });\n        // Keep a reference to the code editor config from the settings system.\n        const updateSettings = (settings) => {\n            item.model.config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n        };\n        void Promise.all([\n            settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n            app.restored\n        ]).then(([settings]) => {\n            updateSettings(settings);\n            settings.changed.connect(updateSettings);\n        });\n        // Add the status item.\n        statusBar.registerStatusItem('@jupyterlab/fileeditor-extension:tab-space-status', {\n            item,\n            align: 'right',\n            rank: 1,\n            isActive: () => {\n                return (!!shell.currentWidget && editorTracker.has(shell.currentWidget));\n            }\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [plugin, tabSpaceStatus];\nexport default plugins;\n/**\n * Activate the editor tracker plugin.\n */\nfunction activate(app, editorServices, browserFactory, settingRegistry, translator, consoleTracker, palette, launcher, menu, restorer, sessionDialogs) {\n    const id = plugin.id;\n    const trans = translator.load('jupyterlab');\n    const namespace = 'editor';\n    const factory = new FileEditorFactory({\n        editorServices,\n        factoryOptions: {\n            name: FACTORY,\n            fileTypes: ['markdown', '*'],\n            defaultFor: ['markdown', '*'] // it outranks the defaultRendered viewer.\n        }\n    });\n    const { commands, restored, shell } = app;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    const isEnabled = () => tracker.currentWidget !== null &&\n        tracker.currentWidget === shell.currentWidget;\n    const commonLanguageFileTypeData = new Map([\n        [\n            'python',\n            [\n                {\n                    fileExt: 'py',\n                    iconName: 'ui-components:python',\n                    launcherLabel: trans.__('Python File'),\n                    paletteLabel: trans.__('New Python File'),\n                    caption: trans.__('Create a new Python file')\n                }\n            ]\n        ],\n        [\n            'julia',\n            [\n                {\n                    fileExt: 'jl',\n                    iconName: 'ui-components:text-editor',\n                    launcherLabel: trans.__('Julia File'),\n                    paletteLabel: trans.__('New Julia File'),\n                    caption: trans.__('Create a new Julia file')\n                }\n            ]\n        ],\n        [\n            'R',\n            [\n                {\n                    fileExt: 'r',\n                    iconName: 'ui-components:r-kernel',\n                    launcherLabel: trans.__('R File'),\n                    paletteLabel: trans.__('New R File'),\n                    caption: trans.__('Create a new R file')\n                }\n            ]\n        ]\n    ]);\n    // Use available kernels to determine which common file types should have 'Create New' options in the Launcher, File Editor palette, and File menu\n    const getAvailableKernelFileTypes = async () => {\n        var _a, _b;\n        const specsManager = app.serviceManager.kernelspecs;\n        await specsManager.ready;\n        let fileTypes = new Set();\n        const specs = (_b = (_a = specsManager.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs) !== null && _b !== void 0 ? _b : {};\n        Object.keys(specs).forEach(spec => {\n            const specModel = specs[spec];\n            if (specModel) {\n                const exts = commonLanguageFileTypeData.get(specModel.language);\n                exts === null || exts === void 0 ? void 0 : exts.forEach(ext => fileTypes.add(ext));\n            }\n        });\n        return fileTypes;\n    };\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    // Add a console creator to the File menu\n    // Fetch the initial state of the settings.\n    Promise.all([settingRegistry.load(id), restored])\n        .then(([settings]) => {\n        Commands.updateSettings(settings, commands);\n        Commands.updateTracker(tracker);\n        settings.changed.connect(() => {\n            Commands.updateSettings(settings, commands);\n            Commands.updateTracker(tracker);\n        });\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n        Commands.updateTracker(tracker);\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        void tracker.add(widget);\n        Commands.updateWidget(widget.content);\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    // Handle the settings of new widgets.\n    tracker.widgetAdded.connect((sender, widget) => {\n        Commands.updateWidget(widget.content);\n    });\n    Commands.addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory);\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        Commands.addLauncherItems(launcher, trans);\n    }\n    if (palette) {\n        Commands.addPaletteItems(palette, trans);\n    }\n    if (menu) {\n        Commands.addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs);\n    }\n    getAvailableKernelFileTypes()\n        .then(availableKernelFileTypes => {\n        if (launcher) {\n            Commands.addKernelLanguageLauncherItems(launcher, trans, availableKernelFileTypes);\n        }\n        if (palette) {\n            Commands.addKernelLanguagePaletteItems(palette, trans, availableKernelFileTypes);\n        }\n        if (menu) {\n            Commands.addKernelLanguageMenuItems(menu, availableKernelFileTypes);\n        }\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n    });\n    Commands.addContextMenuItems(app);\n    return tracker;\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}
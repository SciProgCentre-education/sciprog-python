{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/treepathupdater.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/application/lib/tokens.js"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","_format","format","document","body","dataset","emit","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","SIDEBAR_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","type","child","addClass","_tracker","add","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","_restored","PromiseDelegate","FocusTracker","_mainOptionsCache","Map","_sideOptionsCache","id","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","panel","setAttribute","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","dockPanel","_dockPanel","DockPanelSvg","MessageLoop","hsplitPanel","_hsplitPanel","RestorableSplitPanel","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","sideBar","contentNode","stackedPanel","spacing","direction","orientation","SplitPanel","addWidget","setRelativeSizes","hide","layout","currentChanged","connect","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","updated","titleWidgetHandler","_titleWidgetHandler","TitleWidgetHandler","titleWidget","rank","mode","insertWidget","skipLinkWidgetHandler","_skipLinkWidgetHandler","SkipLinkWidgetHandler","skipLinkWidget","show","sender","args","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","currentWidget","currentTitle","hasClass","value","toggleClass","dock","applicationCurrentWidget","saveLayout","activateWidget","shellMode","widgets","toArray","normalizeAreaConfig","main","restoreLayout","forEach","widget","parent","_addToMainArea","Object","assign","get","activate","clear","promise","has","find","current","_currentTabBar","ci","currentIndex","titles","owner","nextBar","_adjacentBar","prevBar","len","area","_addToLeftArea","_addToRightArea","_addToHeaderArea","_addToTopArea","_addToMenuArea","_addToBottomArea","Error","collapse","isDisposed","dispose","expand","isEmpty","mainArea","leftArea","rightArea","relativeSizes","activateById","rehydrate","collapseLeft","collapseRight","dehydrate","iter","map","t","children","inputElement","label","caption","console","error","set","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","_a","isHidden","bars","tabBars","index","indexOf","bar","className","replace","invoke","itemCmp","first","second","filter","_panelChildHook","_items","v","push","ArrayExt","Array","_panel","Panel","item","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","widgetRemoved","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","insertTab","_refreshVisibility","collapsed","data","i","setHidden","oldWidget","previousTitle","_findWidgetByTitle","newWidget","_findWidgetIndex","removeTab","shell","_isDisposed","_skipLinkWidget","skipToFilterFiles","createElement","href","tabIndex","text","addEventListener","appendChild","_focusFileSearch","querySelector","focus","removeEventListener","_selected","_shell","_titleWidget","titleInput","_evtKeyUp","_evtClick","key","oldName","split","pop","newName","blur","isValidFileName","rename","button","readOnly","removeAttribute","selectEnd","select","setSelectionRange","onUpdateRequest","ILabStatus","LabStatus","app","_busyCount","_dirtyCount","_busySignal","_dirtySignal","oldDirty","isDirty","DisposableDelegate","Math","max","oldBusy","isBusy","JupyterLab","name","PageConfig","namespace","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","mod","default","hasOwnProperty","isArray","mods","registerPluginModule","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","_b","parsed","URLExt","window","location","search","hash","pathname","request","history","hard","old","url","reload","pushState","skipRouting","route","pattern","rules","delete","routed","rule","queue","sort","a","b","done","next","execute","debug","reason","warn","ITreePathUpdater","IConnectionLost","IRouter"],"mappings":"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","file":"7423.a24e0533b1c7f4293aad.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied funcion. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, DockPanelSvg, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\nimport { isValidFileName } from '@jupyterlab/docmanager';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const trans = ((options && options.translator) || nullTranslator).load('jupyterlab');\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        menuHandler.panel.node.setAttribute('role', 'navigation');\n        menuHandler.panel.node.setAttribute('aria-label', trans.__('main'));\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        topHandler.panel.node.setAttribute('role', 'banner');\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        bottomPanel.node.setAttribute('role', 'contentinfo');\n        const hboxPanel = new BoxPanel();\n        const dockPanel = (this._dockPanel = new DockPanelSvg());\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = (this._hsplitPanel = new Private.RestorableSplitPanel());\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.sideBar.node.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('main sidebar'));\n        leftHandler.sideBar.node.setAttribute('role', 'complementary');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.sideBar.node.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.contentNode.setAttribute('aria-label', trans.__('alternate sidebar'));\n        rightHandler.sideBar.node.setAttribute('role', 'complementary');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        dockPanel.node.setAttribute('role', 'main');\n        hboxPanel.spacing = 0;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(hsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel. The default sizes will be overwritten during layout restoration.\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Catch update events on the horizontal split panel\n        this._hsplitPanel.updated.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleWidgetHandler = (this._titleWidgetHandler = new Private.TitleWidgetHandler(this));\n        this.add(titleWidgetHandler.titleWidget, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleWidgetHandler.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Skip Links\n        const skipLinkWidgetHandler = (this._skipLinkWidgetHandler = new Private.SkipLinkWidgetHandler(this));\n        this.add(skipLinkWidgetHandler.skipLinkWidget, 'top', { rank: 0 });\n        this._skipLinkWidgetHandler.show();\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/mutiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Set the mode data attribute on the application shell node.\n            this.node.dataset.shellMode = mode;\n            // Adjust menu and title\n            // this.add(this._menuHandler.panel, 'top', {rank: 100});\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleWidgetHandler.show();\n            this._updateTitlePanelTitle();\n            this._modeChanged.emit(mode);\n            return;\n        }\n        // Cache a reference to every widget currently in the dock panel.\n        const widgets = toArray(dock.widgets());\n        // Toggle back to multiple document mode.\n        dock.mode = mode;\n        // Restore the original layout.\n        if (this._cachedLayout) {\n            // Remove any disposed widgets in the cached layout and restore.\n            Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n            dock.restoreLayout(this._cachedLayout);\n            this._cachedLayout = null;\n        }\n        // Add any widgets created during single document mode, which have\n        // subsequently been removed from the dock panel after the multiple document\n        // layout has been restored. If the widget has add options cached for\n        // the widget (i.e., if it has been placed with respect to another widget),\n        // then take that into account.\n        widgets.forEach(widget => {\n            if (!widget.parent) {\n                this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n            }\n        });\n        this._mainOptionsCache.clear();\n        // In case the active widget in the dock panel is *not* the active widget\n        // of the application, defer to the application.\n        if (applicationCurrentWidget) {\n            dock.activateWidget(applicationCurrentWidget);\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        // Adjust menu and title\n        this.add(this._menuHandler.panel, 'top', { rank: 100 });\n        // this._topHandler.addWidget(this._menuHandler.panel, 100)\n        this._titleWidgetHandler.hide();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        this._titleWidgetHandler.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    restoreLayout(mode, layout) {\n        const { mainArea, leftArea, rightArea, relativeSizes } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock) {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        // Restore the relative sizes.\n        if (relativeSizes) {\n            this._hsplitPanel.setRelativeSizes(relativeSizes);\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate(),\n            relativeSizes: this._hsplitPanel.relativeSizes()\n        };\n        return layout;\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const inputElement = this._titleWidgetHandler.titleWidget.node\n            .children[0];\n        inputElement.value = current ? current.title.label : '';\n        inputElement.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true,\n                orientation: 'vertical'\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n    class SkipLinkWidgetHandler {\n        /**\n         * Construct a new skipLink widget handler.\n         */\n        constructor(shell) {\n            this._isDisposed = false;\n            const skipLinkWidget = (this._skipLinkWidget = new Widget());\n            const skipToFilterFiles = document.createElement('a');\n            skipToFilterFiles.href = '#';\n            skipToFilterFiles.tabIndex = 1;\n            skipToFilterFiles.text = 'Skip to Filter Files';\n            skipToFilterFiles.className = 'skip-link';\n            skipToFilterFiles.addEventListener('click', this);\n            skipLinkWidget.addClass('jp-skiplink');\n            skipLinkWidget.id = 'jp-skiplink';\n            skipLinkWidget.node.appendChild(skipToFilterFiles);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'click':\n                    this._focusFileSearch();\n                    break;\n            }\n        }\n        _focusFileSearch() {\n            const input = document.querySelector('#filename-searcher .bp3-input');\n            input.focus();\n        }\n        /**\n         * Get the input element managed by the handler.\n         */\n        get skipLinkWidget() {\n            return this._skipLinkWidget;\n        }\n        /**\n         * Dispose of the handler and the resources it holds.\n         */\n        dispose() {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._skipLinkWidget.node.removeEventListener('click', this);\n            this._skipLinkWidget.dispose();\n        }\n        /**\n         * Hide the skipLink widget.\n         */\n        hide() {\n            this._skipLinkWidget.hide();\n        }\n        /**\n         * Show the skipLink widget.\n         */\n        show() {\n            this._skipLinkWidget.show();\n        }\n        /**\n         * Test whether the handler has been disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n    }\n    Private.SkipLinkWidgetHandler = SkipLinkWidgetHandler;\n    class TitleWidgetHandler {\n        /**\n         * Construct a new title widget handler.\n         */\n        constructor(shell) {\n            this._isDisposed = false;\n            this._selected = false;\n            this._shell = shell;\n            const titleWidget = (this._titleWidget = new Widget());\n            titleWidget.id = 'jp-title-panel-title';\n            const titleInput = document.createElement('input');\n            titleInput.type = 'text';\n            titleInput.addEventListener('keyup', this);\n            titleInput.addEventListener('click', this);\n            titleInput.addEventListener('blur', this);\n            titleWidget.node.appendChild(titleInput);\n        }\n        handleEvent(event) {\n            switch (event.type) {\n                case 'keyup':\n                    void this._evtKeyUp(event);\n                    break;\n                case 'click':\n                    this._evtClick(event);\n                    break;\n                case 'blur':\n                    this._selected = false;\n                    break;\n            }\n        }\n        /**\n         * Handle `keyup` events on the handler.\n         */\n        async _evtKeyUp(event) {\n            if (event.key == 'Enter') {\n                const widget = this._shell.currentWidget;\n                if (widget instanceof DocumentWidget) {\n                    const oldName = widget.context.path.split('/').pop();\n                    const inputElement = this.titleWidget.node\n                        .children[0];\n                    const newName = inputElement.value;\n                    inputElement.blur();\n                    if (newName !== oldName && isValidFileName(newName)) {\n                        await widget.context.rename(newName);\n                    }\n                    else {\n                        inputElement.value = oldName;\n                    }\n                }\n            }\n        }\n        /**\n         * Handle `click` events on the handler.\n         */\n        _evtClick(event) {\n            // only handle primary button clicks\n            if (event.button !== 0 || this._selected) {\n                return;\n            }\n            const currentWidget = this._shell.currentWidget;\n            const inputElement = this.titleWidget.node\n                .children[0];\n            if (currentWidget == null || !(currentWidget instanceof DocumentWidget)) {\n                inputElement.readOnly = true;\n                return;\n            }\n            else {\n                inputElement.removeAttribute('readOnly');\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this._selected = true;\n            const selectEnd = inputElement.value.indexOf('.');\n            if (selectEnd === -1) {\n                inputElement.select();\n            }\n            else {\n                inputElement.setSelectionRange(0, selectEnd);\n            }\n        }\n        /**\n         * Get the input element managed by the handler.\n         */\n        get titleWidget() {\n            return this._titleWidget;\n        }\n        /**\n         * Dispose of the handler and the resources it holds.\n         */\n        dispose() {\n            if (this.isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._titleWidget.node.removeEventListener('keyup', this);\n            this._titleWidget.node.removeEventListener('click', this);\n            this._titleWidget.node.removeEventListener('blur', this);\n            this._titleWidget.dispose();\n        }\n        /**\n         * Hide the title widget.\n         */\n        hide() {\n            this._titleWidget.hide();\n        }\n        /**\n         * Show the title widget.\n         */\n        show() {\n            this._titleWidget.show();\n        }\n        /**\n         * Test whether the handler has been disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n    }\n    Private.TitleWidgetHandler = TitleWidgetHandler;\n    class RestorableSplitPanel extends SplitPanel {\n        constructor(options = {}) {\n            super(options);\n            this.updated = new Signal(this);\n        }\n        /**\n         * Emit 'updated' signal on 'update' requests.\n         */\n        onUpdateRequest(msg) {\n            super.onUpdateRequest(msg);\n            this.updated.emit();\n        }\n    }\n    Private.RestorableSplitPanel = RestorableSplitPanel;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus');\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}